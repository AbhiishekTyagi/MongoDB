Last login: Sat Dec  7 20:51:09 on ttys000
RadhaPutraAbhishektyagi@Abhisheks-MacBook-Air ~ % pwd
/Users/abhishektyagi_1
RadhaPutraAbhishektyagi@Abhisheks-MacBook-Air ~ % mongosh;
Current Mongosh Log ID:	675551561bf91131ca831132
Connecting to:		mongodb://127.0.0.1:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+2.1.5
Using MongoDB:		7.0.2
Using Mongosh:		2.1.5
mongosh 2.3.4 is available for download: https://www.mongodb.com/try/download/shell

For mongosh info see: https://docs.mongodb.com/mongodb-shell/

------
   The server generated these startup warnings when booting
   2024-11-23T08:16:47.342+05:30: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted
------

test> (node:48617) [DEP0040] DeprecationWarning: The `punycode` module is deprecated. Please use a userland alternative instead.
(Use `node --trace-deprecation ...` to show where the warning was created)
test> show dbs;
Abhishek   72.00 KiB
Flights   120.00 KiB
School     40.00 KiB
admin      40.00 KiB
config     96.00 KiB
local     256.00 KiB
shop       72.00 KiB
test> use Abhishek
switched to db Abhishek
Abhishek> show collections;
Radha
Abhishek> db.Radha.find()
[
  {
    _id: ObjectId('6752aefbde8b2591064468b3'),
    Name: 'Abhishek Tyagi',
    Age: 23,
    MartialStatus: 'Unmarried'
  },
  {
    _id: ObjectId('6752fb507f2906e5a6735764'),
    Book_id: 1,
    First_Name: 'RadhaSwami',
    Last_Name: 'KrishnaSwami',
    Page_Number: 250
  }
]
Abhishek> use Products
switched to db Products
Products> db.Items.insertOne({
... "ItemName":"MacbookAir",
... "Price":120000,
... "Specifications":[{"RAM":"8GB"},{"Storage":"125GB"}],
... "Locations":"Noida"
... })
{
  acknowledged: true,
  insertedId: ObjectId('675552661bf91131ca831133')
}
Products> show dbs;
Abhishek   72.00 KiB
Flights   120.00 KiB
Products   40.00 KiB
School     40.00 KiB
admin      40.00 KiB
config    108.00 KiB
local     256.00 KiB
shop       72.00 KiB
Products> use Products
already on db Products
Products> show collections
Items
Products> db .items.find();

Products> db .items.find()

Products> db.items.find()

Products> db.Items.find()
[
  {
    _id: ObjectId('675552661bf91131ca831133'),
    ItemName: 'MacbookAir',
    Price: 120000,
    Specifications: [ { RAM: '8GB' }, { Storage: '125GB' } ],
    Locations: 'Noida'
  }
]
Products> db.Items.insertMany([
... {
... "ItemName":"DellLaptop",
... "Sales":true,
... "Price":150000,
... "Specification":[{"Processor":"8-Core"},{"RamGenration":"4TH"}],
... "Location":"Gurugram"
... },
... {
... "ItemName":"IntelLaptop",
... "Price":130000,
... "Location":"Delhi",
... "Sales":false
... }
... ])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('675555051bf91131ca831134'),
    '1': ObjectId('675555051bf91131ca831135')
  }
}
Products> show collections
Items
Products> db.Item.find()

Products> db.Items.find()
[
  {
    _id: ObjectId('675552661bf91131ca831133'),
    ItemName: 'MacbookAir',
    Price: 120000,
    Specifications: [ { RAM: '8GB' }, { Storage: '125GB' } ],
    Locations: 'Noida'
  },
  {
    _id: ObjectId('675555051bf91131ca831134'),
    ItemName: 'DellLaptop',
    Sales: true,
    Price: 150000,
    Specification: [ { Processor: '8-Core' }, { RamGenration: '4TH' } ],
    Location: 'Gurugram'
  },
  {
    _id: ObjectId('675555051bf91131ca831135'),
    ItemName: 'IntelLaptop',
    Price: 130000,
    Location: 'Delhi',
    Sales: false
  }
]
Products> db.Items.deleteOne({"Price":{$gt 120000}})
Uncaught:
SyntaxError: Unexpected token, expected "," (1:33)

> 1 | db.Items.deleteOne({"Price":{$gt 120000}})
    |                                  ^
  2 |

Products> db.Items.deleteOne({Price:{$gt: 120000}})
{ acknowledged: true, deletedCount: 1 }
Products> db.Items.find()
[
  {
    _id: ObjectId('675552661bf91131ca831133'),
    ItemName: 'MacbookAir',
    Price: 120000,
    Specifications: [ { RAM: '8GB' }, { Storage: '125GB' } ],
    Locations: 'Noida'
  },
  {
    _id: ObjectId('675555051bf91131ca831135'),
    ItemName: 'IntelLaptop',
    Price: 130000,
    Location: 'Delhi',
    Sales: false
  }
]
Products> db.Items.deleteMany({Price:{$gt: 100000}})
{ acknowledged: true, deletedCount: 2 }
Products> db.Items.find()

Products> db.Items.insertMany(
... [
... {
... "Name":"MobilePhone",
... "Price":14000,
... "OnSale":true,
... "Locations":"Ghaziabad"
... },
... {
... "Name":"Laptop",
... "Price":125000,
... "Locations:"Noida"
Uncaught:
SyntaxError: Unexpected token (12:12)

  10 | "Name":"Laptop",
  11 | "Price":125000,
> 12 | "Locations:"Noida"
     |             ^
  13 |

Products> db.Items.insertMany( [ { "Name":"MobilePhone", "Price":14000, "OnSale":true, "Locations":"Ghaziabad" },{"Name":"Laptop","Price":125000,"Locations:"Noida"}])
Uncaught:
SyntaxError: Unexpected token (1:147)

> 1 | db.Items.insertMany( [ { "Name":"MobilePhone", "Price":14000, "OnSale":true, "Locations":"Ghaziabad" },{"Name":"Laptop","Price":125000,"Locations:"Noida"}])
    |                                                                                                                                                    ^
  2 |

Products> db.Items.insertMany( [ { "Name":"MobilePhone", "Price":14000, "OnSale":true, "Locations":"Ghaziabad" },{"Name":"Laptop","Price":125000,"Locations":"Noida"}])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('6755579a1bf91131ca831136'),
    '1': ObjectId('6755579a1bf91131ca831137')
  }
}
Products> db.Items.find()
[
  {
    _id: ObjectId('6755579a1bf91131ca831136'),
    Name: 'MobilePhone',
    Price: 14000,
    OnSale: true,
    Locations: 'Ghaziabad'
  },
  {
    _id: ObjectId('6755579a1bf91131ca831137'),
    Name: 'Laptop',
    Price: 125000,
    Locations: 'Noida'
  }
]
Products> db.Items.find()
[
  {
    _id: ObjectId('6755579a1bf91131ca831136'),
    Name: 'MobilePhone',
    Price: 14000,
    OnSale: true,
    Locations: 'Ghaziabad'
  },
  {
    _id: ObjectId('6755579a1bf91131ca831137'),
    Name: 'Laptop',
    Price: 125000,
    Locations: 'Noida'
  }
]
Products> db.Items.find({Price:{$gt:15000}})
[
  {
    _id: ObjectId('6755579a1bf91131ca831137'),
    Name: 'Laptop',
    Price: 125000,
    Locations: 'Noida'
  }
]
Products> db.Items.UpdateMany({},{"CustomerName":"Abhishek"})
TypeError: db.Items.UpdateMany is not a function
Products> db.Items.UpdateMany({},{$set:{"CustomerName":"Abhishek"}})
TypeError: db.Items.UpdateMany is not a function
Products> db.Items.updateMany({},{$set:{"CustomerName":"Abhishek"}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 2,
  modifiedCount: 2,
  upsertedCount: 0
}
Products> db.Items.find()
[
  {
    _id: ObjectId('6755579a1bf91131ca831136'),
    Name: 'MobilePhone',
    Price: 14000,
    OnSale: true,
    Locations: 'Ghaziabad',
    CustomerName: 'Abhishek'
  },
  {
    _id: ObjectId('6755579a1bf91131ca831137'),
    Name: 'Laptop',
    Price: 125000,
    Locations: 'Noida',
    CustomerName: 'Abhishek'
  }
]
Products> db.Items.deleteOne({Name:"MobilePhone"})
{ acknowledged: true, deletedCount: 1 }
Products> db.Items.find()
[
  {
    _id: ObjectId('6755579a1bf91131ca831137'),
    Name: 'Laptop',
    Price: 125000,
    Locations: 'Noida',
    CustomerName: 'Abhishek'
  }
]
Products> show databases;
Abhishek   72.00 KiB
Flights   120.00 KiB
Products   72.00 KiB
School     40.00 KiB
admin      40.00 KiB
config     72.00 KiB
local     256.00 KiB
shop       72.00 KiB
Products> use Flights
switched to db Flights
Flights> show collections
flightdata
flightData
Flights> db.flightData.find()
[
  { _id: ObjectId('67548c9c7104aad8d1ce6777'), delayed: 'True' },
  {
    _id: ObjectId('675498a71be130c09083bab3'),
    departureAirport: 'MUC',
    arrivalAirport: 'SFO',
    aircraft: 'Airbus A320',
    distance: 12000,
    intercontinental: 'true'
  }
]
Flights> db.flightData.deleteOne(_id: ObjectId('675498a71be130c09083bab3')
Uncaught:
SyntaxError: Unexpected token, expected "," (1:27)

> 1 | db.flightData.deleteOne(_id: ObjectId('675498a71be130c09083bab3')
    |                            ^
  2 |

Flights> db.flightData.deleteOne({_id: ObjectId('675498a71be130c09083bab3'})
Uncaught:
SyntaxError: Unexpected token, expected "," (1:65)

> 1 | db.flightData.deleteOne({_id: ObjectId('675498a71be130c09083bab3'})
    |                                                                  ^
  2 |

Flights> db.flightData.deleteOne({_id: ObjectId('675498a71be130c09083bab3')})
{ acknowledged: true, deletedCount: 1 }
Flights> show collections;
flightdata
flightData
Flights> db.flightData.find()
[ { _id: ObjectId('67548c9c7104aad8d1ce6777'), delayed: 'True' } ]
Flights> db.flightData.deleteOne({delayed:'true'})
{ acknowledged: true, deletedCount: 0 }
Flights> db.flightData.find()
[ { _id: ObjectId('67548c9c7104aad8d1ce6777'), delayed: 'True' } ]
Flights> show collections;
flightdata
flightData
Flights> db.flightData.find()
[ { _id: ObjectId('67548c9c7104aad8d1ce6777'), delayed: 'True' } ]
Flights> db.flightData.deleteOne({_id: ObjectId('67548c9c7104aad8d1ce6777')})
{ acknowledged: true, deletedCount: 1 }
Flights> db.flightData.find()

Flights> db.flightData.insertMany([
... 
...     "departureAirport": "MUC",
Uncaught:
SyntaxError: Unexpected token, expected "," (3:22)

  1 | db.flightData.insertMany([
  2 |
> 3 |     "departureAirport": "MUC",
    |                       ^
  4 |

Flights>     "arrivalAirport": "SFO",
Uncaught:
SyntaxError: Missing semicolon. (1:20)

> 1 |     "arrivalAirport": "SFO",
    |                     ^
  2 |

Flights>     "aircraft": "Airbus A380",
Uncaught:
SyntaxError: Missing semicolon. (1:14)

> 1 |     "aircraft": "Airbus A380",
    |               ^
  2 |

Flights>     "distance": 12000,
Uncaught:
SyntaxError: Missing semicolon. (1:14)

> 1 |     "distance": 12000,
    |               ^
  2 |

Flights>     "intercontinental": true
Uncaught:
SyntaxError: Missing semicolon. (1:22)

> 1 |     "intercontinental": true
    |                       ^
  2 |

Flights>   },
Uncaught:
SyntaxError: Unexpected token (1:2)

> 1 |   },
    |   ^
  2 |

Flights>   {
...     "departureAirport": "LHR",
...     "arrivalAirport": "TXL",
...     "aircraft": "Airbus A320",
...     "distance": 950,
...     "intercontinental": false
...   }
Flights> db.flightData.insertMany([
...   {
...     "departureAirport": "MUC",
...     "arrivalAirport": "SFO",
...     "aircraft": "Airbus A380",
...     "distance": 12000,
...     "intercontinental": true
...   },
...   {
...     "departureAirport": "LHR",
...     "arrivalAirport": "TXL",
...     "aircraft": "Airbus A320",
...     "distance": 950,
...     "intercontinental": false
...   }
... ])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('6755632f1bf91131ca831138'),
    '1': ObjectId('6755632f1bf91131ca831139')
  }
}
Flights> db.flightDat.find()

Flights> db.flightData.find()
[
  {
    _id: ObjectId('6755632f1bf91131ca831138'),
    departureAirport: 'MUC',
    arrivalAirport: 'SFO',
    aircraft: 'Airbus A380',
    distance: 12000,
    intercontinental: true
  },
  {
    _id: ObjectId('6755632f1bf91131ca831139'),
    departureAirport: 'LHR',
    arrivalAirport: 'TXL',
    aircraft: 'Airbus A320',
    distance: 950,
    intercontinental: false
  }
]
Flights> db.flightData.updateOne({aircraft:"airbus A380"},{$set:{"Class":"Economy"})
Uncaught:
SyntaxError: Unexpected token, expected "," (1:74)

> 1 | db.flightData.updateOne({aircraft:"airbus A380"},{$set:{"Class":"Economy"})
    |                                                                           ^
  2 |

Flights> db.flightData.updateOne({aircraft:"airbus A380"},{$set:{"Class":"Economy"}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 0,
  modifiedCount: 0,
  upsertedCount: 0
}
Flights> db.floghtData.find()

Flights> db.flightData.find()
[
  {
    _id: ObjectId('6755632f1bf91131ca831138'),
    departureAirport: 'MUC',
    arrivalAirport: 'SFO',
    aircraft: 'Airbus A380',
    distance: 12000,
    intercontinental: true
  },
  {
    _id: ObjectId('6755632f1bf91131ca831139'),
    departureAirport: 'LHR',
    arrivalAirport: 'TXL',
    aircraft: 'Airbus A320',
    distance: 950,
    intercontinental: false
  }
]
Flights> db.flightData.updateOne({aircraft:'Airbus A380'},{$set:{"Class":"Economy"}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
Flights> db.flightData.find()
[
  {
    _id: ObjectId('6755632f1bf91131ca831138'),
    departureAirport: 'MUC',
    arrivalAirport: 'SFO',
    aircraft: 'Airbus A380',
    distance: 12000,
    intercontinental: true,
    Class: 'Economy'
  },
  {
    _id: ObjectId('6755632f1bf91131ca831139'),
    departureAirport: 'LHR',
    arrivalAirport: 'TXL',
    aircraft: 'Airbus A320',
    distance: 950,
    intercontinental: false
  }
]
Flights> db.flightData.updateOne({distance:950},{$set:{"Class":"Bussiness"}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
Flights> db.flightData.find()
[
  {
    _id: ObjectId('6755632f1bf91131ca831138'),
    departureAirport: 'MUC',
    arrivalAirport: 'SFO',
    aircraft: 'Airbus A380',
    distance: 12000,
    intercontinental: true,
    Class: 'Economy'
  },
  {
    _id: ObjectId('6755632f1bf91131ca831139'),
    departureAirport: 'LHR',
    arrivalAirport: 'TXL',
    aircraft: 'Airbus A320',
    distance: 950,
    intercontinental: false,
    Class: 'Bussiness'
  }
]
Flights> db.flightData.updateMany({},{$set:{"TicketPrice":12000}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 2,
  modifiedCount: 2,
  upsertedCount: 0
}
Flights> db.flightData.find()
[
  {
    _id: ObjectId('6755632f1bf91131ca831138'),
    departureAirport: 'MUC',
    arrivalAirport: 'SFO',
    aircraft: 'Airbus A380',
    distance: 12000,
    intercontinental: true,
    Class: 'Economy',
    TicketPrice: 12000
  },
  {
    _id: ObjectId('6755632f1bf91131ca831139'),
    departureAirport: 'LHR',
    arrivalAirport: 'TXL',
    aircraft: 'Airbus A320',
    distance: 950,
    intercontinental: false,
    Class: 'Bussiness',
    TicketPrice: 12000
  }
]
Flights> db.flightData.find({TicketPrice:{$lt:13000}})
[
  {
    _id: ObjectId('6755632f1bf91131ca831138'),
    departureAirport: 'MUC',
    arrivalAirport: 'SFO',
    aircraft: 'Airbus A380',
    distance: 12000,
    intercontinental: true,
    Class: 'Economy',
    TicketPrice: 12000
  },
  {
    _id: ObjectId('6755632f1bf91131ca831139'),
    departureAirport: 'LHR',
    arrivalAirport: 'TXL',
    aircraft: 'Airbus A320',
    distance: 950,
    intercontinental: false,
    Class: 'Bussiness',
    TicketPrice: 12000
  }
]
Flights> db.flightData.deleteOne({aircraft:'Airbus A320'})
{ acknowledged: true, deletedCount: 1 }
Flights> db.flightData.find()
[
  {
    _id: ObjectId('6755632f1bf91131ca831138'),
    departureAirport: 'MUC',
    arrivalAirport: 'SFO',
    aircraft: 'Airbus A380',
    distance: 12000,
    intercontinental: true,
    Class: 'Economy',
    TicketPrice: 12000
  }
]
Flights> db.flightData.insertOne({"Name":"Abhishek Tyagi"},{"Salary":120000},{"Age":23})
{
  acknowledged: true,
  insertedId: ObjectId('675566781bf91131ca83113a')
}
Flights> db.flightData.find()
[
  {
    _id: ObjectId('6755632f1bf91131ca831138'),
    departureAirport: 'MUC',
    arrivalAirport: 'SFO',
    aircraft: 'Airbus A380',
    distance: 12000,
    intercontinental: true,
    Class: 'Economy',
    TicketPrice: 12000
  },
  { _id: ObjectId('675566781bf91131ca83113a'), Name: 'Abhishek Tyagi' }
]
Flights> db.flightData.insertOne({"Name":"Abhishek Tyagi","Salary":120000,"Age":23})
{
  acknowledged: true,
  insertedId: ObjectId('675567051bf91131ca83113b')
}
Flights> db.flightData.find()
[
  {
    _id: ObjectId('6755632f1bf91131ca831138'),
    departureAirport: 'MUC',
    arrivalAirport: 'SFO',
    aircraft: 'Airbus A380',
    distance: 12000,
    intercontinental: true,
    Class: 'Economy',
    TicketPrice: 12000
  },
  { _id: ObjectId('675566781bf91131ca83113a'), Name: 'Abhishek Tyagi' },
  {
    _id: ObjectId('675567051bf91131ca83113b'),
    Name: 'Abhishek Tyagi',
    Salary: 120000,
    Age: 23
  }
]
Flights> db.flightData.deleteOne({_id: ObjectId('675566781bf91131ca83113a')})
{ acknowledged: true, deletedCount: 1 }
Flights> db.flightData.find()
[
  {
    _id: ObjectId('6755632f1bf91131ca831138'),
    departureAirport: 'MUC',
    arrivalAirport: 'SFO',
    aircraft: 'Airbus A380',
    distance: 12000,
    intercontinental: true,
    Class: 'Economy',
    TicketPrice: 12000
  },
  {
    _id: ObjectId('675567051bf91131ca83113b'),
    Name: 'Abhishek Tyagi',
    Salary: 120000,
    Age: 23
  }
]
Flights> show collections;
flightdata
flightData
Flights> db.flightData.find*(()
... 
Flights> db.flightData.find()
[
  {
    _id: ObjectId('6755632f1bf91131ca831138'),
    departureAirport: 'MUC',
    arrivalAirport: 'SFO',
    aircraft: 'Airbus A380',
    distance: 12000,
    intercontinental: true,
    Class: 'Economy',
    TicketPrice: 12000
  },
  {
    _id: ObjectId('675567051bf91131ca83113b'),
    Name: 'Abhishek Tyagi',
    Salary: 120000,
    Age: 23
  }
]
Flights> db.flightData.updateMany({},{"PilotName":"Radha"})
MongoInvalidArgumentError: Update document requires atomic operators
Flights> db.flightData.updateMany({},{$set:{"PilotName":"Radha"})
Uncaught:
SyntaxError: Unexpected token, expected "," (1:55)

> 1 | db.flightData.updateMany({},{$set:{"PilotName":"Radha"})
    |                                                        ^
  2 |

Flights> db.flightData.updateMany({},{"PilotName":"Radha"}})
Uncaught:
SyntaxError: Unexpected token, expected "," (1:49)

> 1 | db.flightData.updateMany({},{"PilotName":"Radha"}})
    |                                                  ^
  2 |

Flights> db.flightData.updateMany({},{$set:{"PilotName":"Radha"}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 2,
  modifiedCount: 2,
  upsertedCount: 0
}
Flights> db.flightData.find()
[
  {
    _id: ObjectId('6755632f1bf91131ca831138'),
    departureAirport: 'MUC',
    arrivalAirport: 'SFO',
    aircraft: 'Airbus A380',
    distance: 12000,
    intercontinental: true,
    Class: 'Economy',
    TicketPrice: 12000,
    PilotName: 'Radha'
  },
  {
    _id: ObjectId('675567051bf91131ca83113b'),
    Name: 'Abhishek Tyagi',
    Salary: 120000,
    Age: 23,
    PilotName: 'Radha'
  }
]
Flights> db.flightData.deleteMany({PilotName:"Radha"})
{ acknowledged: true, deletedCount: 2 }
Flights> db.flightData.find()

Flights> db.flightData.insertMany([
...   {
...     "departureAirport": "MUC",
...     "arrivalAirport": "SFO",
...     "aircraft": "Airbus A380",
...     "distance": 12000,
...     "intercontinental": true
...   },
...   {
...     "departureAirport": "LHR",
...     "arrivalAirport": "TXL",
...     "aircraft": "Airbus A320",
...     "distance": 950,
...     "intercontinental": false
...   }
... ]})
Uncaught:
SyntaxError: Unexpected token, expected "," (16:1)

  14 |     "intercontinental": false
  15 |   }
> 16 | ]})
     |  ^
  17 |

Flights> db.flightData.insertMany([ { "departureAirport": "MUC", "arrivalAirport": "SFO", "aircraft": "Airbus A380", "distance": 12000, "intercontinental": true }, { "departureAirport": "LHR", "arrivalAirport": "TXL", "aircraft": "Airbus A320", "distance": 950, "intercontinental": false } ])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('675569c91bf91131ca83113c'),
    '1': ObjectId('675569c91bf91131ca83113d')
  }
}
Flights> db.flightData.find()
[
  {
    _id: ObjectId('675569c91bf91131ca83113c'),
    departureAirport: 'MUC',
    arrivalAirport: 'SFO',
    aircraft: 'Airbus A380',
    distance: 12000,
    intercontinental: true
  },
  {
    _id: ObjectId('675569c91bf91131ca83113d'),
    departureAirport: 'LHR',
    arrivalAirport: 'TXL',
    aircraft: 'Airbus A320',
    distance: 950,
    intercontinental: false
  }
]
Flights> show dbs;
Abhishek   72.00 KiB
Flights   120.00 KiB
Products   72.00 KiB
School     40.00 KiB
admin      40.00 KiB
config    108.00 KiB
local     256.00 KiB
shop       72.00 KiB
Flights> use school;
switched to db school
school> show collections

school> db.Students.insertMany([
... {
... "Name":"Radha",
... "Mother_Name":"KirtiMayaa",
... "Father_Name":"Bhanu"
... },
... {
... "Name":"Abhishek Tyagi",
... "Mother_Name":"RadhaMayaa",
... "Father_Name":"Krishna"
... }
... ]
... )
Uncaught:
MongoBulkWriteError: db already exists with different case already have: [School] trying to create [school]
Result: BulkWriteResult {
  insertedCount: 0,
  matchedCount: 0,
  modifiedCount: 0,
  deletedCount: 0,
  upsertedCount: 0,
  upsertedIds: {},
  insertedIds: {}
}
Write Errors: [
  WriteError {
    err: {
      index: 0,
      code: 13297,
      errmsg: 'db already exists with different case already have: [School] trying to create [school]',
      errInfo: undefined,
      op: {
        Name: 'Radha',
        Mother_Name: 'KirtiMayaa',
        Father_Name: 'Bhanu',
        _id: ObjectId('67556acd1bf91131ca83113e')
      }
    }
  }
]
school> show collections;

school> db.Students.insertMany([ { "Name": "Radha", "Mother_Name": "KirtiMayaa", "Father_Name": "Bhanu" }, { "Name": "Abhishek Tyagi", "Mother_Name": "RadhaMayaa", "Father_Name": "Krishna" }])
Uncaught:
MongoBulkWriteError: db already exists with different case already have: [School] trying to create [school]
Result: BulkWriteResult {
  insertedCount: 0,
  matchedCount: 0,
  modifiedCount: 0,
  deletedCount: 0,
  upsertedCount: 0,
  upsertedIds: {},
  insertedIds: {}
}
Write Errors: [
  WriteError {
    err: {
      index: 0,
      code: 13297,
      errmsg: 'db already exists with different case already have: [School] trying to create [school]',
      errInfo: undefined,
      op: {
        Name: 'Radha',
        Mother_Name: 'KirtiMayaa',
        Father_Name: 'Bhanu',
        _id: ObjectId('67556af91bf91131ca831140')
      }
    }
  }
]
school> show collections;

school> show collections

school> db.Student.find()

school> show dbs;
Abhishek   72.00 KiB
Flights    96.00 KiB
Products   72.00 KiB
School     40.00 KiB
admin      40.00 KiB
config    108.00 KiB
local     256.00 KiB
shop       72.00 KiB
school> use shop 
switched to db shop
shop> show collections;
products
shop> db.products.find()
[
  {
    _id: ObjectId('67529326de8b2591064468b1'),
    Name: 'A book',
    Price: 12.76
  },
  {
    _id: ObjectId('6752ac1ede8b2591064468b2'),
    description: 'This is the High quality'
  },
  {
    _id: ObjectId('6752b1f1348f0c4aab6abff3'),
    Name: 'A Computer',
    Description: 'A High Quality Computer',
    Details: { CPU: 'Intel Core i7 8720', Ram: '32Gb' }
  }
]
shop> db.products.insertOne({"Name":"A table Lamp","specification":
... [{"Bulbtype":"Circle"},{"Quality":"Good"}]})
{
  acknowledged: true,
  insertedId: ObjectId('67556c121bf91131ca831142')
}
shop> db.products.find()
[
  {
    _id: ObjectId('67529326de8b2591064468b1'),
    Name: 'A book',
    Price: 12.76
  },
  {
    _id: ObjectId('6752ac1ede8b2591064468b2'),
    description: 'This is the High quality'
  },
  {
    _id: ObjectId('6752b1f1348f0c4aab6abff3'),
    Name: 'A Computer',
    Description: 'A High Quality Computer',
    Details: { CPU: 'Intel Core i7 8720', Ram: '32Gb' }
  },
  {
    _id: ObjectId('67556c121bf91131ca831142'),
    Name: 'A table Lamp',
    specification: [ { Bulbtype: 'Circle' }, { Quality: 'Good' } ]
  }
]
shop> show dbs;
Abhishek   72.00 KiB
Flights    96.00 KiB
Products   72.00 KiB
School     40.00 KiB
admin      40.00 KiB
config    108.00 KiB
local     256.00 KiB
shop       72.00 KiB
shop> use flights
switched to db flights
flights> shopw collections
Uncaught:
SyntaxError: Missing semicolon. (1:5)

> 1 | shopw collections
    |      ^
  2 |

flights> show collections

flights> show databases;
Abhishek   72.00 KiB
Flights    96.00 KiB
Products   72.00 KiB
School     40.00 KiB
admin      40.00 KiB
config    108.00 KiB
local     256.00 KiB
shop       72.00 KiB
flights> use Flights
switched to db Flights
Flights> show collections
flightdata
flightData
Flights> db.flightData.find()
[
  {
    _id: ObjectId('675569c91bf91131ca83113c'),
    departureAirport: 'MUC',
    arrivalAirport: 'SFO',
    aircraft: 'Airbus A380',
    distance: 12000,
    intercontinental: true
  },
  {
    _id: ObjectId('675569c91bf91131ca83113d'),
    departureAirport: 'LHR',
    arrivalAirport: 'TXL',
    aircraft: 'Airbus A320',
    distance: 950,
    intercontinental: false
  }
]
Flights> db.passengers.insertMany([
...   {
...     "name": "Max Schwarzmueller",
...     "age": 29
...   },
...   {
...     "name": "Manu Lorenz",
...     "age": 30
...   },
...   {
...     "name": "Chris Hayton",
...     "age": 35
...   },
...   {
...     "name": "Sandeep Kumar",
...     "age": 28
...   },
...   {
...     "name": "Maria Jones",
...     "age": 30
...   },
...   {
...     "name": "Alexandra Maier",
...     "age": 27
...   },
...   {
...     "name": "Dr. Phil Evans",
...     "age": 47
...   },
...   {
...     "name": "Sandra Brugge",
...     "age": 33
...   },
...   {
...     "name": "Elisabeth Mayr",
...     "age": 29
...   },
...   {
...     "name": "Frank Cube",
...     "age": 41
...   },
...   {
...     "name": "Karandeep Alun",
...     "age": 48
...   },
...   {
...     "name": "Michaela Drayer",
...     "age": 39
...   },
...   {
...     "name": "Bernd Hoftstadt",
...     "age": 22
...   },
e",
    "age": 68
  },
  {
    "name": "Gordon Black",
    "age": 38
  }
]
...   {
...     "name": "Scott Tolib",
...     "age": 44
...   },
...   {
...     "name": "Freddy Melver",
...     "age": 41
...   },
...   {
...     "name": "Alexis Bohed",
...     "age": 35
...   },
...   {
...     "name": "Melanie Palace",
...     "age": 27
...   },
...   {
...     "name": "Armin Glutch",
...     "age": 35
...   },
...   {
...     "name": "Klaus Arber",
...     "age": 53
...   },
...   {
...     "name": "Albert Twostone",
...     "age": 68
...   },
...   {
...     "name": "Gordon Black",
...     "age": 38
...   }
... ]
... )
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('6755782e1bf91131ca831143'),
    '1': ObjectId('6755782e1bf91131ca831144'),
    '2': ObjectId('6755782e1bf91131ca831145'),
    '3': ObjectId('6755782e1bf91131ca831146'),
    '4': ObjectId('6755782e1bf91131ca831147'),
    '5': ObjectId('6755782e1bf91131ca831148'),
    '6': ObjectId('6755782e1bf91131ca831149'),
    '7': ObjectId('6755782e1bf91131ca83114a'),
    '8': ObjectId('6755782e1bf91131ca83114b'),
    '9': ObjectId('6755782e1bf91131ca83114c'),
    '10': ObjectId('6755782e1bf91131ca83114d'),
    '11': ObjectId('6755782e1bf91131ca83114e'),
    '12': ObjectId('6755782e1bf91131ca83114f'),
    '13': ObjectId('6755782e1bf91131ca831150'),
    '14': ObjectId('6755782e1bf91131ca831151'),
    '15': ObjectId('6755782e1bf91131ca831152'),
    '16': ObjectId('6755782e1bf91131ca831153'),
    '17': ObjectId('6755782e1bf91131ca831154'),
    '18': ObjectId('6755782e1bf91131ca831155'),
    '19': ObjectId('6755782e1bf91131ca831156'),
    '20': ObjectId('6755782e1bf91131ca831157')
  }
}
Flights> show collections;
flightdata
flightData
passengers
Flights> db.passenger.find*()
... 
Flights> db.passenger.find()

Flights> db.passengers.find()
[
  {
    _id: ObjectId('6755782e1bf91131ca831143'),
    name: 'Max Schwarzmueller',
    age: 29
  },
  {
    _id: ObjectId('6755782e1bf91131ca831144'),
    name: 'Manu Lorenz',
    age: 30
  },
  {
    _id: ObjectId('6755782e1bf91131ca831145'),
    name: 'Chris Hayton',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831146'),
    name: 'Sandeep Kumar',
    age: 28
  },
  {
    _id: ObjectId('6755782e1bf91131ca831147'),
    name: 'Maria Jones',
    age: 30
  },
  {
    _id: ObjectId('6755782e1bf91131ca831148'),
    name: 'Alexandra Maier',
    age: 27
  },
  {
    _id: ObjectId('6755782e1bf91131ca831149'),
    name: 'Dr. Phil Evans',
    age: 47
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114a'),
    name: 'Sandra Brugge',
    age: 33
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114b'),
    name: 'Elisabeth Mayr',
    age: 29
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114c'),
    name: 'Frank Cube',
    age: 41
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114d'),
    name: 'Karandeep Alun',
    age: 48
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114e'),
    name: 'Michaela Drayer',
    age: 39
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114f'),
    name: 'Bernd Hoftstadt',
    age: 22
  },
  {
    _id: ObjectId('6755782e1bf91131ca831150'),
    name: 'Scott Tolib',
    age: 44
  },
  {
    _id: ObjectId('6755782e1bf91131ca831151'),
    name: 'Freddy Melver',
    age: 41
  },
  {
    _id: ObjectId('6755782e1bf91131ca831152'),
    name: 'Alexis Bohed',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831153'),
    name: 'Melanie Palace',
    age: 27
  },
  {
    _id: ObjectId('6755782e1bf91131ca831154'),
    name: 'Armin Glutch',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831155'),
    name: 'Klaus Arber',
    age: 53
  },
  {
    _id: ObjectId('6755782e1bf91131ca831156'),
    name: 'Albert Twostone',
    age: 68
  }
]
Type "it" for more
Flights> it 
[
  {
    _id: ObjectId('6755782e1bf91131ca831157'),
    name: 'Gordon Black',
    age: 38
  }
]
Flights> db.passengers.find().toarray()
TypeError: db.passengers.find().toarray is not a function
Flights> db.passengers.find().toArray()
[
  {
    _id: ObjectId('6755782e1bf91131ca831143'),
    name: 'Max Schwarzmueller',
    age: 29
  },
  {
    _id: ObjectId('6755782e1bf91131ca831144'),
    name: 'Manu Lorenz',
    age: 30
  },
  {
    _id: ObjectId('6755782e1bf91131ca831145'),
    name: 'Chris Hayton',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831146'),
    name: 'Sandeep Kumar',
    age: 28
  },
  {
    _id: ObjectId('6755782e1bf91131ca831147'),
    name: 'Maria Jones',
    age: 30
  },
  {
    _id: ObjectId('6755782e1bf91131ca831148'),
    name: 'Alexandra Maier',
    age: 27
  },
  {
    _id: ObjectId('6755782e1bf91131ca831149'),
    name: 'Dr. Phil Evans',
    age: 47
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114a'),
    name: 'Sandra Brugge',
    age: 33
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114b'),
    name: 'Elisabeth Mayr',
    age: 29
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114c'),
    name: 'Frank Cube',
    age: 41
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114d'),
    name: 'Karandeep Alun',
    age: 48
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114e'),
    name: 'Michaela Drayer',
    age: 39
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114f'),
    name: 'Bernd Hoftstadt',
    age: 22
  },
  {
    _id: ObjectId('6755782e1bf91131ca831150'),
    name: 'Scott Tolib',
    age: 44
  },
  {
    _id: ObjectId('6755782e1bf91131ca831151'),
    name: 'Freddy Melver',
    age: 41
  },
  {
    _id: ObjectId('6755782e1bf91131ca831152'),
    name: 'Alexis Bohed',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831153'),
    name: 'Melanie Palace',
    age: 27
  },
  {
    _id: ObjectId('6755782e1bf91131ca831154'),
    name: 'Armin Glutch',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831155'),
    name: 'Klaus Arber',
    age: 53
  },
  {
    _id: ObjectId('6755782e1bf91131ca831156'),
    name: 'Albert Twostone',
    age: 68
  },
  {
    _id: ObjectId('6755782e1bf91131ca831157'),
    name: 'Gordon Black',
    age: 38
  }
]
Flights> show collections;
flightdata
flightData
passengers
Flights> db.passengers.find()
[
  {
    _id: ObjectId('6755782e1bf91131ca831143'),
    name: 'Max Schwarzmueller',
    age: 29
  },
  {
    _id: ObjectId('6755782e1bf91131ca831144'),
    name: 'Manu Lorenz',
    age: 30
  },
  {
    _id: ObjectId('6755782e1bf91131ca831145'),
    name: 'Chris Hayton',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831146'),
    name: 'Sandeep Kumar',
    age: 28
  },
  {
    _id: ObjectId('6755782e1bf91131ca831147'),
    name: 'Maria Jones',
    age: 30
  },
  {
    _id: ObjectId('6755782e1bf91131ca831148'),
    name: 'Alexandra Maier',
    age: 27
  },
  {
    _id: ObjectId('6755782e1bf91131ca831149'),
    name: 'Dr. Phil Evans',
    age: 47
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114a'),
    name: 'Sandra Brugge',
    age: 33
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114b'),
    name: 'Elisabeth Mayr',
    age: 29
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114c'),
    name: 'Frank Cube',
    age: 41
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114d'),
    name: 'Karandeep Alun',
    age: 48
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114e'),
    name: 'Michaela Drayer',
    age: 39
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114f'),
    name: 'Bernd Hoftstadt',
    age: 22
  },
  {
    _id: ObjectId('6755782e1bf91131ca831150'),
    name: 'Scott Tolib',
    age: 44
  },
  {
    _id: ObjectId('6755782e1bf91131ca831151'),
    name: 'Freddy Melver',
    age: 41
  },
  {
    _id: ObjectId('6755782e1bf91131ca831152'),
    name: 'Alexis Bohed',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831153'),
    name: 'Melanie Palace',
    age: 27
  },
  {
    _id: ObjectId('6755782e1bf91131ca831154'),
    name: 'Armin Glutch',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831155'),
    name: 'Klaus Arber',
    age: 53
  },
  {
    _id: ObjectId('6755782e1bf91131ca831156'),
    name: 'Albert Twostone',
    age: 68
  }
]
Type "it" for more
Flights> it 
[
  {
    _id: ObjectId('6755782e1bf91131ca831157'),
    name: 'Gordon Black',
    age: 38
  }
]
Flights> db.passengers.find().toArray();
[
  {
    _id: ObjectId('6755782e1bf91131ca831143'),
    name: 'Max Schwarzmueller',
    age: 29
  },
  {
    _id: ObjectId('6755782e1bf91131ca831144'),
    name: 'Manu Lorenz',
    age: 30
  },
  {
    _id: ObjectId('6755782e1bf91131ca831145'),
    name: 'Chris Hayton',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831146'),
    name: 'Sandeep Kumar',
    age: 28
  },
  {
    _id: ObjectId('6755782e1bf91131ca831147'),
    name: 'Maria Jones',
    age: 30
  },
  {
    _id: ObjectId('6755782e1bf91131ca831148'),
    name: 'Alexandra Maier',
    age: 27
  },
  {
    _id: ObjectId('6755782e1bf91131ca831149'),
    name: 'Dr. Phil Evans',
    age: 47
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114a'),
    name: 'Sandra Brugge',
    age: 33
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114b'),
    name: 'Elisabeth Mayr',
    age: 29
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114c'),
    name: 'Frank Cube',
    age: 41
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114d'),
    name: 'Karandeep Alun',
    age: 48
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114e'),
    name: 'Michaela Drayer',
    age: 39
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114f'),
    name: 'Bernd Hoftstadt',
    age: 22
  },
  {
    _id: ObjectId('6755782e1bf91131ca831150'),
    name: 'Scott Tolib',
    age: 44
  },
  {
    _id: ObjectId('6755782e1bf91131ca831151'),
    name: 'Freddy Melver',
    age: 41
  },
  {
    _id: ObjectId('6755782e1bf91131ca831152'),
    name: 'Alexis Bohed',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831153'),
    name: 'Melanie Palace',
    age: 27
  },
  {
    _id: ObjectId('6755782e1bf91131ca831154'),
    name: 'Armin Glutch',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831155'),
    name: 'Klaus Arber',
    age: 53
  },
  {
    _id: ObjectId('6755782e1bf91131ca831156'),
    name: 'Albert Twostone',
    age: 68
  },
  {
    _id: ObjectId('6755782e1bf91131ca831157'),
    name: 'Gordon Black',
    age: 38
  }
]
Flights> db.passengers.find().forEach((passengerData) => {printjson(passengerData)})
{
  _id: ObjectId('6755782e1bf91131ca831143'),
  name: 'Max Schwarzmueller',
  age: 29
}
{
  _id: ObjectId('6755782e1bf91131ca831144'),
  name: 'Manu Lorenz',
  age: 30
}
{
  _id: ObjectId('6755782e1bf91131ca831145'),
  name: 'Chris Hayton',
  age: 35
}
{
  _id: ObjectId('6755782e1bf91131ca831146'),
  name: 'Sandeep Kumar',
  age: 28
}
{
  _id: ObjectId('6755782e1bf91131ca831147'),
  name: 'Maria Jones',
  age: 30
}
{
  _id: ObjectId('6755782e1bf91131ca831148'),
  name: 'Alexandra Maier',
  age: 27
}
{
  _id: ObjectId('6755782e1bf91131ca831149'),
  name: 'Dr. Phil Evans',
  age: 47
}
{
  _id: ObjectId('6755782e1bf91131ca83114a'),
  name: 'Sandra Brugge',
  age: 33
}
{
  _id: ObjectId('6755782e1bf91131ca83114b'),
  name: 'Elisabeth Mayr',
  age: 29
}
{
  _id: ObjectId('6755782e1bf91131ca83114c'),
  name: 'Frank Cube',
  age: 41
}
{
  _id: ObjectId('6755782e1bf91131ca83114d'),
  name: 'Karandeep Alun',
  age: 48
}
{
  _id: ObjectId('6755782e1bf91131ca83114e'),
  name: 'Michaela Drayer',
  age: 39
}
{
  _id: ObjectId('6755782e1bf91131ca83114f'),
  name: 'Bernd Hoftstadt',
  age: 22
}
{
  _id: ObjectId('6755782e1bf91131ca831150'),
  name: 'Scott Tolib',
  age: 44
}
{
  _id: ObjectId('6755782e1bf91131ca831151'),
  name: 'Freddy Melver',
  age: 41
}
{
  _id: ObjectId('6755782e1bf91131ca831152'),
  name: 'Alexis Bohed',
  age: 35
}
{
  _id: ObjectId('6755782e1bf91131ca831153'),
  name: 'Melanie Palace',
  age: 27
}
{
  _id: ObjectId('6755782e1bf91131ca831154'),
  name: 'Armin Glutch',
  age: 35
}
{
  _id: ObjectId('6755782e1bf91131ca831155'),
  name: 'Klaus Arber',
  age: 53
}
{
  _id: ObjectId('6755782e1bf91131ca831156'),
  name: 'Albert Twostone',
  age: 68
}
{
  _id: ObjectId('6755782e1bf91131ca831157'),
  name: 'Gordon Black',
  age: 38
}

Flights> 

Flights> db.passengers.findOne()
{
  _id: ObjectId('6755782e1bf91131ca831143'),
  name: 'Max Schwarzmueller',
  age: 29
}
Flights> db.passengers.findOne().pretty()
TypeError: db.passengers.findOne().pretty is not a function
Flights> db.passengers.find()
[
  {
    _id: ObjectId('6755782e1bf91131ca831143'),
    name: 'Max Schwarzmueller',
    age: 29
  },
  {
    _id: ObjectId('6755782e1bf91131ca831144'),
    name: 'Manu Lorenz',
    age: 30
  },
  {
    _id: ObjectId('6755782e1bf91131ca831145'),
    name: 'Chris Hayton',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831146'),
    name: 'Sandeep Kumar',
    age: 28
  },
  {
    _id: ObjectId('6755782e1bf91131ca831147'),
    name: 'Maria Jones',
    age: 30
  },
  {
    _id: ObjectId('6755782e1bf91131ca831148'),
    name: 'Alexandra Maier',
    age: 27
  },
  {
    _id: ObjectId('6755782e1bf91131ca831149'),
    name: 'Dr. Phil Evans',
    age: 47
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114a'),
    name: 'Sandra Brugge',
    age: 33
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114b'),
    name: 'Elisabeth Mayr',
    age: 29
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114c'),
    name: 'Frank Cube',
    age: 41
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114d'),
    name: 'Karandeep Alun',
    age: 48
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114e'),
    name: 'Michaela Drayer',
    age: 39
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114f'),
    name: 'Bernd Hoftstadt',
    age: 22
  },
  {
    _id: ObjectId('6755782e1bf91131ca831150'),
    name: 'Scott Tolib',
    age: 44
  },
  {
    _id: ObjectId('6755782e1bf91131ca831151'),
    name: 'Freddy Melver',
    age: 41
  },
  {
    _id: ObjectId('6755782e1bf91131ca831152'),
    name: 'Alexis Bohed',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831153'),
    name: 'Melanie Palace',
    age: 27
  },
  {
    _id: ObjectId('6755782e1bf91131ca831154'),
    name: 'Armin Glutch',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831155'),
    name: 'Klaus Arber',
    age: 53
  },
  {
    _id: ObjectId('6755782e1bf91131ca831156'),
    name: 'Albert Twostone',
    age: 68
  }
]
Type "it" for more
Flights> it 
[
  {
    _id: ObjectId('6755782e1bf91131ca831157'),
    name: 'Gordon Black',
    age: 38
  }
]
Flights> db.passengers.find().toArray()
[
  {
    _id: ObjectId('6755782e1bf91131ca831143'),
    name: 'Max Schwarzmueller',
    age: 29
  },
  {
    _id: ObjectId('6755782e1bf91131ca831144'),
    name: 'Manu Lorenz',
    age: 30
  },
  {
    _id: ObjectId('6755782e1bf91131ca831145'),
    name: 'Chris Hayton',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831146'),
    name: 'Sandeep Kumar',
    age: 28
  },
  {
    _id: ObjectId('6755782e1bf91131ca831147'),
    name: 'Maria Jones',
    age: 30
  },
  {
    _id: ObjectId('6755782e1bf91131ca831148'),
    name: 'Alexandra Maier',
    age: 27
  },
  {
    _id: ObjectId('6755782e1bf91131ca831149'),
    name: 'Dr. Phil Evans',
    age: 47
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114a'),
    name: 'Sandra Brugge',
    age: 33
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114b'),
    name: 'Elisabeth Mayr',
    age: 29
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114c'),
    name: 'Frank Cube',
    age: 41
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114d'),
    name: 'Karandeep Alun',
    age: 48
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114e'),
    name: 'Michaela Drayer',
    age: 39
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114f'),
    name: 'Bernd Hoftstadt',
    age: 22
  },
  {
    _id: ObjectId('6755782e1bf91131ca831150'),
    name: 'Scott Tolib',
    age: 44
  },
  {
    _id: ObjectId('6755782e1bf91131ca831151'),
    name: 'Freddy Melver',
    age: 41
  },
  {
    _id: ObjectId('6755782e1bf91131ca831152'),
    name: 'Alexis Bohed',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831153'),
    name: 'Melanie Palace',
    age: 27
  },
  {
    _id: ObjectId('6755782e1bf91131ca831154'),
    name: 'Armin Glutch',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831155'),
    name: 'Klaus Arber',
    age: 53
  },
  {
    _id: ObjectId('6755782e1bf91131ca831156'),
    name: 'Albert Twostone',
    age: 68
  },
  {
    _id: ObjectId('6755782e1bf91131ca831157'),
    name: 'Gordon Black',
    age: 38
  }
]
Flights> show collections;
flightdata
flightData
passengers
Flights> db.passengers.find({},{name:1})
[
  {
    _id: ObjectId('6755782e1bf91131ca831143'),
    name: 'Max Schwarzmueller'
  },
  { _id: ObjectId('6755782e1bf91131ca831144'), name: 'Manu Lorenz' },
  { _id: ObjectId('6755782e1bf91131ca831145'), name: 'Chris Hayton' },
  { _id: ObjectId('6755782e1bf91131ca831146'), name: 'Sandeep Kumar' },
  { _id: ObjectId('6755782e1bf91131ca831147'), name: 'Maria Jones' },
  {
    _id: ObjectId('6755782e1bf91131ca831148'),
    name: 'Alexandra Maier'
  },
  { _id: ObjectId('6755782e1bf91131ca831149'), name: 'Dr. Phil Evans' },
  { _id: ObjectId('6755782e1bf91131ca83114a'), name: 'Sandra Brugge' },
  { _id: ObjectId('6755782e1bf91131ca83114b'), name: 'Elisabeth Mayr' },
  { _id: ObjectId('6755782e1bf91131ca83114c'), name: 'Frank Cube' },
  { _id: ObjectId('6755782e1bf91131ca83114d'), name: 'Karandeep Alun' },
  {
    _id: ObjectId('6755782e1bf91131ca83114e'),
    name: 'Michaela Drayer'
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114f'),
    name: 'Bernd Hoftstadt'
  },
  { _id: ObjectId('6755782e1bf91131ca831150'), name: 'Scott Tolib' },
  { _id: ObjectId('6755782e1bf91131ca831151'), name: 'Freddy Melver' },
  { _id: ObjectId('6755782e1bf91131ca831152'), name: 'Alexis Bohed' },
  { _id: ObjectId('6755782e1bf91131ca831153'), name: 'Melanie Palace' },
  { _id: ObjectId('6755782e1bf91131ca831154'), name: 'Armin Glutch' },
  { _id: ObjectId('6755782e1bf91131ca831155'), name: 'Klaus Arber' },
  {
    _id: ObjectId('6755782e1bf91131ca831156'),
    name: 'Albert Twostone'
  }
]
Type "it" for more
Flights> db.passengers.find({},{name:1,_id:0})
[
  { name: 'Max Schwarzmueller' },
  { name: 'Manu Lorenz' },
  { name: 'Chris Hayton' },
  { name: 'Sandeep Kumar' },
  { name: 'Maria Jones' },
  { name: 'Alexandra Maier' },
  { name: 'Dr. Phil Evans' },
  { name: 'Sandra Brugge' },
  { name: 'Elisabeth Mayr' },
  { name: 'Frank Cube' },
  { name: 'Karandeep Alun' },
  { name: 'Michaela Drayer' },
  { name: 'Bernd Hoftstadt' },
  { name: 'Scott Tolib' },
  { name: 'Freddy Melver' },
  { name: 'Alexis Bohed' },
  { name: 'Melanie Palace' },
  { name: 'Armin Glutch' },
  { name: 'Klaus Arber' },
  { name: 'Albert Twostone' }
]
Type "it" for more
Flights> db.passengers.find({},{name:1,age:1})
[
  {
    _id: ObjectId('6755782e1bf91131ca831143'),
    name: 'Max Schwarzmueller',
    age: 29
  },
  {
    _id: ObjectId('6755782e1bf91131ca831144'),
    name: 'Manu Lorenz',
    age: 30
  },
  {
    _id: ObjectId('6755782e1bf91131ca831145'),
    name: 'Chris Hayton',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831146'),
    name: 'Sandeep Kumar',
    age: 28
  },
  {
    _id: ObjectId('6755782e1bf91131ca831147'),
    name: 'Maria Jones',
    age: 30
  },
  {
    _id: ObjectId('6755782e1bf91131ca831148'),
    name: 'Alexandra Maier',
    age: 27
  },
  {
    _id: ObjectId('6755782e1bf91131ca831149'),
    name: 'Dr. Phil Evans',
    age: 47
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114a'),
    name: 'Sandra Brugge',
    age: 33
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114b'),
    name: 'Elisabeth Mayr',
    age: 29
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114c'),
    name: 'Frank Cube',
    age: 41
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114d'),
    name: 'Karandeep Alun',
    age: 48
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114e'),
    name: 'Michaela Drayer',
    age: 39
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114f'),
    name: 'Bernd Hoftstadt',
    age: 22
  },
  {
    _id: ObjectId('6755782e1bf91131ca831150'),
    name: 'Scott Tolib',
    age: 44
  },
  {
    _id: ObjectId('6755782e1bf91131ca831151'),
    name: 'Freddy Melver',
    age: 41
  },
  {
    _id: ObjectId('6755782e1bf91131ca831152'),
    name: 'Alexis Bohed',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831153'),
    name: 'Melanie Palace',
    age: 27
  },
  {
    _id: ObjectId('6755782e1bf91131ca831154'),
    name: 'Armin Glutch',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831155'),
    name: 'Klaus Arber',
    age: 53
  },
  {
    _id: ObjectId('6755782e1bf91131ca831156'),
    name: 'Albert Twostone',
    age: 68
  }
]
Type "it" for more
Flights> db.passengers.find({},{name:1,age:1,_id:0})
[
  { name: 'Max Schwarzmueller', age: 29 },
  { name: 'Manu Lorenz', age: 30 },
  { name: 'Chris Hayton', age: 35 },
  { name: 'Sandeep Kumar', age: 28 },
  { name: 'Maria Jones', age: 30 },
  { name: 'Alexandra Maier', age: 27 },
  { name: 'Dr. Phil Evans', age: 47 },
  { name: 'Sandra Brugge', age: 33 },
  { name: 'Elisabeth Mayr', age: 29 },
  { name: 'Frank Cube', age: 41 },
  { name: 'Karandeep Alun', age: 48 },
  { name: 'Michaela Drayer', age: 39 },
  { name: 'Bernd Hoftstadt', age: 22 },
  { name: 'Scott Tolib', age: 44 },
  { name: 'Freddy Melver', age: 41 },
  { name: 'Alexis Bohed', age: 35 },
  { name: 'Melanie Palace', age: 27 },
  { name: 'Armin Glutch', age: 35 },
  { name: 'Klaus Arber', age: 53 },
  { name: 'Albert Twostone', age: 68 }
]
Type "it" for more
Flights> it
[ { name: 'Gordon Black', age: 38 } ]
Flights> show collections;
flightdata
flightData
passengers
Flights> db.passengers.find()
[
  {
    _id: ObjectId('6755782e1bf91131ca831143'),
    name: 'Max Schwarzmueller',
    age: 29
  },
  {
    _id: ObjectId('6755782e1bf91131ca831144'),
    name: 'Manu Lorenz',
    age: 30
  },
  {
    _id: ObjectId('6755782e1bf91131ca831145'),
    name: 'Chris Hayton',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831146'),
    name: 'Sandeep Kumar',
    age: 28
  },
  {
    _id: ObjectId('6755782e1bf91131ca831147'),
    name: 'Maria Jones',
    age: 30
  },
  {
    _id: ObjectId('6755782e1bf91131ca831148'),
    name: 'Alexandra Maier',
    age: 27
  },
  {
    _id: ObjectId('6755782e1bf91131ca831149'),
    name: 'Dr. Phil Evans',
    age: 47
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114a'),
    name: 'Sandra Brugge',
    age: 33
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114b'),
    name: 'Elisabeth Mayr',
    age: 29
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114c'),
    name: 'Frank Cube',
    age: 41
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114d'),
    name: 'Karandeep Alun',
    age: 48
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114e'),
    name: 'Michaela Drayer',
    age: 39
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114f'),
    name: 'Bernd Hoftstadt',
    age: 22
  },
  {
    _id: ObjectId('6755782e1bf91131ca831150'),
    name: 'Scott Tolib',
    age: 44
  },
  {
    _id: ObjectId('6755782e1bf91131ca831151'),
    name: 'Freddy Melver',
    age: 41
  },
  {
    _id: ObjectId('6755782e1bf91131ca831152'),
    name: 'Alexis Bohed',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831153'),
    name: 'Melanie Palace',
    age: 27
  },
  {
    _id: ObjectId('6755782e1bf91131ca831154'),
    name: 'Armin Glutch',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831155'),
    name: 'Klaus Arber',
    age: 53
  },
  {
    _id: ObjectId('6755782e1bf91131ca831156'),
    name: 'Albert Twostone',
    age: 68
  }
]
Type "it" for more
Flights> it
[
  {
    _id: ObjectId('6755782e1bf91131ca831157'),
    name: 'Gordon Black',
    age: 38
  }
]
Flights> show ds=bs;
MongoshInvalidInputError: [COMMON-10001] 'ds=bs' is not a valid argument for "show".
Flights> show dbs;
Abhishek   72.00 KiB
Flights   136.00 KiB
Products   72.00 KiB
School     40.00 KiB
admin      40.00 KiB
config     60.00 KiB
local     256.00 KiB
shop       72.00 KiB
Flights> use flights;
switched to db flights
flights> use Flights;
switched to db Flights
Flights> show collections;
flightdata
flightData
passengers
Flights> db.passengers.find().toArray()
[
  {
    _id: ObjectId('6755782e1bf91131ca831143'),
    name: 'Max Schwarzmueller',
    age: 29
  },
  {
    _id: ObjectId('6755782e1bf91131ca831144'),
    name: 'Manu Lorenz',
    age: 30
  },
  {
    _id: ObjectId('6755782e1bf91131ca831145'),
    name: 'Chris Hayton',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831146'),
    name: 'Sandeep Kumar',
    age: 28
  },
  {
    _id: ObjectId('6755782e1bf91131ca831147'),
    name: 'Maria Jones',
    age: 30
  },
  {
    _id: ObjectId('6755782e1bf91131ca831148'),
    name: 'Alexandra Maier',
    age: 27
  },
  {
    _id: ObjectId('6755782e1bf91131ca831149'),
    name: 'Dr. Phil Evans',
    age: 47
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114a'),
    name: 'Sandra Brugge',
    age: 33
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114b'),
    name: 'Elisabeth Mayr',
    age: 29
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114c'),
    name: 'Frank Cube',
    age: 41
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114d'),
    name: 'Karandeep Alun',
    age: 48
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114e'),
    name: 'Michaela Drayer',
    age: 39
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114f'),
    name: 'Bernd Hoftstadt',
    age: 22
  },
  {
    _id: ObjectId('6755782e1bf91131ca831150'),
    name: 'Scott Tolib',
    age: 44
  },
  {
    _id: ObjectId('6755782e1bf91131ca831151'),
    name: 'Freddy Melver',
    age: 41
  },
  {
    _id: ObjectId('6755782e1bf91131ca831152'),
    name: 'Alexis Bohed',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831153'),
    name: 'Melanie Palace',
    age: 27
  },
  {
    _id: ObjectId('6755782e1bf91131ca831154'),
    name: 'Armin Glutch',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831155'),
    name: 'Klaus Arber',
    age: 53
  },
  {
    _id: ObjectId('6755782e1bf91131ca831156'),
    name: 'Albert Twostone',
    age: 68
  },
  {
    _id: ObjectId('6755782e1bf91131ca831157'),
    name: 'Gordon Black',
    age: 38
  }
]
Flights> db.passengers.find().forEach((passengerData) =>{printjson(passengerData)})
{
  _id: ObjectId('6755782e1bf91131ca831143'),
  name: 'Max Schwarzmueller',
  age: 29
}
{
  _id: ObjectId('6755782e1bf91131ca831144'),
  name: 'Manu Lorenz',
  age: 30
}
{
  _id: ObjectId('6755782e1bf91131ca831145'),
  name: 'Chris Hayton',
  age: 35
}
{
  _id: ObjectId('6755782e1bf91131ca831146'),
  name: 'Sandeep Kumar',
  age: 28
}
{
  _id: ObjectId('6755782e1bf91131ca831147'),
  name: 'Maria Jones',
  age: 30
}
{
  _id: ObjectId('6755782e1bf91131ca831148'),
  name: 'Alexandra Maier',
  age: 27
}
{
  _id: ObjectId('6755782e1bf91131ca831149'),
  name: 'Dr. Phil Evans',
  age: 47
}
{
  _id: ObjectId('6755782e1bf91131ca83114a'),
  name: 'Sandra Brugge',
  age: 33
}
{
  _id: ObjectId('6755782e1bf91131ca83114b'),
  name: 'Elisabeth Mayr',
  age: 29
}
{
  _id: ObjectId('6755782e1bf91131ca83114c'),
  name: 'Frank Cube',
  age: 41
}
{
  _id: ObjectId('6755782e1bf91131ca83114d'),
  name: 'Karandeep Alun',
  age: 48
}
{
  _id: ObjectId('6755782e1bf91131ca83114e'),
  name: 'Michaela Drayer',
  age: 39
}
{
  _id: ObjectId('6755782e1bf91131ca83114f'),
  name: 'Bernd Hoftstadt',
  age: 22
}
{
  _id: ObjectId('6755782e1bf91131ca831150'),
  name: 'Scott Tolib',
  age: 44
}
{
  _id: ObjectId('6755782e1bf91131ca831151'),
  name: 'Freddy Melver',
  age: 41
}
{
  _id: ObjectId('6755782e1bf91131ca831152'),
  name: 'Alexis Bohed',
  age: 35
}
{
  _id: ObjectId('6755782e1bf91131ca831153'),
  name: 'Melanie Palace',
  age: 27
}
{
  _id: ObjectId('6755782e1bf91131ca831154'),
  name: 'Armin Glutch',
  age: 35
}
{
  _id: ObjectId('6755782e1bf91131ca831155'),
  name: 'Klaus Arber',
  age: 53
}
{
  _id: ObjectId('6755782e1bf91131ca831156'),
  name: 'Albert Twostone',
  age: 68
}
{
  _id: ObjectId('6755782e1bf91131ca831157'),
  name: 'Gordon Black',
  age: 38
}

Flights> -- Only select name from the records
Uncaught:
SyntaxError: Missing semicolon. (1:7)

> 1 | -- Only select name from the records
    |        ^
  2 |

Flights> - Only select name from the records
Uncaught:
SyntaxError: Missing semicolon. (1:6)

> 1 | - Only select name from the records
    |       ^
  2 |

Flights> $comment: "Only select name from the records
Uncaught:
SyntaxError: Unterminated string constant. (1:10)

> 1 | $comment: "Only select name from the records
    |           ^
  2 |

Flights> $comment: "Only select name from the records"
Only select name from the records
Flights> "Ony select the name from the records"
Ony select the name from the records
Flights> show collections;
flightdata
flightData
passengers
Flights> db.passengers.find().toArray() 
[
  {
    _id: ObjectId('6755782e1bf91131ca831143'),
    name: 'Max Schwarzmueller',
    age: 29
  },
  {
    _id: ObjectId('6755782e1bf91131ca831144'),
    name: 'Manu Lorenz',
    age: 30
  },
  {
    _id: ObjectId('6755782e1bf91131ca831145'),
    name: 'Chris Hayton',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831146'),
    name: 'Sandeep Kumar',
    age: 28
  },
  {
    _id: ObjectId('6755782e1bf91131ca831147'),
    name: 'Maria Jones',
    age: 30
  },
  {
    _id: ObjectId('6755782e1bf91131ca831148'),
    name: 'Alexandra Maier',
    age: 27
  },
  {
    _id: ObjectId('6755782e1bf91131ca831149'),
    name: 'Dr. Phil Evans',
    age: 47
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114a'),
    name: 'Sandra Brugge',
    age: 33
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114b'),
    name: 'Elisabeth Mayr',
    age: 29
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114c'),
    name: 'Frank Cube',
    age: 41
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114d'),
    name: 'Karandeep Alun',
    age: 48
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114e'),
    name: 'Michaela Drayer',
    age: 39
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114f'),
    name: 'Bernd Hoftstadt',
    age: 22
  },
  {
    _id: ObjectId('6755782e1bf91131ca831150'),
    name: 'Scott Tolib',
    age: 44
  },
  {
    _id: ObjectId('6755782e1bf91131ca831151'),
    name: 'Freddy Melver',
    age: 41
  },
  {
    _id: ObjectId('6755782e1bf91131ca831152'),
    name: 'Alexis Bohed',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831153'),
    name: 'Melanie Palace',
    age: 27
  },
  {
    _id: ObjectId('6755782e1bf91131ca831154'),
    name: 'Armin Glutch',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831155'),
    name: 'Klaus Arber',
    age: 53
  },
  {
    _id: ObjectId('6755782e1bf91131ca831156'),
    name: 'Albert Twostone',
    age: 68
  },
  {
    _id: ObjectId('6755782e1bf91131ca831157'),
    name: 'Gordon Black',
    age: 38
  }
]
Flights> db.passengers.find({name:1,age:0})

Flights> db.passengers.find({},{name:1})
[
  {
    _id: ObjectId('6755782e1bf91131ca831143'),
    name: 'Max Schwarzmueller'
  },
  { _id: ObjectId('6755782e1bf91131ca831144'), name: 'Manu Lorenz' },
  { _id: ObjectId('6755782e1bf91131ca831145'), name: 'Chris Hayton' },
  { _id: ObjectId('6755782e1bf91131ca831146'), name: 'Sandeep Kumar' },
  { _id: ObjectId('6755782e1bf91131ca831147'), name: 'Maria Jones' },
  {
    _id: ObjectId('6755782e1bf91131ca831148'),
    name: 'Alexandra Maier'
  },
  { _id: ObjectId('6755782e1bf91131ca831149'), name: 'Dr. Phil Evans' },
  { _id: ObjectId('6755782e1bf91131ca83114a'), name: 'Sandra Brugge' },
  { _id: ObjectId('6755782e1bf91131ca83114b'), name: 'Elisabeth Mayr' },
  { _id: ObjectId('6755782e1bf91131ca83114c'), name: 'Frank Cube' },
  { _id: ObjectId('6755782e1bf91131ca83114d'), name: 'Karandeep Alun' },
  {
    _id: ObjectId('6755782e1bf91131ca83114e'),
    name: 'Michaela Drayer'
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114f'),
    name: 'Bernd Hoftstadt'
  },
  { _id: ObjectId('6755782e1bf91131ca831150'), name: 'Scott Tolib' },
  { _id: ObjectId('6755782e1bf91131ca831151'), name: 'Freddy Melver' },
  { _id: ObjectId('6755782e1bf91131ca831152'), name: 'Alexis Bohed' },
  { _id: ObjectId('6755782e1bf91131ca831153'), name: 'Melanie Palace' },
  { _id: ObjectId('6755782e1bf91131ca831154'), name: 'Armin Glutch' },
  { _id: ObjectId('6755782e1bf91131ca831155'), name: 'Klaus Arber' },
  {
    _id: ObjectId('6755782e1bf91131ca831156'),
    name: 'Albert Twostone'
  }
]
Type "it" for more
Flights> db.passengers.find({},{name:1,age:1,_id:0})
[
  { name: 'Max Schwarzmueller', age: 29 },
  { name: 'Manu Lorenz', age: 30 },
  { name: 'Chris Hayton', age: 35 },
  { name: 'Sandeep Kumar', age: 28 },
  { name: 'Maria Jones', age: 30 },
  { name: 'Alexandra Maier', age: 27 },
  { name: 'Dr. Phil Evans', age: 47 },
  { name: 'Sandra Brugge', age: 33 },
  { name: 'Elisabeth Mayr', age: 29 },
  { name: 'Frank Cube', age: 41 },
  { name: 'Karandeep Alun', age: 48 },
  { name: 'Michaela Drayer', age: 39 },
  { name: 'Bernd Hoftstadt', age: 22 },
  { name: 'Scott Tolib', age: 44 },
  { name: 'Freddy Melver', age: 41 },
  { name: 'Alexis Bohed', age: 35 },
  { name: 'Melanie Palace', age: 27 },
  { name: 'Armin Glutch', age: 35 },
  { name: 'Klaus Arber', age: 53 },
  { name: 'Albert Twostone', age: 68 }
]
Type "it" for more
Flights> it 
[ { name: 'Gordon Black', age: 38 } ]
Flights> show collections;
flightdata
flightData
passengers
Flights> show collections;
flightdata
flightData
passengers
Flights> db.passengers.find()
[
  {
    _id: ObjectId('6755782e1bf91131ca831143'),
    name: 'Max Schwarzmueller',
    age: 29
  },
  {
    _id: ObjectId('6755782e1bf91131ca831144'),
    name: 'Manu Lorenz',
    age: 30
  },
  {
    _id: ObjectId('6755782e1bf91131ca831145'),
    name: 'Chris Hayton',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831146'),
    name: 'Sandeep Kumar',
    age: 28
  },
  {
    _id: ObjectId('6755782e1bf91131ca831147'),
    name: 'Maria Jones',
    age: 30
  },
  {
    _id: ObjectId('6755782e1bf91131ca831148'),
    name: 'Alexandra Maier',
    age: 27
  },
  {
    _id: ObjectId('6755782e1bf91131ca831149'),
    name: 'Dr. Phil Evans',
    age: 47
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114a'),
    name: 'Sandra Brugge',
    age: 33
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114b'),
    name: 'Elisabeth Mayr',
    age: 29
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114c'),
    name: 'Frank Cube',
    age: 41
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114d'),
    name: 'Karandeep Alun',
    age: 48
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114e'),
    name: 'Michaela Drayer',
    age: 39
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114f'),
    name: 'Bernd Hoftstadt',
    age: 22
  },
  {
    _id: ObjectId('6755782e1bf91131ca831150'),
    name: 'Scott Tolib',
    age: 44
  },
  {
    _id: ObjectId('6755782e1bf91131ca831151'),
    name: 'Freddy Melver',
    age: 41
  },
  {
    _id: ObjectId('6755782e1bf91131ca831152'),
    name: 'Alexis Bohed',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831153'),
    name: 'Melanie Palace',
    age: 27
  },
  {
    _id: ObjectId('6755782e1bf91131ca831154'),
    name: 'Armin Glutch',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831155'),
    name: 'Klaus Arber',
    age: 53
  },
  {
    _id: ObjectId('6755782e1bf91131ca831156'),
    name: 'Albert Twostone',
    age: 68
  }
]
Type "it" for more
Flights> it
[
  {
    _id: ObjectId('6755782e1bf91131ca831157'),
    name: 'Gordon Black',
    age: 38
  }
]
Flights> show dbs;
Abhishek   72.00 KiB
Flights   136.00 KiB
Products   72.00 KiB
School     40.00 KiB
admin      40.00 KiB
config    108.00 KiB
local     256.00 KiB
shop       72.00 KiB
Flights> use Flights;
already on db Flights
Flights> show collections;
flightdata
flightData
passengers
Flights> db.passengers.find();
[
  {
    _id: ObjectId('6755782e1bf91131ca831143'),
    name: 'Max Schwarzmueller',
    age: 29
  },
  {
    _id: ObjectId('6755782e1bf91131ca831144'),
    name: 'Manu Lorenz',
    age: 30
  },
  {
    _id: ObjectId('6755782e1bf91131ca831145'),
    name: 'Chris Hayton',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831146'),
    name: 'Sandeep Kumar',
    age: 28
  },
  {
    _id: ObjectId('6755782e1bf91131ca831147'),
    name: 'Maria Jones',
    age: 30
  },
  {
    _id: ObjectId('6755782e1bf91131ca831148'),
    name: 'Alexandra Maier',
    age: 27
  },
  {
    _id: ObjectId('6755782e1bf91131ca831149'),
    name: 'Dr. Phil Evans',
    age: 47
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114a'),
    name: 'Sandra Brugge',
    age: 33
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114b'),
    name: 'Elisabeth Mayr',
    age: 29
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114c'),
    name: 'Frank Cube',
    age: 41
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114d'),
    name: 'Karandeep Alun',
    age: 48
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114e'),
    name: 'Michaela Drayer',
    age: 39
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114f'),
    name: 'Bernd Hoftstadt',
    age: 22
  },
  {
    _id: ObjectId('6755782e1bf91131ca831150'),
    name: 'Scott Tolib',
    age: 44
  },
  {
    _id: ObjectId('6755782e1bf91131ca831151'),
    name: 'Freddy Melver',
    age: 41
  },
  {
    _id: ObjectId('6755782e1bf91131ca831152'),
    name: 'Alexis Bohed',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831153'),
    name: 'Melanie Palace',
    age: 27
  },
  {
    _id: ObjectId('6755782e1bf91131ca831154'),
    name: 'Armin Glutch',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831155'),
    name: 'Klaus Arber',
    age: 53
  },
  {
    _id: ObjectId('6755782e1bf91131ca831156'),
    name: 'Albert Twostone',
    age: 68
  }
]
Type "it" for more
Flights> it
[
  {
    _id: ObjectId('6755782e1bf91131ca831157'),
    name: 'Gordon Black',
    age: 38
  }
]
Flights> show collections;
flightdata
flightData
passengers
Flights> db.poassengers;'
Uncaught:
SyntaxError: Unterminated string constant. (1:15)

> 1 | db.poassengers;'
    |                ^
  2 |

Flights> db.passengers.find()
[
  {
    _id: ObjectId('6755782e1bf91131ca831143'),
    name: 'Max Schwarzmueller',
    age: 29
  },
  {
    _id: ObjectId('6755782e1bf91131ca831144'),
    name: 'Manu Lorenz',
    age: 30
  },
  {
    _id: ObjectId('6755782e1bf91131ca831145'),
    name: 'Chris Hayton',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831146'),
    name: 'Sandeep Kumar',
    age: 28
  },
  {
    _id: ObjectId('6755782e1bf91131ca831147'),
    name: 'Maria Jones',
    age: 30
  },
  {
    _id: ObjectId('6755782e1bf91131ca831148'),
    name: 'Alexandra Maier',
    age: 27
  },
  {
    _id: ObjectId('6755782e1bf91131ca831149'),
    name: 'Dr. Phil Evans',
    age: 47
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114a'),
    name: 'Sandra Brugge',
    age: 33
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114b'),
    name: 'Elisabeth Mayr',
    age: 29
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114c'),
    name: 'Frank Cube',
    age: 41
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114d'),
    name: 'Karandeep Alun',
    age: 48
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114e'),
    name: 'Michaela Drayer',
    age: 39
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114f'),
    name: 'Bernd Hoftstadt',
    age: 22
  },
  {
    _id: ObjectId('6755782e1bf91131ca831150'),
    name: 'Scott Tolib',
    age: 44
  },
  {
    _id: ObjectId('6755782e1bf91131ca831151'),
    name: 'Freddy Melver',
    age: 41
  },
  {
    _id: ObjectId('6755782e1bf91131ca831152'),
    name: 'Alexis Bohed',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831153'),
    name: 'Melanie Palace',
    age: 27
  },
  {
    _id: ObjectId('6755782e1bf91131ca831154'),
    name: 'Armin Glutch',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831155'),
    name: 'Klaus Arber',
    age: 53
  },
  {
    _id: ObjectId('6755782e1bf91131ca831156'),
    name: 'Albert Twostone',
    age: 68
  }
]
Type "it" for more
Flights> it 
[
  {
    _id: ObjectId('6755782e1bf91131ca831157'),
    name: 'Gordon Black',
    age: 38
  }
]
Flights> show schemas;
MongoshInvalidInputError: [COMMON-10001] 'schemas' is not a valid argument for "show".
Flights> show databases;
Abhishek   72.00 KiB
Flights   136.00 KiB
Products   72.00 KiB
School     40.00 KiB
admin      40.00 KiB
config    108.00 KiB
local     256.00 KiB
shop       72.00 KiB
Flights> show collections;
flightdata
flightData
passengers
Flights> db.passengers.find({},{name:1,_id:0})
[
  { name: 'Max Schwarzmueller' },
  { name: 'Manu Lorenz' },
  { name: 'Chris Hayton' },
  { name: 'Sandeep Kumar' },
  { name: 'Maria Jones' },
  { name: 'Alexandra Maier' },
  { name: 'Dr. Phil Evans' },
  { name: 'Sandra Brugge' },
  { name: 'Elisabeth Mayr' },
  { name: 'Frank Cube' },
  { name: 'Karandeep Alun' },
  { name: 'Michaela Drayer' },
  { name: 'Bernd Hoftstadt' },
  { name: 'Scott Tolib' },
  { name: 'Freddy Melver' },
  { name: 'Alexis Bohed' },
  { name: 'Melanie Palace' },
  { name: 'Armin Glutch' },
  { name: 'Klaus Arber' },
  { name: 'Albert Twostone' }
]
Type "it" for more
Flights> it 
[ { name: 'Gordon Black' } ]
Flights> db.passengers.find({},{name:1,_id:0,age:1})
[
  { name: 'Max Schwarzmueller', age: 29 },
  { name: 'Manu Lorenz', age: 30 },
  { name: 'Chris Hayton', age: 35 },
  { name: 'Sandeep Kumar', age: 28 },
  { name: 'Maria Jones', age: 30 },
  { name: 'Alexandra Maier', age: 27 },
  { name: 'Dr. Phil Evans', age: 47 },
  { name: 'Sandra Brugge', age: 33 },
  { name: 'Elisabeth Mayr', age: 29 },
  { name: 'Frank Cube', age: 41 },
  { name: 'Karandeep Alun', age: 48 },
  { name: 'Michaela Drayer', age: 39 },
  { name: 'Bernd Hoftstadt', age: 22 },
  { name: 'Scott Tolib', age: 44 },
  { name: 'Freddy Melver', age: 41 },
  { name: 'Alexis Bohed', age: 35 },
  { name: 'Melanie Palace', age: 27 },
  { name: 'Armin Glutch', age: 35 },
  { name: 'Klaus Arber', age: 53 },
  { name: 'Albert Twostone', age: 68 }
]
Type "it" for more
Flights> it
[ { name: 'Gordon Black', age: 38 } ]
Flights> "Projection In MongoDB"
Projection In MongoDB
Flights> show collections
flightdata
flightData
passengers
Flights> db.passengers.find()
[
  {
    _id: ObjectId('6755782e1bf91131ca831143'),
    name: 'Max Schwarzmueller',
    age: 29
  },
  {
    _id: ObjectId('6755782e1bf91131ca831144'),
    name: 'Manu Lorenz',
    age: 30
  },
  {
    _id: ObjectId('6755782e1bf91131ca831145'),
    name: 'Chris Hayton',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831146'),
    name: 'Sandeep Kumar',
    age: 28
  },
  {
    _id: ObjectId('6755782e1bf91131ca831147'),
    name: 'Maria Jones',
    age: 30
  },
  {
    _id: ObjectId('6755782e1bf91131ca831148'),
    name: 'Alexandra Maier',
    age: 27
  },
  {
    _id: ObjectId('6755782e1bf91131ca831149'),
    name: 'Dr. Phil Evans',
    age: 47
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114a'),
    name: 'Sandra Brugge',
    age: 33
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114b'),
    name: 'Elisabeth Mayr',
    age: 29
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114c'),
    name: 'Frank Cube',
    age: 41
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114d'),
    name: 'Karandeep Alun',
    age: 48
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114e'),
    name: 'Michaela Drayer',
    age: 39
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114f'),
    name: 'Bernd Hoftstadt',
    age: 22
  },
  {
    _id: ObjectId('6755782e1bf91131ca831150'),
    name: 'Scott Tolib',
    age: 44
  },
  {
    _id: ObjectId('6755782e1bf91131ca831151'),
    name: 'Freddy Melver',
    age: 41
  },
  {
    _id: ObjectId('6755782e1bf91131ca831152'),
    name: 'Alexis Bohed',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831153'),
    name: 'Melanie Palace',
    age: 27
  },
  {
    _id: ObjectId('6755782e1bf91131ca831154'),
    name: 'Armin Glutch',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831155'),
    name: 'Klaus Arber',
    age: 53
  },
  {
    _id: ObjectId('6755782e1bf91131ca831156'),
    name: 'Albert Twostone',
    age: 68
  }
]
Type "it" for more
Flights> it 
[
  {
    _id: ObjectId('6755782e1bf91131ca831157'),
    name: 'Gordon Black',
    age: 38
  }
]
Flights> db.passengers.find({},{name:1,age:1,_id:0})
[
  { name: 'Max Schwarzmueller', age: 29 },
  { name: 'Manu Lorenz', age: 30 },
  { name: 'Chris Hayton', age: 35 },
  { name: 'Sandeep Kumar', age: 28 },
  { name: 'Maria Jones', age: 30 },
  { name: 'Alexandra Maier', age: 27 },
  { name: 'Dr. Phil Evans', age: 47 },
  { name: 'Sandra Brugge', age: 33 },
  { name: 'Elisabeth Mayr', age: 29 },
  { name: 'Frank Cube', age: 41 },
  { name: 'Karandeep Alun', age: 48 },
  { name: 'Michaela Drayer', age: 39 },
  { name: 'Bernd Hoftstadt', age: 22 },
  { name: 'Scott Tolib', age: 44 },
  { name: 'Freddy Melver', age: 41 },
  { name: 'Alexis Bohed', age: 35 },
  { name: 'Melanie Palace', age: 27 },
  { name: 'Armin Glutch', age: 35 },
  { name: 'Klaus Arber', age: 53 },
  { name: 'Albert Twostone', age: 68 }
]
Type "it" for more
Flights> it 
[ { name: 'Gordon Black', age: 38 } ]
Flights> show colllections
MongoshInvalidInputError: [COMMON-10001] 'colllections' is not a valid argument for "show".
Flights> show collections
flightdata
flightData
passengers
Flights> db.flightData.find()
[
  {
    _id: ObjectId('675569c91bf91131ca83113c'),
    departureAirport: 'MUC',
    arrivalAirport: 'SFO',
    aircraft: 'Airbus A380',
    distance: 12000,
    intercontinental: true
  },
  {
    _id: ObjectId('675569c91bf91131ca83113d'),
    departureAirport: 'LHR',
    arrivalAirport: 'TXL',
    aircraft: 'Airbus A320',
    distance: 950,
    intercontinental: false
  }
]
Flights> db.flightData.upadateMany({},{status:{description:"On-Time",last_update:"1 hour Ago",details:{responsible:"RadhaMayaa"}}})
TypeError: db.flightData.upadateMany is not a function
Flights> db.flightData.updateMany({},{status:{description:"On-Time",last_update:"1 hour Ago",details:{responsible:"RadhaMayaa"}}})
MongoInvalidArgumentError: Update document requires atomic operators
Flights> db.flightData.updateMany({},{$set:{status:{description:"On-time",Lastupdate:"1-hour Ago",details:{responsible:"RadhaMayaa"}}}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 2,
  modifiedCount: 2,
  upsertedCount: 0
}
Flights> dv.flightData.find()
ReferenceError: dv is not defined
Flights> db.flightData.find()
[
  {
    _id: ObjectId('675569c91bf91131ca83113c'),
    departureAirport: 'MUC',
    arrivalAirport: 'SFO',
    aircraft: 'Airbus A380',
    distance: 12000,
    intercontinental: true,
    status: {
      description: 'On-time',
      Lastupdate: '1-hour Ago',
      details: { responsible: 'RadhaMayaa' }
    }
  },
  {
    _id: ObjectId('675569c91bf91131ca83113d'),
    departureAirport: 'LHR',
    arrivalAirport: 'TXL',
    aircraft: 'Airbus A320',
    distance: 950,
    intercontinental: false,
    status: {
      description: 'On-time',
      Lastupdate: '1-hour Ago',
      details: { responsible: 'RadhaMayaa' }
    }
  }
]
Flights> db.passengers.find();
[
  {
    _id: ObjectId('6755782e1bf91131ca831143'),
    name: 'Max Schwarzmueller',
    age: 29
  },
  {
    _id: ObjectId('6755782e1bf91131ca831144'),
    name: 'Manu Lorenz',
    age: 30
  },
  {
    _id: ObjectId('6755782e1bf91131ca831145'),
    name: 'Chris Hayton',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831146'),
    name: 'Sandeep Kumar',
    age: 28
  },
  {
    _id: ObjectId('6755782e1bf91131ca831147'),
    name: 'Maria Jones',
    age: 30
  },
  {
    _id: ObjectId('6755782e1bf91131ca831148'),
    name: 'Alexandra Maier',
    age: 27
  },
  {
    _id: ObjectId('6755782e1bf91131ca831149'),
    name: 'Dr. Phil Evans',
    age: 47
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114a'),
    name: 'Sandra Brugge',
    age: 33
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114b'),
    name: 'Elisabeth Mayr',
    age: 29
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114c'),
    name: 'Frank Cube',
    age: 41
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114d'),
    name: 'Karandeep Alun',
    age: 48
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114e'),
    name: 'Michaela Drayer',
    age: 39
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114f'),
    name: 'Bernd Hoftstadt',
    age: 22
  },
  {
    _id: ObjectId('6755782e1bf91131ca831150'),
    name: 'Scott Tolib',
    age: 44
  },
  {
    _id: ObjectId('6755782e1bf91131ca831151'),
    name: 'Freddy Melver',
    age: 41
  },
  {
    _id: ObjectId('6755782e1bf91131ca831152'),
    name: 'Alexis Bohed',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831153'),
    name: 'Melanie Palace',
    age: 27
  },
  {
    _id: ObjectId('6755782e1bf91131ca831154'),
    name: 'Armin Glutch',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831155'),
    name: 'Klaus Arber',
    age: 53
  },
  {
    _id: ObjectId('6755782e1bf91131ca831156'),
    name: 'Albert Twostone',
    age: 68
  }
]
Type "it" for more
Flights> db.passengers.find({},{name:1,age:1,_id:0})
[
  { name: 'Max Schwarzmueller', age: 29 },
  { name: 'Manu Lorenz', age: 30 },
  { name: 'Chris Hayton', age: 35 },
  { name: 'Sandeep Kumar', age: 28 },
  { name: 'Maria Jones', age: 30 },
  { name: 'Alexandra Maier', age: 27 },
  { name: 'Dr. Phil Evans', age: 47 },
  { name: 'Sandra Brugge', age: 33 },
  { name: 'Elisabeth Mayr', age: 29 },
  { name: 'Frank Cube', age: 41 },
  { name: 'Karandeep Alun', age: 48 },
  { name: 'Michaela Drayer', age: 39 },
  { name: 'Bernd Hoftstadt', age: 22 },
  { name: 'Scott Tolib', age: 44 },
  { name: 'Freddy Melver', age: 41 },
  { name: 'Alexis Bohed', age: 35 },
  { name: 'Melanie Palace', age: 27 },
  { name: 'Armin Glutch', age: 35 },
  { name: 'Klaus Arber', age: 53 },
  { name: 'Albert Twostone', age: 68 }
]
Type "it" for more
Flights> it 
[ { name: 'Gordon Black', age: 38 } ]
Flights> show collections
flightdata
flightData
passengers
Flights> db.passengers.updateOne({name:'Albert Twostone'},{$set:{hobbies:["Dancing","Cooking"]}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
Flights> db.passengers.find()
[
  {
    _id: ObjectId('6755782e1bf91131ca831143'),
    name: 'Max Schwarzmueller',
    age: 29
  },
  {
    _id: ObjectId('6755782e1bf91131ca831144'),
    name: 'Manu Lorenz',
    age: 30
  },
  {
    _id: ObjectId('6755782e1bf91131ca831145'),
    name: 'Chris Hayton',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831146'),
    name: 'Sandeep Kumar',
    age: 28
  },
  {
    _id: ObjectId('6755782e1bf91131ca831147'),
    name: 'Maria Jones',
    age: 30
  },
  {
    _id: ObjectId('6755782e1bf91131ca831148'),
    name: 'Alexandra Maier',
    age: 27
  },
  {
    _id: ObjectId('6755782e1bf91131ca831149'),
    name: 'Dr. Phil Evans',
    age: 47
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114a'),
    name: 'Sandra Brugge',
    age: 33
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114b'),
    name: 'Elisabeth Mayr',
    age: 29
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114c'),
    name: 'Frank Cube',
    age: 41
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114d'),
    name: 'Karandeep Alun',
    age: 48
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114e'),
    name: 'Michaela Drayer',
    age: 39
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114f'),
    name: 'Bernd Hoftstadt',
    age: 22
  },
  {
    _id: ObjectId('6755782e1bf91131ca831150'),
    name: 'Scott Tolib',
    age: 44
  },
  {
    _id: ObjectId('6755782e1bf91131ca831151'),
    name: 'Freddy Melver',
    age: 41
  },
  {
    _id: ObjectId('6755782e1bf91131ca831152'),
    name: 'Alexis Bohed',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831153'),
    name: 'Melanie Palace',
    age: 27
  },
  {
    _id: ObjectId('6755782e1bf91131ca831154'),
    name: 'Armin Glutch',
    age: 35
  },
  {
    _id: ObjectId('6755782e1bf91131ca831155'),
    name: 'Klaus Arber',
    age: 53
  },
  {
    _id: ObjectId('6755782e1bf91131ca831156'),
    name: 'Albert Twostone',
    age: 68,
    hobbies: [ 'Dancing', 'Cooking' ]
  }
]
Type "it" for more
Flights> db.passengers.updateMany({},{$set:{Hobbies:["Cricketing","Chessing","Walking"]}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 21,
  modifiedCount: 21,
  upsertedCount: 0
}
Flights> db.passengers.find()
[
  {
    _id: ObjectId('6755782e1bf91131ca831143'),
    name: 'Max Schwarzmueller',
    age: 29,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca831144'),
    name: 'Manu Lorenz',
    age: 30,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca831145'),
    name: 'Chris Hayton',
    age: 35,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca831146'),
    name: 'Sandeep Kumar',
    age: 28,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca831147'),
    name: 'Maria Jones',
    age: 30,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca831148'),
    name: 'Alexandra Maier',
    age: 27,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca831149'),
    name: 'Dr. Phil Evans',
    age: 47,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114a'),
    name: 'Sandra Brugge',
    age: 33,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114b'),
    name: 'Elisabeth Mayr',
    age: 29,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114c'),
    name: 'Frank Cube',
    age: 41,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114d'),
    name: 'Karandeep Alun',
    age: 48,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114e'),
    name: 'Michaela Drayer',
    age: 39,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114f'),
    name: 'Bernd Hoftstadt',
    age: 22,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca831150'),
    name: 'Scott Tolib',
    age: 44,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca831151'),
    name: 'Freddy Melver',
    age: 41,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca831152'),
    name: 'Alexis Bohed',
    age: 35,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca831153'),
    name: 'Melanie Palace',
    age: 27,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca831154'),
    name: 'Armin Glutch',
    age: 35,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca831155'),
    name: 'Klaus Arber',
    age: 53,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca831156'),
    name: 'Albert Twostone',
    age: 68,
    hobbies: [ 'Dancing', 'Cooking' ],
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  }
]
Type "it" for more
Flights> db.passengers.find({},{name:1,Hobbies:1,age:1})
[
  {
    _id: ObjectId('6755782e1bf91131ca831143'),
    name: 'Max Schwarzmueller',
    age: 29,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca831144'),
    name: 'Manu Lorenz',
    age: 30,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca831145'),
    name: 'Chris Hayton',
    age: 35,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca831146'),
    name: 'Sandeep Kumar',
    age: 28,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca831147'),
    name: 'Maria Jones',
    age: 30,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca831148'),
    name: 'Alexandra Maier',
    age: 27,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca831149'),
    name: 'Dr. Phil Evans',
    age: 47,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114a'),
    name: 'Sandra Brugge',
    age: 33,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114b'),
    name: 'Elisabeth Mayr',
    age: 29,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114c'),
    name: 'Frank Cube',
    age: 41,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114d'),
    name: 'Karandeep Alun',
    age: 48,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114e'),
    name: 'Michaela Drayer',
    age: 39,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114f'),
    name: 'Bernd Hoftstadt',
    age: 22,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca831150'),
    name: 'Scott Tolib',
    age: 44,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca831151'),
    name: 'Freddy Melver',
    age: 41,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca831152'),
    name: 'Alexis Bohed',
    age: 35,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca831153'),
    name: 'Melanie Palace',
    age: 27,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca831154'),
    name: 'Armin Glutch',
    age: 35,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca831155'),
    name: 'Klaus Arber',
    age: 53,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca831156'),
    name: 'Albert Twostone',
    age: 68,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  }
]
Type "it" for more
Flights> db.passengers.find({},{name:1,Hobbies:1,age:1,_id:0})
[
  {
    name: 'Max Schwarzmueller',
    age: 29,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    name: 'Manu Lorenz',
    age: 30,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    name: 'Chris Hayton',
    age: 35,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    name: 'Sandeep Kumar',
    age: 28,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    name: 'Maria Jones',
    age: 30,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    name: 'Alexandra Maier',
    age: 27,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    name: 'Dr. Phil Evans',
    age: 47,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    name: 'Sandra Brugge',
    age: 33,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    name: 'Elisabeth Mayr',
    age: 29,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    name: 'Frank Cube',
    age: 41,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    name: 'Karandeep Alun',
    age: 48,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    name: 'Michaela Drayer',
    age: 39,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    name: 'Bernd Hoftstadt',
    age: 22,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    name: 'Scott Tolib',
    age: 44,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    name: 'Freddy Melver',
    age: 41,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    name: 'Alexis Bohed',
    age: 35,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    name: 'Melanie Palace',
    age: 27,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    name: 'Armin Glutch',
    age: 35,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    name: 'Klaus Arber',
    age: 53,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    name: 'Albert Twostone',
    age: 68,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  }
]
Type "it" for more
Flights> it 
[
  {
    name: 'Gordon Black',
    age: 38,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  }
]
Flights> show collections
flightdata
flightData
passengers
Flights> db.passengers.findOne({name:"Albert Twostone"}).hobbies
[ 'Dancing', 'Cooking' ]
Flights> db.passengers.findOne({name:"Albert Twostone"})
{
  _id: ObjectId('6755782e1bf91131ca831156'),
  name: 'Albert Twostone',
  age: 68,
  hobbies: [ 'Dancing', 'Cooking' ],
  Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
}
Flights> db.passengers.find({hobbies:"Sports"})

Flights> db.passengers.find({hobbies:"Dancing"})
[
  {
    _id: ObjectId('6755782e1bf91131ca831156'),
    name: 'Albert Twostone',
    age: 68,
    hobbies: [ 'Dancing', 'Cooking' ],
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  }
]
Flights> show collections;
flightdata
flightData
passengers
Flights> db.flightData.find()
[
  {
    _id: ObjectId('675569c91bf91131ca83113c'),
    departureAirport: 'MUC',
    arrivalAirport: 'SFO',
    aircraft: 'Airbus A380',
    distance: 12000,
    intercontinental: true,
    status: {
      description: 'On-time',
      Lastupdate: '1-hour Ago',
      details: { responsible: 'RadhaMayaa' }
    }
  },
  {
    _id: ObjectId('675569c91bf91131ca83113d'),
    departureAirport: 'LHR',
    arrivalAirport: 'TXL',
    aircraft: 'Airbus A320',
    distance: 950,
    intercontinental: false,
    status: {
      description: 'On-time',
      Lastupdate: '1-hour Ago',
      details: { responsible: 'RadhaMayaa' }
    }
  }
]
Flights> db.passengers.find({"status.description":"On-time"})

Flights> db.passengers.find({"status.description":'On-time'})

Flights> db.passengers.findMany({"status.description":'On-time'})
TypeError: db.passengers.findMany is not a function
Flights> db.passengers.findMany({},{"status.description":'On-time'})
TypeError: db.passengers.findMany is not a function
Flights> show collections
flightdata
flightData
passengers
Flights> db.passengers.find()
[
  {
    _id: ObjectId('6755782e1bf91131ca831143'),
    name: 'Max Schwarzmueller',
    age: 29,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca831144'),
    name: 'Manu Lorenz',
    age: 30,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca831145'),
    name: 'Chris Hayton',
    age: 35,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca831146'),
    name: 'Sandeep Kumar',
    age: 28,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca831147'),
    name: 'Maria Jones',
    age: 30,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca831148'),
    name: 'Alexandra Maier',
    age: 27,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca831149'),
    name: 'Dr. Phil Evans',
    age: 47,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114a'),
    name: 'Sandra Brugge',
    age: 33,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114b'),
    name: 'Elisabeth Mayr',
    age: 29,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114c'),
    name: 'Frank Cube',
    age: 41,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114d'),
    name: 'Karandeep Alun',
    age: 48,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114e'),
    name: 'Michaela Drayer',
    age: 39,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca83114f'),
    name: 'Bernd Hoftstadt',
    age: 22,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca831150'),
    name: 'Scott Tolib',
    age: 44,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca831151'),
    name: 'Freddy Melver',
    age: 41,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca831152'),
    name: 'Alexis Bohed',
    age: 35,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca831153'),
    name: 'Melanie Palace',
    age: 27,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca831154'),
    name: 'Armin Glutch',
    age: 35,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca831155'),
    name: 'Klaus Arber',
    age: 53,
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  },
  {
    _id: ObjectId('6755782e1bf91131ca831156'),
    name: 'Albert Twostone',
    age: 68,
    hobbies: [ 'Dancing', 'Cooking' ],
    Hobbies: [ 'Cricketing', 'Chessing', 'Walking' ]
  }
]
Type "it" for more
Flights> show collections
flightdata
flightData
passengers
Flights> db.flightData.find()
[
  {
    _id: ObjectId('675569c91bf91131ca83113c'),
    departureAirport: 'MUC',
    arrivalAirport: 'SFO',
    aircraft: 'Airbus A380',
    distance: 12000,
    intercontinental: true,
    status: {
      description: 'On-time',
      Lastupdate: '1-hour Ago',
      details: { responsible: 'RadhaMayaa' }
    }
  },
  {
    _id: ObjectId('675569c91bf91131ca83113d'),
    departureAirport: 'LHR',
    arrivalAirport: 'TXL',
    aircraft: 'Airbus A320',
    distance: 950,
    intercontinental: false,
    status: {
      description: 'On-time',
      Lastupdate: '1-hour Ago',
      details: { responsible: 'RadhaMayaa' }
    }
  }
]
Flights> db.passengers.find({"status.description":'On-time'})

Flights> db.flightData.find({"status.description":'On-time'})
[
  {
    _id: ObjectId('675569c91bf91131ca83113c'),
    departureAirport: 'MUC',
    arrivalAirport: 'SFO',
    aircraft: 'Airbus A380',
    distance: 12000,
    intercontinental: true,
    status: {
      description: 'On-time',
      Lastupdate: '1-hour Ago',
      details: { responsible: 'RadhaMayaa' }
    }
  },
  {
    _id: ObjectId('675569c91bf91131ca83113d'),
    departureAirport: 'LHR',
    arrivalAirport: 'TXL',
    aircraft: 'Airbus A320',
    distance: 950,
    intercontinental: false,
    status: {
      description: 'On-time',
      Lastupdate: '1-hour Ago',
      details: { responsible: 'RadhaMayaa' }
    }
  }
]
Flights> db.flightData.find({"status.details.responsible":'RadhaMayaa'})
[
  {
    _id: ObjectId('675569c91bf91131ca83113c'),
    departureAirport: 'MUC',
    arrivalAirport: 'SFO',
    aircraft: 'Airbus A380',
    distance: 12000,
    intercontinental: true,
    status: {
      description: 'On-time',
      Lastupdate: '1-hour Ago',
      details: { responsible: 'RadhaMayaa' }
    }
  },
  {
    _id: ObjectId('675569c91bf91131ca83113d'),
    departureAirport: 'LHR',
    arrivalAirport: 'TXL',
    aircraft: 'Airbus A320',
    distance: 950,
    intercontinental: false,
    status: {
      description: 'On-time',
      Lastupdate: '1-hour Ago',
      details: { responsible: 'RadhaMayaa' }
    }
  }
]
Flights> db.flightData.find({"status.details.responsible":'RadhaMayaa'}).responsible

Flights> db.flightData.find({"status":'On-time'}).responsible

Flights> db.flightData.find({"status":'On-time'}).Lastupdate

Flights> db.flightData.find({"status.description":'On-time'}).Lastupdate

Flights> db.flightData.findOne({"status.description":'On-time'}).Lastupdate

Flights> show dbs;
Abhishek   72.00 KiB
Flights   164.00 KiB
Products   72.00 KiB
School     40.00 KiB
admin      40.00 KiB
config     72.00 KiB
local     256.00 KiB
shop       72.00 KiB
Flights> use patient
switched to db patient
patient> show collections

patient> db.PatientRecord.insertOne(
... {
... "firstName":"Max",
... "LastName":"Schwarzmueller",
... "age":29,
... "history":[
... {"disease":"Cold","treatment":"TakeMedicine"},
... 
... {"disease":"Fever","treatment":"TakeDoctorAppointement"}
... ]})
{
  acknowledged: true,
  insertedId: ObjectId('6756953b1bf91131ca831158')
}
patient> show collections
PatientRecord
patient> db.patientRecord.find()

patient> db.PatientRecord.find()
[
  {
    _id: ObjectId('6756953b1bf91131ca831158'),
    firstName: 'Max',
    LastName: 'Schwarzmueller',
    age: 29,
    history: [
      { disease: 'Cold', treatment: 'TakeMedicine' },
      { disease: 'Fever', treatment: 'TakeDoctorAppointement' }
    ]
  }
]
patient> db.PatientRecord.updateOne({_id: ObjectId('6756953b1bf91131ca831158')},{$set:{"firstName":"Abhishek","LastName":"RadhaMayaa","age":23,"history":{diseases:"HeadAce",treatment:"RadhaMayaa"}})
Uncaught:
SyntaxError: Unexpected token, expected "," (1:188)

> 1 | db.PatientRecord.updateOne({_id: ObjectId('6756953b1bf91131ca831158')},{$set:{"firstName":"Abhishek","LastName":"RadhaMayaa","age":23,"history":{diseases:"HeadAce",treatment:"RadhaMayaa"}})
    |                                                                                                                                                                                             ^
  2 |

patient> db.PatientRecord.updateOne({_id: ObjectId('6756953b1bf91131ca831158')},{$set:{"firstName":"Abhishek","LastName":"RadhaMayaa","age":23,"history":{diseases:"HeadAce",treatment:"RadhaMayaa"}}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
patient> show collections
PatientRecord
patient> db.PatientRecord.find()
[
  {
    _id: ObjectId('6756953b1bf91131ca831158'),
    firstName: 'Abhishek',
    LastName: 'RadhaMayaa',
    age: 23,
    history: { diseases: 'HeadAce', treatment: 'RadhaMayaa' }
  }
]
patient> db.PatientRecord.insertMany([
... {
... "firstName":"Lavish Tyagi",
... "LastName":"RadhaKrishna",
... "age":26,
... "history":[
... {"disease":"Cancer","treatment":"RadhaMayaa"}]},
... {
... "firstName":"Ajay",
... "LastName":"Dhiman"
... "age":29,
Uncaught:
SyntaxError: Unexpected token, expected "," (11:0)

   9 | "firstName":"Ajay",
  10 | "LastName":"Dhiman"
> 11 | "age":29,
     | ^
  12 |

patient> db.PatientRecord.insertMany([ { "firstName":"Lavish Tyagi", "LastName":"RadhaKrishna", "age":26, "history":[ {"disease":"Cancer","treatment":"RadhaMayaa"}]}, { "firstName":"Ajay", "LastName":"Dhiman","age":29,"history":[
... {"disease":"Alcoholic","treatment":"RadhaMayaa"}]}])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('675698681bf91131ca831159'),
    '1': ObjectId('675698681bf91131ca83115a')
  }
}
patient> show collections
PatientRecord
patient> deb.patientRecord.find()
ReferenceError: deb is not defined
patient> deb.PatientRecord.find()
ReferenceError: deb is not defined
patient> db.PatientRecord.find()
[
  {
    _id: ObjectId('6756953b1bf91131ca831158'),
    firstName: 'Abhishek',
    LastName: 'RadhaMayaa',
    age: 23,
    history: { diseases: 'HeadAce', treatment: 'RadhaMayaa' }
  },
  {
    _id: ObjectId('675698681bf91131ca831159'),
    firstName: 'Lavish Tyagi',
    LastName: 'RadhaKrishna',
    age: 26,
    history: [ { disease: 'Cancer', treatment: 'RadhaMayaa' } ]
  },
  {
    _id: ObjectId('675698681bf91131ca83115a'),
    firstName: 'Ajay',
    LastName: 'Dhiman',
    age: 29,
    history: [ { disease: 'Alcoholic', treatment: 'RadhaMayaa' } ]
  }
]
patient> db.PatientRecord.insertOne({
... "firstName":"Max",
... "lastName":"Schwarzmueller",
... "age":34,
... "hiostory":{[
... {"disease":"Cold","treatment":"Take Nap"}
... 
patient> db.PatientRecord.insertOne({
... ... "firstName":"Max",
Uncaught:
SyntaxError: Unexpected token, expected "," (2:15)

  1 | db.PatientRecord.insertOne({
> 2 | ... "firstName":"Max",
    |                ^
  3 |

patient> ... "lastName":"Schwarzmueller",
Uncaught:
SyntaxError: Unexpected token (1:0)

> 1 | ... "lastName":"Schwarzmueller",
    | ^
  2 |

patient> ... "age":34,
Uncaught:
SyntaxError: Unexpected token (1:0)

> 1 | ... "age":34,
    | ^
  2 |

patient> ... "hiostory":{[
Uncaught:
SyntaxError: Unexpected token (1:0)

> 1 | ... "hiostory":{[
    | ^
  2 |

patient> ... {"disease":"Cold","treatment":"Take Nap"}
Uncaught:
SyntaxError: Unexpected token (1:0)

> 1 | ... {"disease":"Cold","treatment":"Take Nap"}
    | ^
  2 |

patient> db.PatientRecord.insertOne({ ... "firstName":"Max",
Uncaught:
SyntaxError: Unexpected token, expected "," (1:44)

> 1 | db.PatientRecord.insertOne({ ... "firstName":"Max",
    |                                             ^
  2 |

patient> db.PatientRecord.insertOne({
... "firstName":"Max",
... "lastName":"Schwarzmueller",
... "age":35,
... "history":[
... {"disease":"Cold","treatment":"Take Naap"},
... {"disease":"Fever","treatment":"Take a Doctor Advice"}]})
{
  acknowledged: true,
  insertedId: ObjectId('67569a141bf91131ca83115b')
}
patient> show collections
PatientRecord
patient> db.PatientRecord.find()
[
  {
    _id: ObjectId('6756953b1bf91131ca831158'),
    firstName: 'Abhishek',
    LastName: 'RadhaMayaa',
    age: 23,
    history: { diseases: 'HeadAce', treatment: 'RadhaMayaa' }
  },
  {
    _id: ObjectId('675698681bf91131ca831159'),
    firstName: 'Lavish Tyagi',
    LastName: 'RadhaKrishna',
    age: 26,
    history: [ { disease: 'Cancer', treatment: 'RadhaMayaa' } ]
  },
  {
    _id: ObjectId('675698681bf91131ca83115a'),
    firstName: 'Ajay',
    LastName: 'Dhiman',
    age: 29,
    history: [ { disease: 'Alcoholic', treatment: 'RadhaMayaa' } ]
  },
  {
    _id: ObjectId('67569a141bf91131ca83115b'),
    firstName: 'Max',
    lastName: 'Schwarzmueller',
    age: 35,
    history: [
      { disease: 'Cold', treatment: 'Take Naap' },
      { disease: 'Fever', treatment: 'Take a Doctor Advice' }
    ]
  }
]
patient> db.PatientRecord.find({"age":{$gt:30}})
[
  {
    _id: ObjectId('67569a141bf91131ca83115b'),
    firstName: 'Max',
    lastName: 'Schwarzmueller',
    age: 35,
    history: [
      { disease: 'Cold', treatment: 'Take Naap' },
      { disease: 'Fever', treatment: 'Take a Doctor Advice' }
    ]
  }
]
patient> db.PatientRecord.deleteOne({disease:'Cold'})
{ acknowledged: true, deletedCount: 0 }
patient> db.PatientRecord.find()
[
  {
    _id: ObjectId('6756953b1bf91131ca831158'),
    firstName: 'Abhishek',
    LastName: 'RadhaMayaa',
    age: 23,
    history: { diseases: 'HeadAce', treatment: 'RadhaMayaa' }
  },
  {
    _id: ObjectId('675698681bf91131ca831159'),
    firstName: 'Lavish Tyagi',
    LastName: 'RadhaKrishna',
    age: 26,
    history: [ { disease: 'Cancer', treatment: 'RadhaMayaa' } ]
  },
  {
    _id: ObjectId('675698681bf91131ca83115a'),
    firstName: 'Ajay',
    LastName: 'Dhiman',
    age: 29,
    history: [ { disease: 'Alcoholic', treatment: 'RadhaMayaa' } ]
  },
  {
    _id: ObjectId('67569a141bf91131ca83115b'),
    firstName: 'Max',
    lastName: 'Schwarzmueller',
    age: 35,
    history: [
      { disease: 'Cold', treatment: 'Take Naap' },
      { disease: 'Fever', treatment: 'Take a Doctor Advice' }
    ]
  }
]
patient> show collections
PatientRecord
patient> db.PatientRecord.deleteOne({history.disease:"Cold"})
Uncaught:
SyntaxError: Unexpected token, expected "," (1:35)

> 1 | db.PatientRecord.deleteOne({history.disease:"Cold"})
    |                                    ^
  2 |

patient> db.PatientRecord.deleteOne({history.disease:'Cold'})
Uncaught:
SyntaxError: Unexpected token, expected "," (1:35)

> 1 | db.PatientRecord.deleteOne({history.disease:'Cold'})
    |                                    ^
  2 |

patient> db.PatientRecord.deleteOne({"history.disease":'Cold'})
{ acknowledged: true, deletedCount: 1 }
patient> db.PatientRecord.find()
[
  {
    _id: ObjectId('6756953b1bf91131ca831158'),
    firstName: 'Abhishek',
    LastName: 'RadhaMayaa',
    age: 23,
    history: { diseases: 'HeadAce', treatment: 'RadhaMayaa' }
  },
  {
    _id: ObjectId('675698681bf91131ca831159'),
    firstName: 'Lavish Tyagi',
    LastName: 'RadhaKrishna',
    age: 26,
    history: [ { disease: 'Cancer', treatment: 'RadhaMayaa' } ]
  },
  {
    _id: ObjectId('675698681bf91131ca83115a'),
    firstName: 'Ajay',
    LastName: 'Dhiman',
    age: 29,
    history: [ { disease: 'Alcoholic', treatment: 'RadhaMayaa' } ]
  }
]
patient> show databases;
Abhishek   72.00 KiB
Flights   164.00 KiB
Products   72.00 KiB
School     40.00 KiB
admin      40.00 KiB
config     84.00 KiB
local     256.00 KiB
patient    72.00 KiB
shop       72.00 KiB
patient> use shop;
switched to db shop
shop> show collections;
products
shop> db.products.find()
[
  {
    _id: ObjectId('67529326de8b2591064468b1'),
    Name: 'A book',
    Price: 12.76
  },
  {
    _id: ObjectId('6752ac1ede8b2591064468b2'),
    description: 'This is the High quality'
  },
  {
    _id: ObjectId('6752b1f1348f0c4aab6abff3'),
    Name: 'A Computer',
    Description: 'A High Quality Computer',
    Details: { CPU: 'Intel Core i7 8720', Ram: '32Gb' }
  },
  {
    _id: ObjectId('67556c121bf91131ca831142'),
    Name: 'A table Lamp',
    specification: [ { Bulbtype: 'Circle' }, { Quality: 'Good' } ]
  }
]
shop> db.products.updateOne
[Function: updateOne] AsyncFunction {
  apiVersions: [ 1, Infinity ],
  serverVersions: [ '3.2.0', '999.999.999' ],
  returnsPromise: true,
  topologies: [ 'ReplSet', 'Sharded', 'LoadBalanced', 'Standalone' ],
  returnType: { type: 'unknown', attributes: {} },
  deprecated: false,
  platforms: [ 'Compass', 'Browser', 'CLI' ],
  isDirectShellCommand: false,
  acceptsRawInput: false,
  shellCommandCompleter: undefined,
  help: [Function (anonymous)] Help
}
shop> show collections;'
MongoshInvalidInputError: [COMMON-10001] 'collections;'' is not a valid argument for "show".
shop> show collections;
products
shop> db.products.updateOne({Name:"A table Lamp"},{$set:{"Price":1100}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
shop> db.products.find()
[
  {
    _id: ObjectId('67529326de8b2591064468b1'),
    Name: 'A book',
    Price: 12.76
  },
  {
    _id: ObjectId('6752ac1ede8b2591064468b2'),
    description: 'This is the High quality'
  },
  {
    _id: ObjectId('6752b1f1348f0c4aab6abff3'),
    Name: 'A Computer',
    Description: 'A High Quality Computer',
    Details: { CPU: 'Intel Core i7 8720', Ram: '32Gb' }
  },
  {
    _id: ObjectId('67556c121bf91131ca831142'),
    Name: 'A table Lamp',
    specification: [ { Bulbtype: 'Circle' }, { Quality: 'Good' } ],
    Price: 1100
  }
]
shop> db.products.deleteOne({Name:"A Computer"})
{ acknowledged: true, deletedCount: 1 }
shop> db.products.find()
[
  {
    _id: ObjectId('67529326de8b2591064468b1'),
    Name: 'A book',
    Price: 12.76
  },
  {
    _id: ObjectId('6752ac1ede8b2591064468b2'),
    description: 'This is the High quality'
  },
  {
    _id: ObjectId('67556c121bf91131ca831142'),
    Name: 'A table Lamp',
    specification: [ { Bulbtype: 'Circle' }, { Quality: 'Good' } ],
    Price: 1100
  }
]
shop> db.products.updateOne({description:"This is the High quality"},{$set:{Name:"This is the High Quality Gun"}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
shop> db.products.find()
[
  {
    _id: ObjectId('67529326de8b2591064468b1'),
    Name: 'A book',
    Price: 12.76
  },
  {
    _id: ObjectId('6752ac1ede8b2591064468b2'),
    description: 'This is the High quality',
    Name: 'This is the High Quality Gun'
  },
  {
    _id: ObjectId('67556c121bf91131ca831142'),
    Name: 'A table Lamp',
    specification: [ { Bulbtype: 'Circle' }, { Quality: 'Good' } ],
    Price: 1100
  }
]
shop> db.products.updateOne({"Name":"This is the High Quality Gun"},{$set:{Name:"Gun"}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
shop> db.products.find()
[
  {
    _id: ObjectId('67529326de8b2591064468b1'),
    Name: 'A book',
    Price: 12.76
  },
  {
    _id: ObjectId('6752ac1ede8b2591064468b2'),
    description: 'This is the High quality',
    Name: 'Gun'
  },
  {
    _id: ObjectId('67556c121bf91131ca831142'),
    Name: 'A table Lamp',
    specification: [ { Bulbtype: 'Circle' }, { Quality: 'Good' } ],
    Price: 1100
  }
]
shop> db.products.findOne({Name:"A book"},{Name:1,Price:1})
{
  _id: ObjectId('67529326de8b2591064468b1'),
  Name: 'A book',
  Price: 12.76
}
shop> db.products.updateOne({Name:"Gun"},{$set:{Price:450000}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
shop> db.products.find()
[
  {
    _id: ObjectId('67529326de8b2591064468b1'),
    Name: 'A book',
    Price: 12.76
  },
  {
    _id: ObjectId('6752ac1ede8b2591064468b2'),
    description: 'This is the High quality',
    Name: 'Gun',
    Price: 450000
  },
  {
    _id: ObjectId('67556c121bf91131ca831142'),
    Name: 'A table Lamp',
    specification: [ { Bulbtype: 'Circle' }, { Quality: 'Good' } ],
    Price: 1100
  }
]
shop> $Comments "Using the Projections 
Uncaught:
SyntaxError: Unterminated string constant. (1:10)

> 1 | $Comments "Using the Projections 
    |           ^
  2 |

shop> $Comments "Using the Projections" 
Uncaught:
SyntaxError: Missing semicolon. (1:9)

> 1 | $Comments "Using the Projections" 
    |          ^
  2 |

shop> $comments "Using the Projections" 
Uncaught:
SyntaxError: Missing semicolon. (1:9)

> 1 | $comments "Using the Projections" 
    |          ^
  2 |

shop> "Using the Projections" 
Using the Projections
shop> db.products.find({},{name:1,price:1})
[
  { _id: ObjectId('67529326de8b2591064468b1') },
  { _id: ObjectId('6752ac1ede8b2591064468b2') },
  { _id: ObjectId('67556c121bf91131ca831142') }
]
shop> db.products.find()
[
  {
    _id: ObjectId('67529326de8b2591064468b1'),
    Name: 'A book',
    Price: 12.76
  },
  {
    _id: ObjectId('6752ac1ede8b2591064468b2'),
    description: 'This is the High quality',
    Name: 'Gun',
    Price: 450000
  },
  {
    _id: ObjectId('67556c121bf91131ca831142'),
    Name: 'A table Lamp',
    specification: [ { Bulbtype: 'Circle' }, { Quality: 'Good' } ],
    Price: 1100
  }
]
shop> db.products.find({},{Name:1,Price:1})
[
  {
    _id: ObjectId('67529326de8b2591064468b1'),
    Name: 'A book',
    Price: 12.76
  },
  {
    _id: ObjectId('6752ac1ede8b2591064468b2'),
    Name: 'Gun',
    Price: 450000
  },
  {
    _id: ObjectId('67556c121bf91131ca831142'),
    Name: 'A table Lamp',
    Price: 1100
  }
]
shop> db.products.find({},{Name:1,Price:1,_id:0})
[
  { Name: 'A book', Price: 12.76 },
  { Name: 'Gun', Price: 450000 },
  { Name: 'A table Lamp', Price: 1100 }
]
shop> db.products.find((
... 
shop> db.products.find()
[
  {
    _id: ObjectId('67529326de8b2591064468b1'),
    Name: 'A book',
    Price: 12.76
  },
  {
    _id: ObjectId('6752ac1ede8b2591064468b2'),
    description: 'This is the High quality',
    Name: 'Gun',
    Price: 450000
  },
  {
    _id: ObjectId('67556c121bf91131ca831142'),
    Name: 'A table Lamp',
    specification: [ { Bulbtype: 'Circle' }, { Quality: 'Good' } ],
    Price: 1100
  }
]
shop> show collections;
products
shop> db.products.find()
[
  {
    _id: ObjectId('67529326de8b2591064468b1'),
    Name: 'A book',
    Price: 12.76
  },
  {
    _id: ObjectId('6752ac1ede8b2591064468b2'),
    description: 'This is the High quality',
    Name: 'Gun',
    Price: 450000
  },
  {
    _id: ObjectId('67556c121bf91131ca831142'),
    Name: 'A table Lamp',
    specification: [ { Bulbtype: 'Circle' }, { Quality: 'Good' } ],
    Price: 1100
  }
]
shop> show collections
products
shop> show.products.find((
... 
shop> show.products.find()
TypeError: Cannot read properties of undefined (reading 'find')
shop> db.products.find()
[
  {
    _id: ObjectId('67529326de8b2591064468b1'),
    Name: 'A book',
    Price: 12.76
  },
  {
    _id: ObjectId('6752ac1ede8b2591064468b2'),
    description: 'This is the High quality',
    Name: 'Gun',
    Price: 450000
  },
  {
    _id: ObjectId('67556c121bf91131ca831142'),
    Name: 'A table Lamp',
    specification: [ { Bulbtype: 'Circle' }, { Quality: 'Good' } ],
    Price: 1100
  }
]
shop> db.products.deleteOne({Name:"Gun"})
{ acknowledged: true, deletedCount: 1 }
shop> db.products.find()
[
  {
    _id: ObjectId('67529326de8b2591064468b1'),
    Name: 'A book',
    Price: 12.76
  },
  {
    _id: ObjectId('67556c121bf91131ca831142'),
    Name: 'A table Lamp',
    specification: [ { Bulbtype: 'Circle' }, { Quality: 'Good' } ],
    Price: 1100
  }
]
shop> show collections
products
shop> show dbs;
Abhishek   72.00 KiB
Flights   164.00 KiB
Products   72.00 KiB
School     40.00 KiB
admin      40.00 KiB
config     84.00 KiB
local     256.00 KiB
patient    72.00 KiB
shop       72.00 KiB
shop> db.dropDatabase()
{ ok: 1, dropped: 'shop' }
shop> show dbs;
Abhishek   72.00 KiB
Flights   164.00 KiB
Products   72.00 KiB
School     40.00 KiB
admin      40.00 KiB
config     84.00 KiB
local     256.00 KiB
patient    72.00 KiB
shop> show collections

shop> use Abhishek 
switched to db Abhishek
Abhishek> show collections
Radha
Abhishek> use School
switched to db School
School> show collection
MongoshInvalidInputError: [COMMON-10001] 'collection' is not a valid argument for "show".
School> show collections
Student
School> db.Student.find()
[ { _id: ObjectId('65dcb658223dddca9941438f') } ]
School> db.Student.drop()
true
School> show collections;

School> show dbs;
Abhishek   72.00 KiB
Flights   164.00 KiB
Products   72.00 KiB
admin      40.00 KiB
config     72.00 KiB
local     256.00 KiB
patient    72.00 KiB
School> use Flights
switched to db Flights
Flights> show collections
flightdata
flightData
passengers
Flights> db.flightdata.drop()
true
Flights> show collections
flightData
passengers
Flights> show dbs;
Abhishek   72.00 KiB
Flights   116.00 KiB
Products   72.00 KiB
admin      40.00 KiB
config     72.00 KiB
local     256.00 KiB
patient    72.00 KiB
Flights> show databases;
Abhishek   72.00 KiB
Flights   116.00 KiB
Products   72.00 KiB
admin      40.00 KiB
config     72.00 KiB
local     256.00 KiB
patient    72.00 KiB
Flights> use Products;
switched to db Products
Products> show collections;
Items
Products> db.Item.find();

Products> db.Items.find();
[
  {
    _id: ObjectId('6755579a1bf91131ca831137'),
    Name: 'Laptop',
    Price: 125000,
    Locations: 'Noida',
    CustomerName: 'Abhishek'
  }
]
Products> db.Items.drop()
true
Products> show collections;

Products> show databases
Abhishek   72.00 KiB
Flights   116.00 KiB
admin      40.00 KiB
config     72.00 KiB
local     256.00 KiB
patient    72.00 KiB
Products> use patient
switched to db patient
patient> show collections
PatientRecord
patient> db.PatientRecord.find()
[
  {
    _id: ObjectId('6756953b1bf91131ca831158'),
    firstName: 'Abhishek',
    LastName: 'RadhaMayaa',
    age: 23,
    history: { diseases: 'HeadAce', treatment: 'RadhaMayaa' }
  },
  {
    _id: ObjectId('675698681bf91131ca831159'),
    firstName: 'Lavish Tyagi',
    LastName: 'RadhaKrishna',
    age: 26,
    history: [ { disease: 'Cancer', treatment: 'RadhaMayaa' } ]
  },
  {
    _id: ObjectId('675698681bf91131ca83115a'),
    firstName: 'Ajay',
    LastName: 'Dhiman',
    age: 29,
    history: [ { disease: 'Alcoholic', treatment: 'RadhaMayaa' } ]
  }
]
patient> db.patient.drop()
true
patient> show collections
PatientRecord
patient> db.PatientRecord.drop()
true
patient> show collections

patient> show dbs;
Abhishek   72.00 KiB
Flights   116.00 KiB
admin      40.00 KiB
config     72.00 KiB
local     256.00 KiB
patient> use Products
switched to db Products
Products> show collections

Products> show dbs;
Abhishek   72.00 KiB
Flights   116.00 KiB
admin      40.00 KiB
config     72.00 KiB
local     256.00 KiB
Products> use Shop
switched to db Shop
Shop> db.products.insertMany([
... {
... "name":"Bottle",
... "available":true
... },
... {
... "title":"Book",
... "price":12.99
... }
... ]
... )
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('675965391bf91131ca83115c'),
    '1': ObjectId('675965391bf91131ca83115d')
  }
}
Shop> show collections
products
Shop> db.products.find()
[
  {
    _id: ObjectId('675965391bf91131ca83115c'),
    name: 'Bottle',
    available: true
  },
  {
    _id: ObjectId('675965391bf91131ca83115d'),
    title: 'Book',
    price: 12.99
  }
]
Shop> db.products.deleteOne({"name":'Bottle'})
{ acknowledged: true, deletedCount: 1 }
Shop> db.products.find()
[
  {
    _id: ObjectId('675965391bf91131ca83115d'),
    title: 'Book',
    price: 12.99
  }
]
Shop> db.products.find()
[
  {
    _id: ObjectId('675965391bf91131ca83115d'),
    title: 'Book',
    price: 12.99
  }
]
Shop> db.products.insertOne({"title":"A Computer","price":78.54,"Details":{"Processor":"Intel 17 core 8"}})
{
  acknowledged: true,
  insertedId: ObjectId('675968a51bf91131ca83115e')
}
Shop> db.products.find()
[
  {
    _id: ObjectId('675965391bf91131ca83115d'),
    title: 'Book',
    price: 12.99
  },
  {
    _id: ObjectId('675968a51bf91131ca83115e'),
    title: 'A Computer',
    price: 78.54,
    Details: { Processor: 'Intel 17 core 8' }
  }
]
Shop> show collections;
products
Shop> db.products.find()
[
  {
    _id: ObjectId('675965391bf91131ca83115d'),
    title: 'Book',
    price: 12.99
  },
  {
    _id: ObjectId('675968a51bf91131ca83115e'),
    title: 'A Computer',
    price: 78.54,
    Details: { Processor: 'Intel 17 core 8' }
  }
]
Shop> db.products.updateOne({"title":'Book'},{$set:{"Details":null}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
Shop> db.products.find()
[
  {
    _id: ObjectId('675965391bf91131ca83115d'),
    title: 'Book',
    price: 12.99,
    Details: null
  },
  {
    _id: ObjectId('675968a51bf91131ca83115e'),
    title: 'A Computer',
    price: 78.54,
    Details: { Processor: 'Intel 17 core 8' }
  }
]
Shop> show dbs;
Abhishek   72.00 KiB
Flights   116.00 KiB
Shop       72.00 KiB
admin      40.00 KiB
config     84.00 KiB
local     256.00 KiB
Shop> use companyData
switched to db companyData
companyData> db.companies.insertOne({
... "name":"Fresh Apple Inc",
... isStartup:true,
... employees:32,
... funding:12345678901234567890,
... details:{"CEO":"Mark Super"},
... tags:[{"title":"Super"},{"title":"Perfect"}],
... foundingDate:new Date(),
... insertAt:new Timestamp()
... }
... )
{
  acknowledged: true,
  insertedId: ObjectId('675975ed1bf91131ca83115f')
}
companyData> show collections;
companies
companyData> db.companies.find()
[
  {
    _id: ObjectId('675975ed1bf91131ca83115f'),
    name: 'Fresh Apple Inc',
    isStartup: true,
    employees: 32,
    funding: 12345678901234567000,
    details: { CEO: 'Mark Super' },
    tags: [ { title: 'Super' }, { title: 'Perfect' } ],
    foundingDate: ISODate('2024-12-11T11:22:21.079Z'),
    insertAt: Timestamp({ t: 1733916141, i: 1 })
  }
]
companyData> show dbs;
Abhishek      72.00 KiB
Flights      116.00 KiB
Shop          72.00 KiB
admin         40.00 KiB
companyData   40.00 KiB
config        84.00 KiB
local        256.00 KiB
companyData> db.stats()
{
  db: 'companyData',
  collections: Long('1'),
  views: Long('0'),
  objects: Long('1'),
  avgObjSize: 229,
  dataSize: 229,
  storageSize: 20480,
  indexes: Long('1'),
  indexSize: 20480,
  totalSize: 40960,
  scaleFactor: Long('1'),
  fsUsedSize: 213288050688,
  fsTotalSize: 245107195904,
  ok: 1
}
companyData> show collections;
companies
companyData> db.stats(*)
Uncaught:
SyntaxError: Unexpected token (1:9)

> 1 | db.stats(*)
    |          ^
  2 |

companyData> db.stats()
{
  db: 'companyData',
  collections: Long('1'),
  views: Long('0'),
  objects: Long('1'),
  avgObjSize: 229,
  dataSize: 229,
  storageSize: 20480,
  indexes: Long('1'),
  indexSize: 20480,
  totalSize: 40960,
  scaleFactor: Long('1'),
  fsUsedSize: 213283368960,
  fsTotalSize: 245107195904,
  ok: 1
}
companyData> db.check.insertOne({"a":1})
{
  acknowledged: true,
  insertedId: ObjectId('675976d21bf91131ca831160')
}
companyData> shiow collections;
Uncaught:
SyntaxError: Missing semicolon. (1:5)

> 1 | shiow collections;
    |      ^
  2 |

companyData> show collections;
check
companies
companyData> db.check.find()
[ { _id: ObjectId('675976d21bf91131ca831160'), a: 1 } ]
companyData> db.stats()
{
  db: 'companyData',
  collections: Long('2'),
  views: Long('0'),
  objects: Long('2'),
  avgObjSize: 129,
  dataSize: 258,
  storageSize: 24576,
  indexes: Long('2'),
  indexSize: 24576,
  totalSize: 49152,
  scaleFactor: Long('1'),
  fsUsedSize: 213287632896,
  fsTotalSize: 245107195904,
  ok: 1
}
companyData> typeof db.check.findOne.a
undefined
companyData> typeof db.check.findOne().a
number
companyData> db.check.delete()
TypeError: db.check.delete is not a function
companyData> db.check.drop()
true
companyData> show collections;
companies
companyData> db.stats()
{
  db: 'companyData',
  collections: Long('1'),
  views: Long('0'),
  objects: Long('1'),
  avgObjSize: 229,
  dataSize: 229,
  storageSize: 20480,
  indexes: Long('1'),
  indexSize: 20480,
  totalSize: 40960,
  scaleFactor: Long('1'),
  fsUsedSize: 213288464384,
  fsTotalSize: 245107195904,
  ok: 1
}
companyData> db.check.insertOne({"a":NumberInt(1)})
{
  acknowledged: true,
  insertedId: ObjectId('675977b41bf91131ca831161')
}
companyData> show collections
check
companies
companyData> db.stats()
{
  db: 'companyData',
  collections: Long('2'),
  views: Long('0'),
  objects: Long('2'),
  avgObjSize: 129,
  dataSize: 258,
  storageSize: 40960,
  indexes: Long('2'),
  indexSize: 40960,
  totalSize: 81920,
  scaleFactor: Long('1'),
  fsUsedSize: 213288550400,
  fsTotalSize: 245107195904,
  ok: 1
}
companyData> typeof db.check.findOne().a
number
companyData> show collections;
check
companies
companyData> db.check.find()
[ { _id: ObjectId('675977b41bf91131ca831161'), a: 1 } ]
companyData> db.stats()
{
  db: 'companyData',
  collections: Long('2'),
  views: Long('0'),
  objects: Long('2'),
  avgObjSize: 129,
  dataSize: 258,
  storageSize: 40960,
  indexes: Long('2'),
  indexSize: 40960,
  totalSize: 81920,
  scaleFactor: Long('1'),
  fsUsedSize: 213477715968,
  fsTotalSize: 245107195904,
  ok: 1
}
companyData> db.companies
companyData.companies
companyData> db.companies.find()
[
  {
    _id: ObjectId('675975ed1bf91131ca83115f'),
    name: 'Fresh Apple Inc',
    isStartup: true,
    employees: 32,
    funding: 12345678901234567000,
    details: { CEO: 'Mark Super' },
    tags: [ { title: 'Super' }, { title: 'Perfect' } ],
    foundingDate: ISODate('2024-12-11T11:22:21.079Z'),
    insertAt: Timestamp({ t: 1733916141, i: 1 })
  }
]
companyData> typeof db.companies.findOne().name
string
companyData> typeof db.companies.findOne().foundingDate
object
companyData> typeof db.companies.findOne().insertAt
object
companyData> typeof db.companies.findOne().tags
object
companyData> typeof db.companies.findOne().details
object
companyData> typeof db.comopanies.findOne().isStartup
TypeError: Cannot read properties of null (reading 'isStartup')
companyData> typeof db.companies.findOne().isStartup
boolean
companyData> show collections
check
companies
companyData> db.check.find()
[ { _id: ObjectId('675977b41bf91131ca831161'), a: 1 } ]
companyData> db.check.updateOne({a:1},{$set:{date:new date()})
Uncaught:
SyntaxError: Unexpected token, expected "," (1:48)

> 1 | db.check.updateOne({a:1},{$set:{date:new date()})
    |                                                 ^
  2 |

companyData> db.check.updateOne({a:1},{$set:{date:new date()}})
ReferenceError: date is not defined
companyData> db.check.updateOne({a:1},{$set:{date:new Date()}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
companyData> show collections
check
companies
companyData> db.check.find()
[
  {
    _id: ObjectId('675977b41bf91131ca831161'),
    a: 1,
    date: ISODate('2024-12-12T08:00:33.355Z')
  }
]
companyData> db.stats()
{
  db: 'companyData',
  collections: Long('2'),
  views: Long('0'),
  objects: Long('2'),
  avgObjSize: 136,
  dataSize: 272,
  storageSize: 57344,
  indexes: Long('2'),
  indexSize: 40960,
  totalSize: 98304,
  scaleFactor: Long('1'),
  fsUsedSize: 213473398784,
  fsTotalSize: 245107195904,
  ok: 1
}
companyData> db.check.updateOne({a:1},{$set:{timedate:new Timestamp()}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
companyData> db.check.find()
[
  {
    _id: ObjectId('675977b41bf91131ca831161'),
    a: 1,
    date: ISODate('2024-12-12T08:00:33.355Z'),
    timedate: Timestamp({ t: 0, i: 0 })
  }
]
companyData> db.stats()
{
  db: 'companyData',
  collections: Long('2'),
  views: Long('0'),
  objects: Long('2'),
  avgObjSize: 145,
  dataSize: 290,
  storageSize: 57344,
  indexes: Long('2'),
  indexSize: 40960,
  totalSize: 98304,
  scaleFactor: Long('1'),
  fsUsedSize: 213469306880,
  fsTotalSize: 245107195904,
  ok: 1
}
companyData> show collections
check
companies
companyData> db.check.find((
... 
companyData> db.check.find()
[
  {
    _id: ObjectId('675977b41bf91131ca831161'),
    a: 1,
    date: ISODate('2024-12-12T08:00:33.355Z'),
    timedate: Timestamp({ t: 0, i: 0 })
  }
]
companyData> db.check.updateOne({a:1},{$set:{num:NumberInt()}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
companyData> db.check.find()
[
  {
    _id: ObjectId('675977b41bf91131ca831161'),
    a: 1,
    date: ISODate('2024-12-12T08:00:33.355Z'),
    timedate: Timestamp({ t: 0, i: 0 }),
    num: 0
  }
]
companyData> typeof db.check.findOne().num
number
companyData> db.check.updateMany({a:1},{$set:{Lg:NumberLong()},{Dc:NumberDecimal()}})
Uncaught:
SyntaxError: Unexpected token (1:50)

> 1 | db.check.updateMany({a:1},{$set:{Lg:NumberLong()},{Dc:NumberDecimal()}})
    |                                                   ^
  2 |

companyData> db.check.updateMany({a:1},{$set:{{Lg:NumberLong()},{Dc:NumberDecimal()}}})
Uncaught:
SyntaxError: Unexpected token (1:33)

> 1 | db.check.updateMany({a:1},{$set:{{Lg:NumberLong()},{Dc:NumberDecimal()}}})
    |                                  ^
  2 |

companyData> db.check.updateMany({a:1},{$set:[{Lg:NumberLong()},{Dc:NumberDecimal()}]})
MongoServerError: Modifiers operate on fields but we found type array instead. For example: {$mod: {<field>: ...}} not {$set: [ { Lg: 0 }, { Dc: 0 } ]}
companyData> db.check.updateMany({a:1},{$set:{Lg:NumberLong()}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
companyData> db.check.find()
[
  {
    _id: ObjectId('675977b41bf91131ca831161'),
    a: 1,
    date: ISODate('2024-12-12T08:00:33.355Z'),
    timedate: Timestamp({ t: 0, i: 0 }),
    num: 0,
    Lg: Long('0')
  }
]
companyData> db.stats()
{
  db: 'companyData',
  collections: Long('2'),
  views: Long('0'),
  objects: Long('2'),
  avgObjSize: 155.5,
  dataSize: 311,
  storageSize: 57344,
  indexes: Long('2'),
  indexSize: 40960,
  totalSize: 98304,
  scaleFactor: Long('1'),
  fsUsedSize: 213481340928,
  fsTotalSize: 245107195904,
  ok: 1
}
companyData> db.check.updateMany({a:1},{$set:{Nd:NumberDecimal()}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
companyData> db.check.find()
[
  {
    _id: ObjectId('675977b41bf91131ca831161'),
    a: 1,
    date: ISODate('2024-12-12T08:00:33.355Z'),
    timedate: Timestamp({ t: 0, i: 0 }),
    num: 0,
    Lg: Long('0'),
    Nd: Decimal128('0')
  }
]
companyData> db.stats()
{
  db: 'companyData',
  collections: Long('2'),
  views: Long('0'),
  objects: Long('2'),
  avgObjSize: 165.5,
  dataSize: 331,
  storageSize: 57344,
  indexes: Long('2'),
  indexSize: 40960,
  totalSize: 98304,
  scaleFactor: Long('1'),
  fsUsedSize: 213484531712,
  fsTotalSize: 245107195904,
  ok: 1
}
companyData> show collections
check
companies
companyData> db.check.find()
[
  {
    _id: ObjectId('675977b41bf91131ca831161'),
    a: 1,
    date: ISODate('2024-12-12T08:00:33.355Z'),
    timedate: Timestamp({ t: 0, i: 0 }),
    num: 0,
    Lg: Long('0'),
    Nd: Decimal128('0')
  }
]
companyData> db.stats()
{
  db: 'companyData',
  collections: Long('2'),
  views: Long('0'),
  objects: Long('2'),
  avgObjSize: 165.5,
  dataSize: 331,
  storageSize: 57344,
  indexes: Long('2'),
  indexSize: 40960,
  totalSize: 98304,
  scaleFactor: Long('1'),
  fsUsedSize: 213483724800,
  fsTotalSize: 245107195904,
  ok: 1
}
companyData> db.check.updateMany({},{$set:{hobbies:["Chessing","ReadingBook","PlayingCricket","RadhaBhajan"]}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
companyData> db.check.find()
[
  {
    _id: ObjectId('675977b41bf91131ca831161'),
    a: 1,
    date: ISODate('2024-12-12T08:00:33.355Z'),
    timedate: Timestamp({ t: 0, i: 0 }),
    num: 0,
    Lg: Long('0'),
    Nd: Decimal128('0'),
    hobbies: [ 'Chessing', 'ReadingBook', 'PlayingCricket', 'RadhaBhajan' ]
  }
]
companyData> 
  [Restored 12 Dec 2024 at 3:24:17 PM]
Last login: Thu Dec 12 15:23:19 on console
Restored session: Thu Dec 12 15:15:49 IST 2024
RadhaPutraAbhishektyagi@Abhisheks-MacBook-Air ~ % pwd
/Users/abhishektyagi_1
RadhaPutraAbhishektyagi@Abhisheks-MacBook-Air ~ % mongosh;
Current Mongosh Log ID:	675abca2f7a0226d0f1cda30
Connecting to:		mongodb://127.0.0.1:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+2.1.5
(node:2376) [DEP0040] DeprecationWarning: The `punycode` module is deprecated. Please use a userland alternative instead.
(Use `node --trace-deprecation ...` to show where the warning was created)
Using MongoDB:		7.0.2
Using Mongosh:		2.1.5
mongosh 2.3.4 is available for download: https://www.mongodb.com/try/download/shell

For mongosh info see: https://docs.mongodb.com/mongodb-shell/

------
   The server generated these startup warnings when booting
   2024-12-12T15:24:31.128+05:30: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted
------

test> show dbs;
Abhishek      72.00 KiB
Flights      116.00 KiB
Shop          72.00 KiB
admin         40.00 KiB
companyData   96.00 KiB
config        72.00 KiB
local        256.00 KiB
test> use hospital
switched to db hospital
hospital> db.patients.insertOne(
... {
... "name":"Max",
... "Age":29,
... "diseaseSummary":"Summary-max-1"
... })
{
  acknowledged: true,
  insertedId: ObjectId('675abd05f7a0226d0f1cda31')
}
hospital> db.patients.find()
[
  {
    _id: ObjectId('675abd05f7a0226d0f1cda31'),
    name: 'Max',
    Age: 29,
    diseaseSummary: 'Summary-max-1'
  }
]
hospital> db.diseasesummaries.insertOne(
... {
... "_id":"Summary-max-1",
... "diseases":['Cold','Fever']
... })
{ acknowledged: true, insertedId: 'Summary-max-1' }
hospital> db.diseasesummaries.find()
[ { _id: 'Summary-max-1', diseases: [ 'Cold', 'Fever' ] } ]
hospital> "Using reference approach "
Using reference approach 
hospital> show collections
diseasesummaries
patients
hospital> db.patients.findOne()
{
  _id: ObjectId('675abd05f7a0226d0f1cda31'),
  name: 'Max',
  Age: 29,
  diseaseSummary: 'Summary-max-1'
}
hospital> db.patients.findOne().diseaseSummary
Summary-max-1
hospital> var dsid=ds.patients.findOne().diseaseSummary
ReferenceError: ds is not defined
hospital> var dsid= db.patients.findOne().diseaseSummary

hospital> show collections
diseasesummaries
patients
hospital> db.diseasesummaries.findOne({"_id":dsis})
ReferenceError: dsis is not defined
hospital> db.diseasesummaries.findOne({"_id":dsid})
{ _id: 'Summary-max-1', diseases: [ 'Cold', 'Fever' ] }
hospital> show collections;
diseasesummaries
patients
hospital> db.patients.deleteMany();
MongoshInvalidInputError: [COMMON-10001] Missing required argument at position 0 (Collection.deleteMany)
hospital> db.patients.deleteMany({})
{ acknowledged: true, deletedCount: 1 }
hospital> db.patients.find()

hospital> db.patients.findMany()
TypeError: db.patients.findMany is not a function
hospital> db.patients.find()

hospital> db.diseasesummaries.find()
[ { _id: 'Summary-max-1', diseases: [ 'Cold', 'Fever' ] } ]
hospital> db.diseasesummaries.deleteMany({})
{ acknowledged: true, deletedCount: 1 }
hospital> db.diseasesummaries.find()

hospital> show collections
diseasesummaries
patients
hospital> db.patients.drop()
true
hospital> show collections
diseasesummaries
hospital> db.diseasesummaries.drop()
true
hospital> show collections

hospital> db.patients.insertOne(
... {
... "Name":"Max",
... "age":29,
... "diseasesummary":['Cold','Fever']
... })
{
  acknowledged: true,
  insertedId: ObjectId('675abf89f7a0226d0f1cda32')
}
hospital> db.patients.find()
[
  {
    _id: ObjectId('675abf89f7a0226d0f1cda32'),
    Name: 'Max',
    age: 29,
    diseasesummary: [ 'Cold', 'Fever' ]
  }
]
hospital> db.patients.findOne()
{
  _id: ObjectId('675abf89f7a0226d0f1cda32'),
  Name: 'Max',
  age: 29,
  diseasesummary: [ 'Cold', 'Fever' ]
}
hospital> show dbs;
Abhishek      72.00 KiB
Flights      116.00 KiB
Shop          72.00 KiB
admin         40.00 KiB
companyData   96.00 KiB
config        84.00 KiB
hospital      40.00 KiB
local        256.00 KiB
hospital> use hospital
already on db hospital
hospital> show collections
patients
hospital> db.patients.find()
[
  {
    _id: ObjectId('675abf89f7a0226d0f1cda32'),
    Name: 'Max',
    age: 29,
    diseasesummary: [ 'Cold', 'Fever' ]
  }
]
hospital> sho databases
Uncaught:
SyntaxError: Missing semicolon. (1:3)

> 1 | sho databases
    |    ^
  2 |

hospital> show databases
Abhishek      72.00 KiB
Flights      116.00 KiB
Shop          72.00 KiB
admin         40.00 KiB
companyData   96.00 KiB
config        84.00 KiB
hospital      40.00 KiB
local        256.00 KiB
hospital> use Car
switched to db Car
Car> db.person.insertOne({
... "name":"Abhishek Tyagi",
... "Age":23,
... "Salary":50000
... })
{
  acknowledged: true,
  insertedId: ObjectId('675bec52f7a0226d0f1cda33')
}
Car> show collections;
person
Car> db.person.find()
[
  {
    _id: ObjectId('675bec52f7a0226d0f1cda33'),
    name: 'Abhishek Tyagi',
    Age: 23,
    Salary: 50000
  }
]
Car> db.Cars.insertOne({
... "Model":"BMW",
... "Price":50,000
... "Ownerid":ObjectId('675bec52f7a0226d0f1cda33')
Uncaught:
SyntaxError: Unexpected token (4:0)

  2 | "Model":"BMW",
  3 | "Price":50,000
> 4 | "Ownerid":ObjectId('675bec52f7a0226d0f1cda33')
    | ^
  5 |

Car> db.Cars.insertOne({ "Model":"BMW", "Price":50,000 "Ownerid":ObjectId('675bec52f7a0226d0f1cda33')})
Uncaught:
SyntaxError: Unexpected token (1:50)

> 1 | db.Cars.insertOne({ "Model":"BMW", "Price":50,000 "Ownerid":ObjectId('675bec52f7a0226d0f1cda33')})
    |                                                   ^
  2 |

Car> db.Cars.insertOne({ "Model":"BMW", "Price":50,000 "Ownerid":675bec52f7a0226d0f1cda33})
Uncaught:
SyntaxError: Unexpected token (1:50)

> 1 | db.Cars.insertOne({ "Model":"BMW", "Price":50,000 "Ownerid":675bec52f7a0226d0f1cda33})
    |                                                   ^
  2 |

Car> db.Cars.insertOne({ "Model":"BMW", "Price":50,000, "Ownerid":675bec52f7a0226d0f1cda33})
Uncaught:
SyntaxError: Unexpected token (1:49)

> 1 | db.Cars.insertOne({ "Model":"BMW", "Price":50,000, "Ownerid":675bec52f7a0226d0f1cda33})
    |                                                  ^
  2 |

Car> db.Cars.insertOne({ "Model":"BMW", "Price":50000, "Ownerid":675bec52f7a0226d0f1cda33})
Uncaught:
SyntaxError: Identifier directly after number. (1:63)

> 1 | db.Cars.insertOne({ "Model":"BMW", "Price":50000, "Ownerid":675bec52f7a0226d0f1cda33})
    |                                                                ^
  2 |

Car> db.Cars.insertOne({ "Model":"BMW", "Price":50000, "Ownerid":675bec52f7a0226d0f1cda33})
Uncaught:
SyntaxError: Identifier directly after number. (1:63)

> 1 | db.Cars.insertOne({ "Model":"BMW", "Price":50000, "Ownerid":675bec52f7a0226d0f1cda33})
    |                                                                ^
  2 |

Car> show collections;
person
Car> db.person.find()
[
  {
    _id: ObjectId('675bec52f7a0226d0f1cda33'),
    name: 'Abhishek Tyagi',
    Age: 23,
    Salary: 50000
  }
]
Car> db.Car.insertOne({
... "Model":"BMW",
... "Price":5000000,
... "ownerid":ObjectId('675bec52f7a0226d0f1cda33')
... })
{
  acknowledged: true,
  insertedId: ObjectId('675bed30f7a0226d0f1cda34')
}
Car> show collections;
Car
person
Car> db.Car.find()
[
  {
    _id: ObjectId('675bed30f7a0226d0f1cda34'),
    Model: 'BMW',
    Price: 5000000,
    ownerid: ObjectId('675bec52f7a0226d0f1cda33')
  }
]
Car> db.person.find()
[
  {
    _id: ObjectId('675bec52f7a0226d0f1cda33'),
    name: 'Abhishek Tyagi',
    Age: 23,
    Salary: 50000
  }
]
Car> show collections;
Car
person
Car> show dbs;
Abhishek      72.00 KiB
Car           80.00 KiB
Flights      116.00 KiB
Shop          72.00 KiB
admin         40.00 KiB
companyData   96.00 KiB
config       108.00 KiB
hospital      40.00 KiB
local        256.00 KiB
Car> use Support
switched to db Support
Support> "One-to-Many Using Embedded Relation"
One-to-Many Using Embedded Relation
Support> db.questionThread.insertOne({
... "Creator":"Abhishek",
... "questions":"How does that work?",
... "answer":[
... {"text":"Like that!"},
... {"text":"Thanks!"}
... ]})
{
  acknowledged: true,
  insertedId: ObjectId('675bf2f6f7a0226d0f1cda35')
}
Support> show collections;
questionThread
Support> db.questionThread.find()
[
  {
    _id: ObjectId('675bf2f6f7a0226d0f1cda35'),
    Creator: 'Abhishek',
    questions: 'How does that work?',
    answer: [ { text: 'Like that!' }, { text: 'Thanks!' } ]
  }
]
Support> db.questionThread.deleteMany({});
{ acknowledged: true, deletedCount: 1 }
Support> show collections;
questionThread
Support> db.questionThread.find()

Support> db.questionThread.insertOne({
... "Creator":"Abhishek",
... "Question":"How does that all work!",
... "Answer":["q1A1","q1A2"]
... })
{
  acknowledged: true,
  insertedId: ObjectId('675bf3d7f7a0226d0f1cda36')
}
Support> db.questionThread.find(()
... db.questionThread.find(()
Support> db.questionThread.find()
[
  {
    _id: ObjectId('675bf3d7f7a0226d0f1cda36'),
    Creator: 'Abhishek',
    Question: 'How does that all work!',
    Answer: [ 'q1A1', 'q1A2' ]
  }
]
Support> db.answer.insertMany([
... {
... _id:"q1A1",
... "text":"It work like that"
... },
... {
... _id:"q1A2",
... "test":"Thanks!"
... }
... ]}
Uncaught:
SyntaxError: Unexpected token, expected "," (10:1)

   8 | "test":"Thanks!"
   9 | }
> 10 | ]}
     |  ^
  11 |

Support> db.answer.insertMany([ { _id:"q1A1", "text":"It work like that" }, { _id:"q1A2", "test":"Thanks!" } ])
{ acknowledged: true, insertedIds: { '0': 'q1A1', '1': 'q1A2' } }
Support> show collections
answer
questionThread
Support> dn]b.answer.find()
Uncaught:
SyntaxError: Missing semicolon. (1:2)

> 1 | dn]b.answer.find()
    |   ^
  2 |

Support> dnb.answer.find()
ReferenceError: dnb is not defined
Support> db.answer.find()
[
  { _id: 'q1A1', text: 'It work like that' },
  { _id: 'q1A2', test: 'Thanks!' }
]
Support> show dbs;
Abhishek      72.00 KiB
Car           80.00 KiB
Flights      116.00 KiB
Shop          72.00 KiB
Support       88.00 KiB
admin         40.00 KiB
companyData   96.00 KiB
config        72.00 KiB
hospital      40.00 KiB
local        256.00 KiB
Support> use CityData
switched to db CityData
CityData> show collections

CityData> db.cities.insertOne({
... "name":"New York City",
... "Coordinates":{"lat":12,"Lng":23}})
{
  acknowledged: true,
  insertedId: ObjectId('675c0211f7a0226d0f1cda37')
}
CityData> show collections;
cities
CityData> db.cities.find()
[
  {
    _id: ObjectId('675c0211f7a0226d0f1cda37'),
    name: 'New York City',
    Coordinates: { lat: 12, Lng: 23 }
  }
]
CityData> db.cities.insertMany([
... {
... "name":"New Delhi",
... "Coordinates":{"lat":15,"lng":19}
... },
... {
... "name":"Tokoyo",
... "Coordinates":{"lat":111,"lng":123}
... }
... ])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('675c028bf7a0226d0f1cda38'),
    '1': ObjectId('675c028bf7a0226d0f1cda39')
  }
}
CityData> db.cities.find()
[
  {
    _id: ObjectId('675c0211f7a0226d0f1cda37'),
    name: 'New York City',
    Coordinates: { lat: 12, Lng: 23 }
  },
  {
    _id: ObjectId('675c028bf7a0226d0f1cda38'),
    name: 'New Delhi',
    Coordinates: { lat: 15, lng: 19 }
  },
  {
    _id: ObjectId('675c028bf7a0226d0f1cda39'),
    name: 'Tokoyo',
    Coordinates: { lat: 111, lng: 123 }
  }
]
CityData> db.citizens.insertMany([
... {
... "Name":"Abhishek Tyagi",
... "Age":23,
... "Salary":130000
... },
... {
... 
CityData> show collections';
MongoshInvalidInputError: [COMMON-10001] 'collections'' is not a valid argument for "show".
CityData> show collections;
cities
CityData> db.citizens.insertMany([
... {
... "Name":"Abhishek Tyagi",
... "Age":23,
... "Salary":130000,
... "citiid":ObjectId('675c028bf7a0226d0f1cda38')
... },
... {
... "Name":"Lisa",
... "Age":24,
... "Salary":120000,
... "citiid":ObjectId('675c0211f7a0226d0f1cda37')
... },
... {
... "Name":"Suzukha",
... "Age":23,
... "citiid":ObjectId('675c028bf7a0226d0f1cda39')
... }
... ]}
Uncaught:
SyntaxError: Unexpected token, expected "," (19:1)

  17 | "citiid":ObjectId('675c028bf7a0226d0f1cda39')
  18 | }
> 19 | ]}
     |  ^
  20 |

CityData> db.citizens.insertMany([ { "Name":"Abhishek Tyagi", "Age":23, "Salary":130000, "citiid":ObjectId('675c028bf7a0226d0f1cda38') }, { "Name":"Lisa", "Age":24, "Salary":120000, "citiid":ObjectId('675c0211f7a0226d0f1cda37') }, { "Name":"Suzukha", "Age":23, "citiid":ObjectId('675c028bf7a0226d0f1cda39') } ])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('675c0398f7a0226d0f1cda3a'),
    '1': ObjectId('675c0398f7a0226d0f1cda3b'),
    '2': ObjectId('675c0398f7a0226d0f1cda3c')
  }
}
CityData> show collections;
cities
citizens
CityData> db.citizens.find()
[
  {
    _id: ObjectId('675c0398f7a0226d0f1cda3a'),
    Name: 'Abhishek Tyagi',
    Age: 23,
    Salary: 130000,
    citiid: ObjectId('675c028bf7a0226d0f1cda38')
  },
  {
    _id: ObjectId('675c0398f7a0226d0f1cda3b'),
    Name: 'Lisa',
    Age: 24,
    Salary: 120000,
    citiid: ObjectId('675c0211f7a0226d0f1cda37')
  },
  {
    _id: ObjectId('675c0398f7a0226d0f1cda3c'),
    Name: 'Suzukha',
    Age: 23,
    citiid: ObjectId('675c028bf7a0226d0f1cda39')
  }
]
CityData> db.cities.find()
[
  {
    _id: ObjectId('675c0211f7a0226d0f1cda37'),
    name: 'New York City',
    Coordinates: { lat: 12, Lng: 23 }
  },
  {
    _id: ObjectId('675c028bf7a0226d0f1cda38'),
    name: 'New Delhi',
    Coordinates: { lat: 15, lng: 19 }
  },
  {
    _id: ObjectId('675c028bf7a0226d0f1cda39'),
    name: 'Tokoyo',
    Coordinates: { lat: 111, lng: 123 }
  }
]
CityData> db.citizens.find()
[
  {
    _id: ObjectId('675c0398f7a0226d0f1cda3a'),
    Name: 'Abhishek Tyagi',
    Age: 23,
    Salary: 130000,
    citiid: ObjectId('675c028bf7a0226d0f1cda38')
  },
  {
    _id: ObjectId('675c0398f7a0226d0f1cda3b'),
    Name: 'Lisa',
    Age: 24,
    Salary: 120000,
    citiid: ObjectId('675c0211f7a0226d0f1cda37')
  },
  {
    _id: ObjectId('675c0398f7a0226d0f1cda3c'),
    Name: 'Suzukha',
    Age: 23,
    citiid: ObjectId('675c028bf7a0226d0f1cda39')
  }
]
CityData> show collections;
cities
citizens
CityData> show dbs;
Abhishek      72.00 KiB
Car           80.00 KiB
CityData     112.00 KiB
Flights      116.00 KiB
Shop          72.00 KiB
Support       88.00 KiB
admin         40.00 KiB
companyData   96.00 KiB
config        96.00 KiB
hospital      40.00 KiB
local        256.00 KiB
CityData> use shop;
switched to db shop
shop> show collections;

shop> db.products.insertMany([
... {
... "title":"A Book",
... "Price":1200
... },
... {
... "title":"A Football",
... "Price":1500
... },
... {
... "title":"A Cycle",
... "Price":12000
... }
... ])
Uncaught:
MongoBulkWriteError: db already exists with different case already have: [Shop] trying to create [shop]
Result: BulkWriteResult {
  insertedCount: 0,
  matchedCount: 0,
  modifiedCount: 0,
  deletedCount: 0,
  upsertedCount: 0,
  upsertedIds: {},
  insertedIds: {}
}
Write Errors: [
  WriteError {
    err: {
      index: 0,
      code: 13297,
      errmsg: 'db already exists with different case already have: [Shop] trying to create [shop]',
      errInfo: undefined,
      op: {
        title: 'A Book',
        Price: 1200,
        _id: ObjectId('675c073bf7a0226d0f1cda3d')
      }
    }
  }
]
shop> db.products.insertMany([{ "title": "A Book", "Price": 1200 },{ "title": "A Football", "Price": 1500}, {"title": "A Cycle","Price": 12000}]);
Uncaught:
MongoBulkWriteError: db already exists with different case already have: [Shop] trying to create [shop]
Result: BulkWriteResult {
  insertedCount: 0,
  matchedCount: 0,
  modifiedCount: 0,
  deletedCount: 0,
  upsertedCount: 0,
  upsertedIds: {},
  insertedIds: {}
}
Write Errors: [
  WriteError {
    err: {
      index: 0,
      code: 13297,
      errmsg: 'db already exists with different case already have: [Shop] trying to create [shop]',
      errInfo: undefined,
      op: {
        title: 'A Book',
        Price: 1200,
        _id: ObjectId('675c076ef7a0226d0f1cda40')
      }
    }
  }
]
shop> db.products.insertMany([{ "title": "A Book", "Price": 1200 },{ "title": "A Football", "Price": 1500}, {"title": "A Cycle","Price": 12000}]);
Uncaught:
MongoBulkWriteError: db already exists with different case already have: [Shop] trying to create [shop]
Result: BulkWriteResult {
  insertedCount: 0,
  matchedCount: 0,
  modifiedCount: 0,
  deletedCount: 0,
  upsertedCount: 0,
  upsertedIds: {},
  insertedIds: {}
}
Write Errors: [
  WriteError {
    err: {
      index: 0,
      code: 13297,
      errmsg: 'db already exists with different case already have: [Shop] trying to create [shop]',
      errInfo: undefined,
      op: {
        title: 'A Book',
        Price: 1200,
        _id: ObjectId('675c077ff7a0226d0f1cda43')
      }
    }
  }
]
shop> show dbs;
Abhishek      72.00 KiB
Car           80.00 KiB
CityData     112.00 KiB
Flights      116.00 KiB
Shop          72.00 KiB
Support       88.00 KiB
admin         40.00 KiB
companyData   96.00 KiB
config       108.00 KiB
hospital      40.00 KiB
local        256.00 KiB
shop> shop.drop()
ReferenceError: shop is not defined
shop> Shop.drop()
ReferenceError: Shop is not defined
shop> use Shop
switched to db Shop
Shop> db.dropdatabases;
Shop.dropdatabases
Shop> db.dropdatabase(0;
Uncaught:
SyntaxError: Unexpected token, expected "," (1:17)

> 1 | db.dropdatabase(0;
    |                  ^
  2 |

Shop> db.dropdatabase();
TypeError: db.dropdatabase is not a function
Shop> db.dropDatabase();
{ ok: 1, dropped: 'Shop' }
Shop> show dbs;
Abhishek      72.00 KiB
Car           80.00 KiB
CityData     112.00 KiB
Flights      116.00 KiB
Support       88.00 KiB
admin         40.00 KiB
companyData   96.00 KiB
config       108.00 KiB
hospital      40.00 KiB
local        256.00 KiB
Shop> use shop
switched to db shop
shop> show dbs;
Abhishek      72.00 KiB
Car           80.00 KiB
CityData     112.00 KiB
Flights      116.00 KiB
Support       88.00 KiB
admin         40.00 KiB
companyData   96.00 KiB
config       108.00 KiB
hospital      40.00 KiB
local        256.00 KiB
shop> db.products.insertMany([{ "title": "A Book", "Price": 1200 },{ "title": "A Football", "Price": 1500}, {"title": "A Cycle","Price": 12000}]);
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('675c0829f7a0226d0f1cda46'),
    '1': ObjectId('675c0829f7a0226d0f1cda47'),
    '2': ObjectId('675c0829f7a0226d0f1cda48')
  }
}
shop> show collections;
products
shop> db.products.find()
[
  {
    _id: ObjectId('675c0829f7a0226d0f1cda46'),
    title: 'A Book',
    Price: 1200
  },
  {
    _id: ObjectId('675c0829f7a0226d0f1cda47'),
    title: 'A Football',
    Price: 1500
  },
  {
    _id: ObjectId('675c0829f7a0226d0f1cda48'),
    title: 'A Cycle',
    Price: 12000
  }
]
shop> db.customers.insertMany([
... {
... "Name":"Abhishek Tyagi",
... "Age":24,
... "city":"New Delhi"
... },
... {
... "Name":"Lisa Roy", 
... "Age":24,
... "city":"Florida"
... },
... {
... "name":"Suzi"
... "Age":25,
Uncaught:
SyntaxError: Unexpected token, expected "," (14:0)

  12 | {
  13 | "name":"Suzi"
> 14 | "Age":25,
     | ^
  15 |

shop> db.customers.insertMany([ { "Name":"Abhishek Tyagi", "Age":24, "city":"New Delhi" }, { "Name":"Lisa Roy", "Age":24, "city":"Florida" }, { "name":"Suzi", "Age":25,"city":"Tokoyo"}])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('675c08e0f7a0226d0f1cda49'),
    '1': ObjectId('675c08e0f7a0226d0f1cda4a'),
    '2': ObjectId('675c08e0f7a0226d0f1cda4b')
  }
}
shop> show collections;
customers
products
shop> db.products;
shop.products
shop> db.products.find()
[
  {
    _id: ObjectId('675c0829f7a0226d0f1cda46'),
    title: 'A Book',
    Price: 1200
  },
  {
    _id: ObjectId('675c0829f7a0226d0f1cda47'),
    title: 'A Football',
    Price: 1500
  },
  {
    _id: ObjectId('675c0829f7a0226d0f1cda48'),
    title: 'A Cycle',
    Price: 12000
  }
]
shop> db.customers.find()
[
  {
    _id: ObjectId('675c08e0f7a0226d0f1cda49'),
    Name: 'Abhishek Tyagi',
    Age: 24,
    city: 'New Delhi'
  },
  {
    _id: ObjectId('675c08e0f7a0226d0f1cda4a'),
    Name: 'Lisa Roy',
    Age: 24,
    city: 'Florida'
  },
  {
    _id: ObjectId('675c08e0f7a0226d0f1cda4b'),
    name: 'Suzi',
    Age: 25,
    city: 'Tokoyo'
  }
]
shop> show collections;
customers
products
shop> db.Orders.insertMany([
... {
... "PriD": ObjectId('675c0829f7a0226d0f1cda46'),
... "CusId"
... :ObjectId('675c08e0f7a0226d0f1cda49')}])
{
  acknowledged: true,
  insertedIds: { '0': ObjectId('675c0961f7a0226d0f1cda4c') }
}
shop> show collections;
customers
Orders
products
shop> db.Orders.find()
[
  {
    _id: ObjectId('675c0961f7a0226d0f1cda4c'),
    PriD: ObjectId('675c0829f7a0226d0f1cda46'),
    CusId: ObjectId('675c08e0f7a0226d0f1cda49')
  }
]
shop> db.Orders.insertMany([
... {
... "prid":ObjectId('675c0829f7a0226d0f1cda47'),
... "cusid":ObjectId('675c08e0f7a0226d0f1cda4a')
... },
... {
... "prid":ObjectId('675c0829f7a0226d0f1cda48'),
... "custid":ObjectId('675c08e0f7a0226d0f1cda4b')
... }
... ])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('675c09e7f7a0226d0f1cda4d'),
    '1': ObjectId('675c09e7f7a0226d0f1cda4e')
  }
}
shop> show collwctions;
MongoshInvalidInputError: [COMMON-10001] 'collwctions' is not a valid argument for "show".
shop> show collections;
customers
Orders
products
shop> db.Orders.find()
[
  {
    _id: ObjectId('675c0961f7a0226d0f1cda4c'),
    PriD: ObjectId('675c0829f7a0226d0f1cda46'),
    CusId: ObjectId('675c08e0f7a0226d0f1cda49')
  },
  {
    _id: ObjectId('675c09e7f7a0226d0f1cda4d'),
    prid: ObjectId('675c0829f7a0226d0f1cda47'),
    cusid: ObjectId('675c08e0f7a0226d0f1cda4a')
  },
  {
    _id: ObjectId('675c09e7f7a0226d0f1cda4e'),
    prid: ObjectId('675c0829f7a0226d0f1cda48'),
    custid: ObjectId('675c08e0f7a0226d0f1cda4b')
  }
]
shop> db.products.find()
[
  {
    _id: ObjectId('675c0829f7a0226d0f1cda46'),
    title: 'A Book',
    Price: 1200
  },
  {
    _id: ObjectId('675c0829f7a0226d0f1cda47'),
    title: 'A Football',
    Price: 1500
  },
  {
    _id: ObjectId('675c0829f7a0226d0f1cda48'),
    title: 'A Cycle',
    Price: 12000
  }
]
shop> db.customers.find()
[
  {
    _id: ObjectId('675c08e0f7a0226d0f1cda49'),
    Name: 'Abhishek Tyagi',
    Age: 24,
    city: 'New Delhi'
  },
  {
    _id: ObjectId('675c08e0f7a0226d0f1cda4a'),
    Name: 'Lisa Roy',
    Age: 24,
    city: 'Florida'
  },
  {
    _id: ObjectId('675c08e0f7a0226d0f1cda4b'),
    name: 'Suzi',
    Age: 25,
    city: 'Tokoyo'
  }
]
shop> show collections;
customers
Orders
products
shop> db.Orders.drop()
true
shop> show collections;
customers
products
shop> db.products.find()
[
  {
    _id: ObjectId('675c0829f7a0226d0f1cda46'),
    title: 'A Book',
    Price: 1200
  },
  {
    _id: ObjectId('675c0829f7a0226d0f1cda47'),
    title: 'A Football',
    Price: 1500
  },
  {
    _id: ObjectId('675c0829f7a0226d0f1cda48'),
    title: 'A Cycle',
    Price: 12000
  }
]
shop> db.customers.find(()
... 
shop> db.customers.find()
[
  {
    _id: ObjectId('675c08e0f7a0226d0f1cda49'),
    Name: 'Abhishek Tyagi',
    Age: 24,
    city: 'New Delhi'
  },
  {
    _id: ObjectId('675c08e0f7a0226d0f1cda4a'),
    Name: 'Lisa Roy',
    Age: 24,
    city: 'Florida'
  },
  {
    _id: ObjectId('675c08e0f7a0226d0f1cda4b'),
    name: 'Suzi',
    Age: 25,
    city: 'Tokoyo'
  }
]
shop> db.customers.updateMany([
... 
shop> db.customers.updateMany({},{$set:{"orders":{"prid":ObjectId('675c0829f7a0226d0f1cda46'),"quantity":12}}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 3,
  modifiedCount: 3,
  upsertedCount: 0
}
shop> db.customers.find()
[
  {
    _id: ObjectId('675c08e0f7a0226d0f1cda49'),
    Name: 'Abhishek Tyagi',
    Age: 24,
    city: 'New Delhi',
    orders: { prid: ObjectId('675c0829f7a0226d0f1cda46'), quantity: 12 }
  },
  {
    _id: ObjectId('675c08e0f7a0226d0f1cda4a'),
    Name: 'Lisa Roy',
    Age: 24,
    city: 'Florida',
    orders: { prid: ObjectId('675c0829f7a0226d0f1cda46'), quantity: 12 }
  },
  {
    _id: ObjectId('675c08e0f7a0226d0f1cda4b'),
    name: 'Suzi',
    Age: 25,
    city: 'Tokoyo',
    orders: { prid: ObjectId('675c0829f7a0226d0f1cda46'), quantity: 12 }
  }
]
shop> db.customers.updateOne({"Name":"Lisa Roy"},{$set:{orders:{"prid":ObjectId('675c0829f7a0226d0f1cda47'),"quantity":5}}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
shop> db.customers.find()
[
  {
    _id: ObjectId('675c08e0f7a0226d0f1cda49'),
    Name: 'Abhishek Tyagi',
    Age: 24,
    city: 'New Delhi',
    orders: { prid: ObjectId('675c0829f7a0226d0f1cda46'), quantity: 12 }
  },
  {
    _id: ObjectId('675c08e0f7a0226d0f1cda4a'),
    Name: 'Lisa Roy',
    Age: 24,
    city: 'Florida',
    orders: { prid: ObjectId('675c0829f7a0226d0f1cda47'), quantity: 5 }
  },
  {
    _id: ObjectId('675c08e0f7a0226d0f1cda4b'),
    name: 'Suzi',
    Age: 25,
    city: 'Tokoyo',
    orders: { prid: ObjectId('675c0829f7a0226d0f1cda46'), quantity: 12 }
  }
]
shop> db.customers.updateOne({"Name":"Suzi"},{$set:{orders:{"prid":ObjectId('675c0829f7a0226d0f1cda48'),"quantity":2}}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 0,
  modifiedCount: 0,
  upsertedCount: 0
}
shop> db.customers.find()
[
  {
    _id: ObjectId('675c08e0f7a0226d0f1cda49'),
    Name: 'Abhishek Tyagi',
    Age: 24,
    city: 'New Delhi',
    orders: { prid: ObjectId('675c0829f7a0226d0f1cda46'), quantity: 12 }
  },
  {
    _id: ObjectId('675c08e0f7a0226d0f1cda4a'),
    Name: 'Lisa Roy',
    Age: 24,
    city: 'Florida',
    orders: { prid: ObjectId('675c0829f7a0226d0f1cda47'), quantity: 5 }
  },
  {
    _id: ObjectId('675c08e0f7a0226d0f1cda4b'),
    name: 'Suzi',
    Age: 25,
    city: 'Tokoyo',
    orders: { prid: ObjectId('675c0829f7a0226d0f1cda46'), quantity: 12 }
  }
]
shop> db.customers.find()
[
  {
    _id: ObjectId('675c08e0f7a0226d0f1cda49'),
    Name: 'Abhishek Tyagi',
    Age: 24,
    city: 'New Delhi',
    orders: { prid: ObjectId('675c0829f7a0226d0f1cda46'), quantity: 12 }
  },
  {
    _id: ObjectId('675c08e0f7a0226d0f1cda4a'),
    Name: 'Lisa Roy',
    Age: 24,
    city: 'Florida',
    orders: { prid: ObjectId('675c0829f7a0226d0f1cda47'), quantity: 5 }
  },
  {
    _id: ObjectId('675c08e0f7a0226d0f1cda4b'),
    name: 'Suzi',
    Age: 25,
    city: 'Tokoyo',
    orders: { prid: ObjectId('675c0829f7a0226d0f1cda46'), quantity: 12 }
  }
]
shop> db.customers.updateOne({"ame":"Suzi"},{$set:{orders:{"prid":ObjectId('675c0829f7a0226d0f1cda48'),"quantity":2}}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 0,
  modifiedCount: 0,
  upsertedCount: 0
}
shop> db.customers.updateOne({"name":"Suzi"},{$set:{orders:{"prid":ObjectId('675c0829f7a0226d0f1cda48'),"quantity":2}}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
shop> db.customers.find()
[
  {
    _id: ObjectId('675c08e0f7a0226d0f1cda49'),
    Name: 'Abhishek Tyagi',
    Age: 24,
    city: 'New Delhi',
    orders: { prid: ObjectId('675c0829f7a0226d0f1cda46'), quantity: 12 }
  },
  {
    _id: ObjectId('675c08e0f7a0226d0f1cda4a'),
    Name: 'Lisa Roy',
    Age: 24,
    city: 'Florida',
    orders: { prid: ObjectId('675c0829f7a0226d0f1cda47'), quantity: 5 }
  },
  {
    _id: ObjectId('675c08e0f7a0226d0f1cda4b'),
    name: 'Suzi',
    Age: 25,
    city: 'Tokoyo',
    orders: { prid: ObjectId('675c0829f7a0226d0f1cda48'), quantity: 2 }
  }
]
shop> db.customers.updateOne({"Name":"Abhishek Tyagi"},{$set:{"orders":{"title":"A Book","Price":1200,"qty":1}}}) 
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
shop> db.customers.find(()
... 
shop> db.customers.find()
[
  {
    _id: ObjectId('675c08e0f7a0226d0f1cda49'),
    Name: 'Abhishek Tyagi',
    Age: 24,
    city: 'New Delhi',
    orders: { title: 'A Book', Price: 1200, qty: 1 }
  },
  {
    _id: ObjectId('675c08e0f7a0226d0f1cda4a'),
    Name: 'Lisa Roy',
    Age: 24,
    city: 'Florida',
    orders: { prid: ObjectId('675c0829f7a0226d0f1cda47'), quantity: 5 }
  },
  {
    _id: ObjectId('675c08e0f7a0226d0f1cda4b'),
    name: 'Suzi',
    Age: 25,
    city: 'Tokoyo',
    orders: { prid: ObjectId('675c0829f7a0226d0f1cda48'), quantity: 2 }
  }
]
shop> db.customers.updateOne({"Name":"Lisa"},{$set:{"orders":{"title":"A football","Price":1500,"qty":2}}}) 
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 0,
  modifiedCount: 0,
  upsertedCount: 0
}
shop> db.customers.find()
[
  {
    _id: ObjectId('675c08e0f7a0226d0f1cda49'),
    Name: 'Abhishek Tyagi',
    Age: 24,
    city: 'New Delhi',
    orders: { title: 'A Book', Price: 1200, qty: 1 }
  },
  {
    _id: ObjectId('675c08e0f7a0226d0f1cda4a'),
    Name: 'Lisa Roy',
    Age: 24,
    city: 'Florida',
    orders: { prid: ObjectId('675c0829f7a0226d0f1cda47'), quantity: 5 }
  },
  {
    _id: ObjectId('675c08e0f7a0226d0f1cda4b'),
    name: 'Suzi',
    Age: 25,
    city: 'Tokoyo',
    orders: { prid: ObjectId('675c0829f7a0226d0f1cda48'), quantity: 2 }
  }
]
shop> db.customers.updateOne({"Name":"Lisa Roy"},{$set:{"orders":{"title":"A football","Price":1500,"qty":2}}}) 
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
shop> db.customers.find()
[
  {
    _id: ObjectId('675c08e0f7a0226d0f1cda49'),
    Name: 'Abhishek Tyagi',
    Age: 24,
    city: 'New Delhi',
    orders: { title: 'A Book', Price: 1200, qty: 1 }
  },
  {
    _id: ObjectId('675c08e0f7a0226d0f1cda4a'),
    Name: 'Lisa Roy',
    Age: 24,
    city: 'Florida',
    orders: { title: 'A football', Price: 1500, qty: 2 }
  },
  {
    _id: ObjectId('675c08e0f7a0226d0f1cda4b'),
    name: 'Suzi',
    Age: 25,
    city: 'Tokoyo',
    orders: { prid: ObjectId('675c0829f7a0226d0f1cda48'), quantity: 2 }
  }
]
shop> show dbs;
Abhishek      72.00 KiB
Car           80.00 KiB
CityData     112.00 KiB
Flights      116.00 KiB
Support       88.00 KiB
admin         40.00 KiB
companyData   96.00 KiB
config       108.00 KiB
hospital      40.00 KiB
local        256.00 KiB
shop          96.00 KiB
shop> use bookRegistry;
switched to db bookRegistry
bookRegistry> db.authors.insertMany([
... {
... "name":"Krishna",
... "Age":33,
... "address":{
... "street":"Golok"
... }
... },
... {
... "name":"RadhaMayaa",
... "age":32,
... "address":{
... "street":"Golok Street"
... }
... }
... ])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('675c140af7a0226d0f1cda4f'),
    '1': ObjectId('675c140af7a0226d0f1cda50')
  }
}
bookRegistry> show collections;
authors
bookRegistry> db.authors.find()
[
  {
    _id: ObjectId('675c140af7a0226d0f1cda4f'),
    name: 'Krishna',
    Age: 33,
    address: { street: 'Golok' }
  },
  {
    _id: ObjectId('675c140af7a0226d0f1cda50'),
    name: 'RadhaMayaa',
    age: 32,
    address: { street: 'Golok Street' }
  }
]
bookRegistry> db.books.insertOne(
... {
... "name":"Bhagwat Gita",
... "author":[
... {
... "name":"krishna",
... "age":33,
... 
bookRegistry> db.books.insertOne(
... ... {
... ... "name":"Bhagwat Gita",
Uncaught:
SyntaxError: Unexpected token, expected "," (3:10)

  1 | db.books.insertOne(
  2 | ... {
> 3 | ... "name":"Bhagwat Gita",
    |           ^
  4 |

bookRegistry> ... "author":[
Uncaught:
SyntaxError: Unexpected token (1:0)

> 1 | ... "author":[
    | ^
  2 |

bookRegistry> ... {
Uncaught:
SyntaxError: Unexpected token (1:0)

> 1 | ... {
    | ^
  2 |

bookRegistry> ... "name":"krishna",
Uncaught:
SyntaxError: Unexpected token (1:0)

> 1 | ... "name":"krishna",
    | ^
  2 |

bookRegistry> ... "age":33,
Uncaught:
SyntaxError: Unexpected token (1:0)

> 1 | ... "age":33,
    | ^
  2 |

bookRegistry> ... 
Uncaught:
SyntaxError: Unexpected token (1:0)

> 1 | ... 
    | ^
  2 |

bookRegistry> db.books.insertOne(
... {
... "name":"Bhagwat Gitta",
... "author":[
... {
... "name":"krishna",
... "age":33
... },
... {
... "name":"RadhaMayya",
... "age":32
... }]})
{
  acknowledged: true,
  insertedId: ObjectId('675c16c0f7a0226d0f1cda51')
}
bookRegistry> show collections;
authors
books
bookRegistry> db.books.find(()
... db.books.find(()
bookRegistry> db.books.find()
[
  {
    _id: ObjectId('675c16c0f7a0226d0f1cda51'),
    name: 'Bhagwat Gitta',
    author: [ { name: 'krishna', age: 33 }, { name: 'RadhaMayya', age: 32 } ]
  }
]
bookRegistry> show collections;
authors
books
bookRegistry> show dbs;
Abhishek       72.00 KiB
Car            80.00 KiB
CityData      112.00 KiB
Flights       116.00 KiB
Support        88.00 KiB
admin          40.00 KiB
bookRegistry   80.00 KiB
companyData    96.00 KiB
config        108.00 KiB
hospital       40.00 KiB
local         256.00 KiB
shop           96.00 KiB
bookRegistry> show collections;
authors
books
bookRegistry> db.books.find()
[
  {
    _id: ObjectId('675c16c0f7a0226d0f1cda51'),
    name: 'Bhagwat Gitta',
    author: [ { name: 'krishna', age: 33 }, { name: 'RadhaMayya', age: 32 } ]
  }
]
bookRegistry> db.books.updateMany({},{$set:{"name":"Bhagwat Gitta","authors":[
... {
... "authid":ObjectId('675c140af7a0226d0f1cda4f')},
... {
... "authid":ObjectId('675c140af7a0226d0f1cda50')}]}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
bookRegistry> db.books.find()
[
  {
    _id: ObjectId('675c16c0f7a0226d0f1cda51'),
    name: 'Bhagwat Gitta',
    author: [ { name: 'krishna', age: 33 }, { name: 'RadhaMayya', age: 32 } ],
    authors: [
      { authid: ObjectId('675c140af7a0226d0f1cda4f') },
      { authid: ObjectId('675c140af7a0226d0f1cda50') }
    ]
  }
]
bookRegistry> db.authors.find()
[
  {
    _id: ObjectId('675c140af7a0226d0f1cda4f'),
    name: 'Krishna',
    Age: 33,
    address: { street: 'Golok' }
  },
  {
    _id: ObjectId('675c140af7a0226d0f1cda50'),
    name: 'RadhaMayaa',
    age: 32,
    address: { street: 'Golok Street' }
  }
]
bookRegistry> show collections;
authors
books
bookRegistry> db.authors.find()
[
  {
    _id: ObjectId('675c140af7a0226d0f1cda4f'),
    name: 'Krishna',
    Age: 33,
    address: { street: 'Golok' }
  },
  {
    _id: ObjectId('675c140af7a0226d0f1cda50'),
    name: 'RadhaMayaa',
    age: 32,
    address: { street: 'Golok Street' }
  }
]
bookRegistry> db.books.find()
[
  {
    _id: ObjectId('675c16c0f7a0226d0f1cda51'),
    name: 'Bhagwat Gitta',
    author: [ { name: 'krishna', age: 33 }, { name: 'RadhaMayya', age: 32 } ],
    authors: [
      { authid: ObjectId('675c140af7a0226d0f1cda4f') },
      { authid: ObjectId('675c140af7a0226d0f1cda50') }
    ]
  }
]
bookRegistry> db.dropDatabase()
{ ok: 1, dropped: 'bookRegistry' }
bookRegistry> show database()
MongoshInvalidInputError: [COMMON-10001] 'database()' is not a valid argument for "show".
bookRegistry> show database
MongoshInvalidInputError: [COMMON-10001] 'database' is not a valid argument for "show".
bookRegistry> show databases;
Abhishek      72.00 KiB
Car           80.00 KiB
CityData     112.00 KiB
Flights      116.00 KiB
Support       88.00 KiB
admin         40.00 KiB
companyData   96.00 KiB
config        72.00 KiB
hospital      40.00 KiB
local        256.00 KiB
shop          96.00 KiB
bookRegistry> db.books.insertOne(
... ... {
... ... "name":"Bhagwat Gitta",
Uncaught:
SyntaxError: Unexpected token, expected "," (3:10)

  1 | db.books.insertOne(
  2 | ... {
> 3 | ... "name":"Bhagwat Gitta",
    |           ^
  4 |

bookRegistry> ... "author":[
Uncaught:
SyntaxError: Unexpected token (1:0)

> 1 | ... "author":[
    | ^
  2 |

bookRegistry> ... {
Uncaught:
SyntaxError: Unexpected token (1:0)

> 1 | ... {
    | ^
  2 |

bookRegistry> ... "name":"krishna",
Uncaught:
SyntaxError: Unexpected token (1:0)

> 1 | ... "name":"krishna",
    | ^
  2 |

bookRegistry> ... "age":33
Uncaught:
SyntaxError: Unexpected token (1:0)

> 1 | ... "age":33
    | ^
  2 |

bookRegistry> ... },
Uncaught:
SyntaxError: Unexpected token (1:0)

> 1 | ... },
    | ^
  2 |

bookRegistry> ... {
Uncaught:
SyntaxError: Unexpected token (1:0)

> 1 | ... {
    | ^
  2 |

bookRegistry> ... "name":"RadhaMayya",
Uncaught:
SyntaxError: Unexpected token (1:0)

> 1 | ... "name":"RadhaMayya",
    | ^
  2 |

bookRegistry> ... "age":32
Uncaught:
SyntaxError: Unexpected token (1:0)

> 1 | ... "age":32
    | ^
  2 |

bookRegistry> ... }]})
Uncaught:
SyntaxError: Unexpected token (1:0)

> 1 | ... }]})
    | ^
  2 |

bookRegistry> db.authors.insertMany([
... {
... "name":"Krishna",
... 
... "age":33,
... "address":{"street":"Golok"}
... },
... {
... "name":"RadhaMayyaa",
... "age":32,
... "address":{"street":"Golok"}
... }
... ])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('675c2583f7a0226d0f1cda52'),
    '1': ObjectId('675c2583f7a0226d0f1cda53')
  }
}
bookRegistry> show collections;
authors
bookRegistry> show dbs;
Abhishek       72.00 KiB
Car            80.00 KiB
CityData      112.00 KiB
Flights       116.00 KiB
Support        88.00 KiB
admin          40.00 KiB
bookRegistry    8.00 KiB
companyData    96.00 KiB
config         72.00 KiB
hospital       40.00 KiB
local         256.00 KiB
shop           96.00 KiB
bookRegistry> db.authors.find()
[
  {
    _id: ObjectId('675c2583f7a0226d0f1cda52'),
    name: 'Krishna',
    age: 33,
    address: { street: 'Golok' }
  },
  {
    _id: ObjectId('675c2583f7a0226d0f1cda53'),
    name: 'RadhaMayyaa',
    age: 32,
    address: { street: 'Golok' }
  }
]
bookRegistry> db.books.insertOne(
... {
... "name":"Bhagwat Geeta",
... "authors":[
... "auth_id": ObjectId('675c2583f7a0226d0f1cda52'),
Uncaught:
SyntaxError: Unexpected token, expected "," (5:9)

  3 | "name":"Bhagwat Geeta",
  4 | "authors":[
> 5 | "auth_id": ObjectId('675c2583f7a0226d0f1cda52'),
    |          ^
  6 |

bookRegistry> db.books.insertOne( { "name":"Bhagwat Geeta", "authors":{ "auth_id": ObjectId('675c2583f7a0226d0f1cda52')},{"auth_id":ObjectId('675c2583f7a0226d0f1cda53')}})
Uncaught:
SyntaxError: Unexpected token (1:107)

> 1 | db.books.insertOne( { "name":"Bhagwat Geeta", "authors":{ "auth_id": ObjectId('675c2583f7a0226d0f1cda52')},{"auth_id":ObjectId('675c2583f7a0226d0f1cda53')}})
    |                                                                                                            ^
  2 |

bookRegistry> db.books.insertOne( { "name":"Bhagwat Geeta", "authors":[{ "auth_id": ObjectId('675c2583f7a0226d0f1cda52')},{"auth_id":ObjectId('675c2583f7a0226d0f1cda53')}]})
{
  acknowledged: true,
  insertedId: ObjectId('675c2689f7a0226d0f1cda54')
}
bookRegistry> db.books.find()
[
  {
    _id: ObjectId('675c2689f7a0226d0f1cda54'),
    name: 'Bhagwat Geeta',
    authors: [
      { auth_id: ObjectId('675c2583f7a0226d0f1cda52') },
      { auth_id: ObjectId('675c2583f7a0226d0f1cda53') }
    ]
  }
]
bookRegistry> "$lookup() opractice here "
$lookup() opractice here 
bookRegistry> show collections;
authors
books
bookRegistry> db.books.aggregate([
... {$lookup:{from:"authors",
... localField:"auth_id",
... foreignField:"_id"
... as:"Ceators"}}])
Uncaught:
SyntaxError: Unexpected token, expected "," (5:0)

  3 | localField:"auth_id",
  4 | foreignField:"_id"
> 5 | as:"Ceators"}}])
    | ^
  6 |

bookRegistry> db.books.aggregate([ {$lookup:{from:"authors", localField:"auth_id", foreignField:"_id", as:"Ceators"}}])
[
  {
    _id: ObjectId('675c2689f7a0226d0f1cda54'),
    name: 'Bhagwat Geeta',
    authors: [
      { auth_id: ObjectId('675c2583f7a0226d0f1cda52') },
      { auth_id: ObjectId('675c2583f7a0226d0f1cda53') }
    ],
    Ceators: []
  }
]
bookRegistry> show collections;
authors
books
bookRegistry> db.authors.find()
[
  {
    _id: ObjectId('675c2583f7a0226d0f1cda52'),
    name: 'Krishna',
    age: 33,
    address: { street: 'Golok' }
  },
  {
    _id: ObjectId('675c2583f7a0226d0f1cda53'),
    name: 'RadhaMayyaa',
    age: 32,
    address: { street: 'Golok' }
  }
]
bookRegistry> db.authors.find()
[
  {
    _id: ObjectId('675c2583f7a0226d0f1cda52'),
    name: 'Krishna',
    age: 33,
    address: { street: 'Golok' }
  },
  {
    _id: ObjectId('675c2583f7a0226d0f1cda53'),
    name: 'RadhaMayyaa',
    age: 32,
    address: { street: 'Golok' }
  }
]
bookRegistry>  db.books.aggregate([ {$lookup:{from:"authors", localField:"auth_id", foreignField:"_id", as:"Ceat
Uncaught:
SyntaxError: Unterminated string constant. (1:93)

> 1 |  db.books.aggregate([ {$lookup:{from:"authors", localField:"auth_id", foreignField:"_id", as:"Ceat
    |                                                                                              ^
  2 |

bookRegistry>  db.books.aggregate([{$lookup:{from:"authors", localField:"auth_id", foreignField:"_id", as:"Creators"}}])
[
  {
    _id: ObjectId('675c2689f7a0226d0f1cda54'),
    name: 'Bhagwat Geeta',
    authors: [
      { auth_id: ObjectId('675c2583f7a0226d0f1cda52') },
      { auth_id: ObjectId('675c2583f7a0226d0f1cda53') }
    ],
    Creators: []
  }
]
bookRegistry>  db.books.aggregate([{$lookup:{from:"authors",localField:" auth_id",foreignField:"_id", as:"Ceators"}}])
[
  {
    _id: ObjectId('675c2689f7a0226d0f1cda54'),
    name: 'Bhagwat Geeta',
    authors: [
      { auth_id: ObjectId('675c2583f7a0226d0f1cda52') },
      { auth_id: ObjectId('675c2583f7a0226d0f1cda53') }
    ],
    Ceators: []
  }
]
bookRegistry>  db.books.aggregate([{$lookup:{from:"authors",localField:" auth_id",foreignField:"_id", as:"Creators"}}])
[
  {
    _id: ObjectId('675c2689f7a0226d0f1cda54'),
    name: 'Bhagwat Geeta',
    authors: [
      { auth_id: ObjectId('675c2583f7a0226d0f1cda52') },
      { auth_id: ObjectId('675c2583f7a0226d0f1cda53') }
    ],
    Creators: []
  }
]
bookRegistry> db.authors.find()
[
  {
    _id: ObjectId('675c2583f7a0226d0f1cda52'),
    name: 'Krishna',
    age: 33,
    address: { street: 'Golok' }
  },
  {
    _id: ObjectId('675c2583f7a0226d0f1cda53'),
    name: 'RadhaMayyaa',
    age: 32,
    address: { street: 'Golok' }
  }
]
bookRegistry> sho dbs;
Uncaught:
SyntaxError: Missing semicolon. (1:3)

> 1 | sho dbs;
    |    ^
  2 |

bookRegistry> show  dbs;
Abhishek       72.00 KiB
Car            80.00 KiB
CityData      112.00 KiB
Flights       116.00 KiB
Support        88.00 KiB
admin          40.00 KiB
bookRegistry   80.00 KiB
companyData    96.00 KiB
config         96.00 KiB
hospital       40.00 KiB
local         256.00 KiB
shop           96.00 KiB
bookRegistry> use Book
switched to db Book
Book> show collections;

Book> db.books.insertOne(
... {
... "_id":"id1",
... "name":"Bhagwat Geeta"
... })
{ acknowledged: true, insertedId: 'id1' }
Book> show collections;
books
Book> db.books.find()
[ { _id: 'id1', name: 'Bhagwat Geeta' } ]
Book> db.books.insertOne( { "_id": "id2", "name": "Ramayan" })
{ acknowledged: true, insertedId: 'id2' }
Book> db.books.find()
[
  { _id: 'id1', name: 'Bhagwat Geeta' },
  { _id: 'id2', name: 'Ramayan' }
]
Book> db.customers.insertOne(
... {
... "username":"Abhishek",
... "favBook":['id1','id2']
... })
{
  acknowledged: true,
  insertedId: ObjectId('675c2a45f7a0226d0f1cda55')
}
Book> show collections;
books
customers
Book> db.customers.find()
[
  {
    _id: ObjectId('675c2a45f7a0226d0f1cda55'),
    username: 'Abhishek',
    favBook: [ 'id1', 'id2' ]
  }
]
Book> db.books.find()
[
  { _id: 'id1', name: 'Bhagwat Geeta' },
  { _id: 'id2', name: 'Ramayan' }
]
Book> db.customers.aggregate([{$lookup:{from:"books",localField:"favBook",foreignField:"_id",as:"favBookData"}}])
[
  {
    _id: ObjectId('675c2a45f7a0226d0f1cda55'),
    username: 'Abhishek',
    favBook: [ 'id1', 'id2' ],
    favBookData: [
      { _id: 'id1', name: 'Bhagwat Geeta' },
      { _id: 'id2', name: 'Ramayan' }
    ]
  }
]
Book> show collections;
books
customers
Book> show dbs;
Abhishek       72.00 KiB
Book          112.00 KiB
Car            80.00 KiB
CityData      112.00 KiB
Flights       116.00 KiB
Support        88.00 KiB
admin          40.00 KiB
bookRegistry   80.00 KiB
companyData    96.00 KiB
config        108.00 KiB
hospital       40.00 KiB
local         256.00 KiB
shop           96.00 KiB
Book> use bookRegistry
switched to db bookRegistry
bookRegistry> show collections
authors
books
bookRegistry> db.authors.find()
[
  {
    _id: ObjectId('675c2583f7a0226d0f1cda52'),
    name: 'Krishna',
    age: 33,
    address: { street: 'Golok' }
  },
  {
    _id: ObjectId('675c2583f7a0226d0f1cda53'),
    name: 'RadhaMayyaa',
    age: 32,
    address: { street: 'Golok' }
  }
]
bookRegistry> db.books.find()
[
  {
    _id: ObjectId('675c2689f7a0226d0f1cda54'),
    name: 'Bhagwat Geeta',
    authors: [
      { auth_id: ObjectId('675c2583f7a0226d0f1cda52') },
      { auth_id: ObjectId('675c2583f7a0226d0f1cda53') }
    ]
  }
]
bookRegistry> db.books.aggregate([{$lookup:{from:"authors",localField:"authors",foreignField:"_id",as:"Creators"}}])
[
  {
    _id: ObjectId('675c2689f7a0226d0f1cda54'),
    name: 'Bhagwat Geeta',
    authors: [
      { auth_id: ObjectId('675c2583f7a0226d0f1cda52') },
      { auth_id: ObjectId('675c2583f7a0226d0f1cda53') }
    ],
    Creators: []
  }
]
bookRegistry> db.books.aggregate([{$lookup:{from:"authors",localField:"authors.auth_id",foreignField:"_id",as:"Creators"}}])
[
  {
    _id: ObjectId('675c2689f7a0226d0f1cda54'),
    name: 'Bhagwat Geeta',
    authors: [
      { auth_id: ObjectId('675c2583f7a0226d0f1cda52') },
      { auth_id: ObjectId('675c2583f7a0226d0f1cda53') }
    ],
    Creators: [
      {
        _id: ObjectId('675c2583f7a0226d0f1cda52'),
        name: 'Krishna',
        age: 33,
        address: { street: 'Golok' }
      },
      {
        _id: ObjectId('675c2583f7a0226d0f1cda53'),
        name: 'RadhaMayyaa',
        age: 32,
        address: { street: 'Golok' }
      }
    ]
  }
]
bookRegistry> show collections;
authors
books
bookRegistry> db.authors.find()
[
  {
    _id: ObjectId('675c2583f7a0226d0f1cda52'),
    name: 'Krishna',
    age: 33,
    address: { street: 'Golok' }
  },
  {
    _id: ObjectId('675c2583f7a0226d0f1cda53'),
    name: 'RadhaMayyaa',
    age: 32,
    address: { street: 'Golok' }
  }
]
bookRegistry> db.books.find()
[
  {
    _id: ObjectId('675c2689f7a0226d0f1cda54'),
    name: 'Bhagwat Geeta',
    authors: [
      { auth_id: ObjectId('675c2583f7a0226d0f1cda52') },
      { auth_id: ObjectId('675c2583f7a0226d0f1cda53') }
    ]
  }
]
bookRegistry> show databases;
Abhishek       72.00 KiB
Book          112.00 KiB
Car            80.00 KiB
CityData      112.00 KiB
Flights       116.00 KiB
Support        88.00 KiB
admin          40.00 KiB
bookRegistry   80.00 KiB
companyData    96.00 KiB
config         96.00 KiB
hospital       40.00 KiB
local         256.00 KiB
shop           96.00 KiB
bookRegistry> use Support
switched to db Support
Support> show collections
answer
questionThread
Support> sho dbs;
Uncaught:
SyntaxError: Missing semicolon. (1:3)

> 1 | sho dbs;
    |    ^
  2 |

Support> show dbs;
Abhishek       72.00 KiB
Book          112.00 KiB
Car            80.00 KiB
CityData      112.00 KiB
Flights       116.00 KiB
Support        88.00 KiB
admin          40.00 KiB
bookRegistry   80.00 KiB
companyData    96.00 KiB
config         96.00 KiB
hospital       40.00 KiB
local         256.00 KiB
shop           96.00 KiB
Support> use School
switched to db School
School> db.students.insertMany([
... {
... "name":"Abhishek Tyagi",
... "age":23,
... "address":{"street":"Hanuman Gali"},{"Village":"Chappar"}
Uncaught:
SyntaxError: Unexpected token (5:36)

  3 | "name":"Abhishek Tyagi",
  4 | "age":23,
> 5 | "address":{"street":"Hanuman Gali"},{"Village":"Chappar"}
    |                                     ^
  6 |

School>  db.books.aggregate([ {$lookup:{from:"authors", localField:"auth_id", foreignField:"_id", as:"Ceator
Uncaught:
SyntaxError: Unterminated string constant. (1:93)

> 1 |  db.books.aggregate([ {$lookup:{from:"authors", localField:"auth_id", foreignField:"_id", as:"Ceator
    |                                                                                              ^
  2 |

School> show collections;

School> db.students.insertMany([
... {
... "name":"Abhishek Tyagi",
... "age":23,
... "Address":[{"street":"Hanuman Gali"},{"Village":"Chhapar"}]}
... ,
... {
... "name":"Lavish Tyagi
Uncaught:
SyntaxError: Unterminated string constant. (8:7)

  6 | ,
  7 | {
> 8 | "name":"Lavish Tyagi
    |        ^
  9 |

School> db.students.insertMany([ { "name":"Abhishek Tyagi", "age":23, "Address":[{"street":"Hanuman Gali"},{"Village":"Chhapar"}]} , {"name":"Lavish Tyagi","age":23,"address":"Panna"}})
Uncaught:
SyntaxError: Unexpected token, expected "," (1:175)

> 1 | db.students.insertMany([ { "name":"Abhishek Tyagi", "age":23, "Address":[{"street":"Hanuman Gali"},{"Village":"Chhapar"}]} , {"name":"Lavish Tyagi","age":23,"address":"Panna"}})
    |                                                                                                                                                                                ^
  2 |

School> db.students.insertMany([ { "name":"Abhishek Tyagi", "age":23, "Address":[{"street":"Hanuman Gali"},{"Village":"Chhapar"}]} , {"name":"Lavish Tyagi","age":23,"address":"Panna"}])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('675eb1caf7a0226d0f1cda56'),
    '1': ObjectId('675eb1caf7a0226d0f1cda57')
  }
}
School> show collections
students
School> db.students.find()
[
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda56'),
    name: 'Abhishek Tyagi',
    age: 23,
    Address: [ { street: 'Hanuman Gali' }, { Village: 'Chhapar' } ]
  },
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda57'),
    name: 'Lavish Tyagi',
    age: 23,
    address: 'Panna'
  }
]
School> db.teachers.insertMany([
... {
... "name":"RadhaMayaa",
... "age":45,
... "Salary":234567,
... "Address"[{"Street":"Golok Gali"},{"Village":"Golok"}]
Uncaught:
SyntaxError: Unexpected token (6:9)

  4 | "age":45,
  5 | "Salary":234567,
> 6 | "Address"[{"Street":"Golok Gali"},{"Village":"Golok"}]
    |          ^
  7 |

School> db.teachers.insertMany([ { "name":"RadhaMayaa", "age":45, "Salary":234567, "Address":[{"Street":"Golok Gali"},{"Village":"Golok"}]},{"name":"Krishna","Age":47,"Salary":123456,"address":"Golok"}])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('675eb2ebf7a0226d0f1cda58'),
    '1': ObjectId('675eb2ebf7a0226d0f1cda59')
  }
}
School> show collections
students
teachers
School> db.teachers.find()
[
  {
    _id: ObjectId('675eb2ebf7a0226d0f1cda58'),
    name: 'RadhaMayaa',
    age: 45,
    Salary: 234567,
    Address: [ { Street: 'Golok Gali' }, { Village: 'Golok' } ]
  },
  {
    _id: ObjectId('675eb2ebf7a0226d0f1cda59'),
    name: 'Krishna',
    Age: 47,
    Salary: 123456,
    address: 'Golok'
  }
]
School> show collections;'
MongoshInvalidInputError: [COMMON-10001] 'collections;'' is not a valid argument for "show".
School> show collections;
students
teachers
School> db.students.find()
[
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda56'),
    name: 'Abhishek Tyagi',
    age: 23,
    Address: [ { street: 'Hanuman Gali' }, { Village: 'Chhapar' } ]
  },
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda57'),
    name: 'Lavish Tyagi',
    age: 23,
    address: 'Panna'
  }
]
School> db.students.updateMany({age:23},{$set:{"tid:"ObjectId('675eb2ebf7a0226d0f1cda58')}})
Uncaught:
SyntaxError: Unexpected token (1:45)

> 1 | db.students.updateMany({age:23},{$set:{"tid:"ObjectId('675eb2ebf7a0226d0f1cda58')}})
    |                                              ^
  2 |

School> db.students.updateOne({age:23},{$set:{"tid:"ObjectId('675eb2ebf7a0226d0f1cda58')}})
Uncaught:
SyntaxError: Unexpected token (1:44)

> 1 | db.students.updateOne({age:23},{$set:{"tid:"ObjectId('675eb2ebf7a0226d0f1cda58')}})
    |                                             ^
  2 |

School> db.students.updateOne({"age":"23"},{$set:{"tid:"ObjectId('675eb2ebf7a0226d0f1cda58')}})
Uncaught:
SyntaxError: Unexpected token (1:48)

> 1 | db.students.updateOne({"age":"23"},{$set:{"tid:"ObjectId('675eb2ebf7a0226d0f1cda58')}})
    |                                                 ^
  2 |

School> db.students.updateOne({age:23},{$set:{"tid":ObjectId('675eb2ebf7a0226d0f1cda58')}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
School> db.students.findOne()
{
  _id: ObjectId('675eb1caf7a0226d0f1cda56'),
  name: 'Abhishek Tyagi',
  age: 23,
  Address: [ { street: 'Hanuman Gali' }, { Village: 'Chhapar' } ],
  tid: ObjectId('675eb2ebf7a0226d0f1cda58')
}
School> db.students.find()
[
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda56'),
    name: 'Abhishek Tyagi',
    age: 23,
    Address: [ { street: 'Hanuman Gali' }, { Village: 'Chhapar' } ],
    tid: ObjectId('675eb2ebf7a0226d0f1cda58')
  },
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda57'),
    name: 'Lavish Tyagi',
    age: 23,
    address: 'Panna'
  }
]
School> show collections
students
teachers
School> db.teachers.find()
[
  {
    _id: ObjectId('675eb2ebf7a0226d0f1cda58'),
    name: 'RadhaMayaa',
    age: 45,
    Salary: 234567,
    Address: [ { Street: 'Golok Gali' }, { Village: 'Golok' } ]
  },
  {
    _id: ObjectId('675eb2ebf7a0226d0f1cda59'),
    name: 'Krishna',
    Age: 47,
    Salary: 123456,
    address: 'Golok'
  }
]
School> db.students.aggregate([{$lookup:{from:"teachers",
... localField:"tid",
... foreignField:"_id",
... as:"MayaaPitasiri"}}]
... 
... )
[
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda56'),
    name: 'Abhishek Tyagi',
    age: 23,
    Address: [ { street: 'Hanuman Gali' }, { Village: 'Chhapar' } ],
    tid: ObjectId('675eb2ebf7a0226d0f1cda58'),
    MayaaPitasiri: [
      {
        _id: ObjectId('675eb2ebf7a0226d0f1cda58'),
        name: 'RadhaMayaa',
        age: 45,
        Salary: 234567,
        Address: [ { Street: 'Golok Gali' }, { Village: 'Golok' } ]
      }
    ]
  },
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda57'),
    name: 'Lavish Tyagi',
    age: 23,
    address: 'Panna',
    MayaaPitasiri: []
  }
]
School> show collections;
students
teachers
School> db.students.find()
[
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda56'),
    name: 'Abhishek Tyagi',
    age: 23,
    Address: [ { street: 'Hanuman Gali' }, { Village: 'Chhapar' } ],
    tid: ObjectId('675eb2ebf7a0226d0f1cda58')
  },
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda57'),
    name: 'Lavish Tyagi',
    age: 23,
    address: 'Panna'
  }
]
School> db.teachers.find()
[
  {
    _id: ObjectId('675eb2ebf7a0226d0f1cda58'),
    name: 'RadhaMayaa',
    age: 45,
    Salary: 234567,
    Address: [ { Street: 'Golok Gali' }, { Village: 'Golok' } ]
  },
  {
    _id: ObjectId('675eb2ebf7a0226d0f1cda59'),
    name: 'Krishna',
    Age: 47,
    Salary: 123456,
    address: 'Golok'
  }
]
School> db.students.aggregate([{$lookup:{from:"teachers",
... 
School> db.students.updateOne({age:23},{$set:{"tid":ObjectId('675eb2ebf7a0226d0f1cda59')}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
School> db.students.find()
[
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda56'),
    name: 'Abhishek Tyagi',
    age: 23,
    Address: [ { street: 'Hanuman Gali' }, { Village: 'Chhapar' } ],
    tid: ObjectId('675eb2ebf7a0226d0f1cda59')
  },
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda57'),
    name: 'Lavish Tyagi',
    age: 23,
    address: 'Panna'
  }
]
School> db.students.aggregate([{$lookup:{from:"teachers",
... localField:"tid",
... foreignField:"_id",
... as "MayaaPitasiri"}}])
Uncaught:
SyntaxError: Unexpected token, expected "," (4:3)

  2 | localField:"tid",
  3 | foreignField:"_id",
> 4 | as "MayaaPitasiri"}}])
    |    ^
  5 |

School> db.students.aggregate([{$lookup:{from:"teachers", localField:"tid", foreignField:"_id", as: "MayaaPitasiri"}}])
[
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda56'),
    name: 'Abhishek Tyagi',
    age: 23,
    Address: [ { street: 'Hanuman Gali' }, { Village: 'Chhapar' } ],
    tid: ObjectId('675eb2ebf7a0226d0f1cda59'),
    MayaaPitasiri: [
      {
        _id: ObjectId('675eb2ebf7a0226d0f1cda59'),
        name: 'Krishna',
        Age: 47,
        Salary: 123456,
        address: 'Golok'
      }
    ]
  },
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda57'),
    name: 'Lavish Tyagi',
    age: 23,
    address: 'Panna',
    MayaaPitasiri: []
  }
]
School> db.students.updateOne({name:"Lavish Tyagi"},{$set:{"tid":ObjectId('675eb2ebf7a0226d0f1cda58')}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
School> db.students.find()
[
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda56'),
    name: 'Abhishek Tyagi',
    age: 23,
    Address: [ { street: 'Hanuman Gali' }, { Village: 'Chhapar' } ],
    tid: ObjectId('675eb2ebf7a0226d0f1cda59')
  },
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda57'),
    name: 'Lavish Tyagi',
    age: 23,
    address: 'Panna',
    tid: ObjectId('675eb2ebf7a0226d0f1cda58')
  }
]
School> db.students.aggregate([{$lookup:{from:"teachers",
... localField:"tid",
... foreignField"_id",
Uncaught:
SyntaxError: Unexpected token, expected "," (3:12)

  1 | db.students.aggregate([{$lookup:{from:"teachers",
  2 | localField:"tid",
> 3 | foreignField"_id",
    |             ^
  4 |

School> db.students.aggregate([{$lookup:{from:"teachers", localField:"tid", foreignField:"_id", as:"MayaPitasiri"}}])
[
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda56'),
    name: 'Abhishek Tyagi',
    age: 23,
    Address: [ { street: 'Hanuman Gali' }, { Village: 'Chhapar' } ],
    tid: ObjectId('675eb2ebf7a0226d0f1cda59'),
    MayaPitasiri: [
      {
        _id: ObjectId('675eb2ebf7a0226d0f1cda59'),
        name: 'Krishna',
        Age: 47,
        Salary: 123456,
        address: 'Golok'
      }
    ]
  },
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda57'),
    name: 'Lavish Tyagi',
    age: 23,
    address: 'Panna',
    tid: ObjectId('675eb2ebf7a0226d0f1cda58'),
    MayaPitasiri: [
      {
        _id: ObjectId('675eb2ebf7a0226d0f1cda58'),
        name: 'RadhaMayaa',
        age: 45,
        Salary: 234567,
        Address: [ { Street: 'Golok Gali' }, { Village: 'Golok' } ]
      }
    ]
  }
]
School> db.students.find()
[
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda56'),
    name: 'Abhishek Tyagi',
    age: 23,
    Address: [ { street: 'Hanuman Gali' }, { Village: 'Chhapar' } ],
    tid: ObjectId('675eb2ebf7a0226d0f1cda59')
  },
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda57'),
    name: 'Lavish Tyagi',
    age: 23,
    address: 'Panna',
    tid: ObjectId('675eb2ebf7a0226d0f1cda58')
  }
]
School> db.students.replaceOne({_id: ObjectId('675eb1caf7a0226d0f1cda56')},{$set:{"name":"Lavish Tyagi"}})
MongoInvalidArgumentError: Replacement document must not contain atomic operators
School> db.students.replaceOne({_id: ObjectId('675eb1caf7a0226d0f1cda56')},{{"name":"Lavish Tyagi"}})
Uncaught:
SyntaxError: Unexpected token (1:68)

> 1 | db.students.replaceOne({_id: ObjectId('675eb1caf7a0226d0f1cda56')},{{"name":"Lavish Tyagi"}})
    |                                                                     ^
  2 |

School> db.students.replaceOne({_id: ObjectId('675eb1caf7a0226d0f1cda56')},{"name":"Lavish Tyagi"}})
Uncaught:
SyntaxError: Unexpected token, expected "," (1:90)

> 1 | db.students.replaceOne({_id: ObjectId('675eb1caf7a0226d0f1cda56')},{"name":"Lavish Tyagi"}})
    |                                                                                           ^
  2 |

School> db.students.replaceOne({_id: ObjectId('675eb1caf7a0226d0f1cda56')},{"name":"Lavish Tyagi"})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
School> db.students.find()
[
  { _id: ObjectId('675eb1caf7a0226d0f1cda56'), name: 'Lavish Tyagi' },
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda57'),
    name: 'Lavish Tyagi',
    age: 23,
    address: 'Panna',
    tid: ObjectId('675eb2ebf7a0226d0f1cda58')
  }
]
School> db.students.updateOne({name:"Lavish Tyagi"},{$set:{"age":23,"address":"panna"}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
School> show collections;
students
teachers
School> dn]b.students.find()
Uncaught:
SyntaxError: Missing semicolon. (1:2)

> 1 | dn]b.students.find()
    |   ^
  2 |

School> db.students.find()
[
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda56'),
    name: 'Lavish Tyagi',
    address: 'panna',
    age: 23
  },
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda57'),
    name: 'Lavish Tyagi',
    age: 23,
    address: 'Panna',
    tid: ObjectId('675eb2ebf7a0226d0f1cda58')
  }
]
School> db.students.updateOne({name:"Lavish Tyagi"},{$set:{"tid":'675eb2ebf7a0226d0f1cda59'}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
School> db.students.find()
[
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda56'),
    name: 'Lavish Tyagi',
    address: 'panna',
    age: 23,
    tid: '675eb2ebf7a0226d0f1cda59'
  },
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda57'),
    name: 'Lavish Tyagi',
    age: 23,
    address: 'Panna',
    tid: ObjectId('675eb2ebf7a0226d0f1cda58')
  }
]
School> db.students.updateOne({name:"Lavish Tyagi"},{$set:{"tid":'675eb2ebf7a0226d0f1cda58'}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
School> db.students.find()
[
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda56'),
    name: 'Lavish Tyagi',
    address: 'panna',
    age: 23,
    tid: '675eb2ebf7a0226d0f1cda58'
  },
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda57'),
    name: 'Lavish Tyagi',
    age: 23,
    address: 'Panna',
    tid: ObjectId('675eb2ebf7a0226d0f1cda58')
  }
]
School> db.students.updateOne({_id: ObjectId('675eb1caf7a0226d0f1cda57')},{$set:{"tid":'675eb2ebf7a0226d0f1cda58'}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
School> db.students.find()
[
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda56'),
    name: 'Lavish Tyagi',
    address: 'panna',
    age: 23,
    tid: '675eb2ebf7a0226d0f1cda58'
  },
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda57'),
    name: 'Lavish Tyagi',
    age: 23,
    address: 'Panna',
    tid: '675eb2ebf7a0226d0f1cda58'
  }
]
School> db.students.updateOne({_id: ObjectId('675eb1caf7a0226d0f1cda57')},{$set:{"tid":'675eb2ebf7a0226d0f1cda59'}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
School> db.students.find()
[
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda56'),
    name: 'Lavish Tyagi',
    address: 'panna',
    age: 23,
    tid: '675eb2ebf7a0226d0f1cda58'
  },
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda57'),
    name: 'Lavish Tyagi',
    age: 23,
    address: 'Panna',
    tid: '675eb2ebf7a0226d0f1cda59'
  }
]
School> db.students.replaceOne({_id: ObjectId('675eb1caf7a0226d0f1cda56')},{"name":"Abhishek Tyagi","age":23,"Address":[{"street":"Hanuman Gali"},{"Village":"Chhapar"}]})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
School> db.students.find()
[
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda56'),
    name: 'Abhishek Tyagi',
    age: 23,
    Address: [ { street: 'Hanuman Gali' }, { Village: 'Chhapar' } ]
  },
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda57'),
    name: 'Lavish Tyagi',
    age: 23,
    address: 'Panna',
    tid: '675eb2ebf7a0226d0f1cda59'
  }
]
School> db.students.replaceOne({_id: ObjectId('675eb1caf7a0226d0f1cda56')},{$set:tid:675eb2ebf7a0226d0f1cda58})
Uncaught:
SyntaxError: Unexpected token, expected "," (1:76)

> 1 | db.students.replaceOne({_id: ObjectId('675eb1caf7a0226d0f1cda56')},{$set:tid:675eb2ebf7a0226d0f1cda58})
    |                                                                             ^
  2 |

School> db.students.replaceOne({_id: ObjectId('675eb1caf7a0226d0f1cda56')},{$set:{tid:"675eb2ebf7a0226d0f1cda58"})
Uncaught:
SyntaxError: Unexpected token, expected "," (1:105)

> 1 | db.students.replaceOne({_id: ObjectId('675eb1caf7a0226d0f1cda56')},{$set:{tid:"675eb2ebf7a0226d0f1cda58"})
    |                                                                                                          ^
  2 |

School> db.students.replaceOne({_id: ObjectId('675eb1caf7a0226d0f1cda56')},{$set:{tid:"675eb2ebf7a0226d0f1cda58"}})
MongoInvalidArgumentError: Replacement document must not contain atomic operators
School> db.students.updateOne({_id: ObjectId('675eb1caf7a0226d0f1cda56')},{$set:{tid:"675eb2ebf7a0226d0f1cda58"}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
School> db.students.find()
[
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda56'),
    name: 'Abhishek Tyagi',
    age: 23,
    Address: [ { street: 'Hanuman Gali' }, { Village: 'Chhapar' } ],
    tid: '675eb2ebf7a0226d0f1cda58'
  },
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda57'),
    name: 'Lavish Tyagi',
    age: 23,
    address: 'Panna',
    tid: '675eb2ebf7a0226d0f1cda59'
  }
]
School> db.students.aggregate([{$lookup:{from:"teachers",
... localField:"tid",
... foreignField:"_id",
... as:"MayyaPitasiri"}}])
[
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda56'),
    name: 'Abhishek Tyagi',
    age: 23,
    Address: [ { street: 'Hanuman Gali' }, { Village: 'Chhapar' } ],
    tid: '675eb2ebf7a0226d0f1cda58',
    MayyaPitasiri: []
  },
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda57'),
    name: 'Lavish Tyagi',
    age: 23,
    address: 'Panna',
    tid: '675eb2ebf7a0226d0f1cda59',
    MayyaPitasiri: []
  }
]
School> db.teachers;
School.teachers
School> db.teachers.find()
[
  {
    _id: ObjectId('675eb2ebf7a0226d0f1cda58'),
    name: 'RadhaMayaa',
    age: 45,
    Salary: 234567,
    Address: [ { Street: 'Golok Gali' }, { Village: 'Golok' } ]
  },
  {
    _id: ObjectId('675eb2ebf7a0226d0f1cda59'),
    name: 'Krishna',
    Age: 47,
    Salary: 123456,
    address: 'Golok'
  }
]
School> db.students.aggregate([{ $lookup: { from: "teachers", localField: "tid", foreignField: "_id", as: "MayyaPitasiri"}}])
[
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda56'),
    name: 'Abhishek Tyagi',
    age: 23,
    Address: [ { street: 'Hanuman Gali' }, { Village: 'Chhapar' } ],
    tid: '675eb2ebf7a0226d0f1cda58',
    MayyaPitasiri: []
  },
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda57'),
    name: 'Lavish Tyagi',
    age: 23,
    address: 'Panna',
    tid: '675eb2ebf7a0226d0f1cda59',
    MayyaPitasiri: []
  }
]
School> db.students;
School.students
School> db.students.find()
[
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda56'),
    name: 'Abhishek Tyagi',
    age: 23,
    Address: [ { street: 'Hanuman Gali' }, { Village: 'Chhapar' } ],
    tid: '675eb2ebf7a0226d0f1cda58'
  },
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda57'),
    name: 'Lavish Tyagi',
    age: 23,
    address: 'Panna',
    tid: '675eb2ebf7a0226d0f1cda59'
  }
]
School> db.teachers.find()
[
  {
    _id: ObjectId('675eb2ebf7a0226d0f1cda58'),
    name: 'RadhaMayaa',
    age: 45,
    Salary: 234567,
    Address: [ { Street: 'Golok Gali' }, { Village: 'Golok' } ]
  },
  {
    _id: ObjectId('675eb2ebf7a0226d0f1cda59'),
    name: 'Krishna',
    Age: 47,
    Salary: 123456,
    address: 'Golok'
  }
]
School> db.students.aggregate([{ $lookup: { from: "teachers", localField: "tid", foreignField: "_id", as: "MayyaPitasir
School> 

School> db.students.find()
[
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda56'),
    name: 'Abhishek Tyagi',
    age: 23,
    Address: [ { street: 'Hanuman Gali' }, { Village: 'Chhapar' } ],
    tid: '675eb2ebf7a0226d0f1cda58'
  },
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda57'),
    name: 'Lavish Tyagi',
    age: 23,
    address: 'Panna',
    tid: '675eb2ebf7a0226d0f1cda59'
  }
]
School> show collections;
students
teachers
School> db.students.find()
[
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda56'),
    name: 'Abhishek Tyagi',
    age: 23,
    Address: [ { street: 'Hanuman Gali' }, { Village: 'Chhapar' } ],
    tid: '675eb2ebf7a0226d0f1cda58'
  },
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda57'),
    name: 'Lavish Tyagi',
    age: 23,
    address: 'Panna',
    tid: '675eb2ebf7a0226d0f1cda59'
  }
]
School> db.teachers.find()
[
  {
    _id: ObjectId('675eb2ebf7a0226d0f1cda58'),
    name: 'RadhaMayaa',
    age: 45,
    Salary: 234567,
    Address: [ { Street: 'Golok Gali' }, { Village: 'Golok' } ]
  },
  {
    _id: ObjectId('675eb2ebf7a0226d0f1cda59'),
    name: 'Krishna',
    Age: 47,
    Salary: 123456,
    address: 'Golok'
  }
]
School> db.students.aggregate([{ $lookup: { from: "teachers", localField: "tid", foreignField: "_id", as: "MayyaPitasiri"}}])
[
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda56'),
    name: 'Abhishek Tyagi',
    age: 23,
    Address: [ { street: 'Hanuman Gali' }, { Village: 'Chhapar' } ],
    tid: '675eb2ebf7a0226d0f1cda58',
    MayyaPitasiri: []
  },
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda57'),
    name: 'Lavish Tyagi',
    age: 23,
    address: 'Panna',
    tid: '675eb2ebf7a0226d0f1cda59',
    MayyaPitasiri: []
  }
]
School> show collections;
students
teachers
School> db.students;
School.students
School> db.students.find();
[
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda56'),
    name: 'Abhishek Tyagi',
    age: 23,
    Address: [ { street: 'Hanuman Gali' }, { Village: 'Chhapar' } ],
    tid: '675eb2ebf7a0226d0f1cda58'
  },
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda57'),
    name: 'Lavish Tyagi',
    age: 23,
    address: 'Panna',
    tid: '675eb2ebf7a0226d0f1cda59'
  }
]
School> db.teachers.find();
[
  {
    _id: ObjectId('675eb2ebf7a0226d0f1cda58'),
    name: 'RadhaMayaa',
    age: 45,
    Salary: 234567,
    Address: [ { Street: 'Golok Gali' }, { Village: 'Golok' } ]
  },
  {
    _id: ObjectId('675eb2ebf7a0226d0f1cda59'),
    name: 'Krishna',
    Age: 47,
    Salary: 123456,
    address: 'Golok'
  }
]
School> db.students.replaceOne({tid: '675eb2ebf7a0226d0f1cda58'},{"name":"Abhishek Tyagi","Age":23,"Address":[{"street":"Hanuman Gali"},{"Village":"Chhapar"}],"tid":ObjectId('675eb2ebf7a0226d0f1cda58')})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
School> show collections;
students
teachers
School> db.students.find()
[
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda56'),
    name: 'Abhishek Tyagi',
    Age: 23,
    Address: [ { street: 'Hanuman Gali' }, { Village: 'Chhapar' } ],
    tid: ObjectId('675eb2ebf7a0226d0f1cda58')
  },
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda57'),
    name: 'Lavish Tyagi',
    age: 23,
    address: 'Panna',
    tid: '675eb2ebf7a0226d0f1cda59'
  }
]
School> db.students.replaceOne({tid: '675eb2ebf7a0226d0f1cda59'},{"name":"Lavish Tyagi","Age":23,"Address":"Panna","tid":ObjectId('675eb2ebf7a0226d0f1cda59')})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
School> show collections;
students
teachers
School> db.students.find()
[
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda56'),
    name: 'Abhishek Tyagi',
    Age: 23,
    Address: [ { street: 'Hanuman Gali' }, { Village: 'Chhapar' } ],
    tid: ObjectId('675eb2ebf7a0226d0f1cda58')
  },
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda57'),
    name: 'Lavish Tyagi',
    Age: 23,
    Address: 'Panna',
    tid: ObjectId('675eb2ebf7a0226d0f1cda59')
  }
]
School> db.students.aggregate([{$lookup:{from:"teachers",
... localField:"tid",
... foreignField:"_id",
... as "MayyaRadha"}}])
Uncaught:
SyntaxError: Unexpected token, expected "," (4:3)

  2 | localField:"tid",
  3 | foreignField:"_id",
> 4 | as "MayyaRadha"}}])
    |    ^
  5 |

School> db.students.aggregate([{$lookup:{from:"teachers", localField:"tid", foreignField:"_id", as:"MayyaRadha"}}])
[
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda56'),
    name: 'Abhishek Tyagi',
    Age: 23,
    Address: [ { street: 'Hanuman Gali' }, { Village: 'Chhapar' } ],
    tid: ObjectId('675eb2ebf7a0226d0f1cda58'),
    MayyaRadha: [
      {
        _id: ObjectId('675eb2ebf7a0226d0f1cda58'),
        name: 'RadhaMayaa',
        age: 45,
        Salary: 234567,
        Address: [ { Street: 'Golok Gali' }, { Village: 'Golok' } ]
      }
    ]
  },
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda57'),
    name: 'Lavish Tyagi',
    Age: 23,
    Address: 'Panna',
    tid: ObjectId('675eb2ebf7a0226d0f1cda59'),
    MayyaRadha: [
      {
        _id: ObjectId('675eb2ebf7a0226d0f1cda59'),
        name: 'Krishna',
        Age: 47,
        Salary: 123456,
        address: 'Golok'
      }
    ]
  }
]
School> show dbs;
Abhishek       72.00 KiB
Book          112.00 KiB
Car            80.00 KiB
CityData      112.00 KiB
Flights       116.00 KiB
School         96.00 KiB
Support        88.00 KiB
admin          40.00 KiB
bookRegistry   80.00 KiB
companyData    96.00 KiB
config         72.00 KiB
hospital       40.00 KiB
local         256.00 KiB
shop           96.00 KiB
School> use School
already on db School
School> show collections;
students
teachers
School> db.students.find()
[
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda56'),
    name: 'Abhishek Tyagi',
    Age: 23,
    Address: [ { street: 'Hanuman Gali' }, { Village: 'Chhapar' } ],
    tid: ObjectId('675eb2ebf7a0226d0f1cda58')
  },
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda57'),
    name: 'Lavish Tyagi',
    Age: 23,
    Address: 'Panna',
    tid: ObjectId('675eb2ebf7a0226d0f1cda59')
  }
]
School> db.teachers.find()
[
  {
    _id: ObjectId('675eb2ebf7a0226d0f1cda58'),
    name: 'RadhaMayaa',
    age: 45,
    Salary: 234567,
    Address: [ { Street: 'Golok Gali' }, { Village: 'Golok' } ]
  },
  {
    _id: ObjectId('675eb2ebf7a0226d0f1cda59'),
    name: 'Krishna',
    Age: 47,
    Salary: 123456,
    address: 'Golok'
  }
]
School> db.stats()
{
  db: 'School',
  collections: Long('2'),
  views: Long('0'),
  objects: Long('4'),
  avgObjSize: 113.75,
  dataSize: 455,
  storageSize: 57344,
  indexes: Long('2'),
  indexSize: 40960,
  totalSize: 98304,
  scaleFactor: Long('1'),
  fsUsedSize: 212682272768,
  fsTotalSize: 245107195904,
  ok: 1
}
School> db.student.find()

School> db.students.find()
[
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda56'),
    name: 'Abhishek Tyagi',
    Age: 23,
    Address: [ { street: 'Hanuman Gali' }, { Village: 'Chhapar' } ],
    tid: ObjectId('675eb2ebf7a0226d0f1cda58')
  },
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda57'),
    name: 'Lavish Tyagi',
    Age: 23,
    Address: 'Panna',
    tid: ObjectId('675eb2ebf7a0226d0f1cda59')
  }
]
School> typeof db.students.findOne().age
undefined
School> typeof db.students.find().age
undefined
School> typeof db.students.find().name
undefined
School> typeof db.students.findOne().name
string
School> typeof db.students.findOne().address
undefined
School> typeof db.students.findOne().Address
object
School> show collections;
students
teachers
School> show collections;
students
teachers
School> db.students.find()
[
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda56'),
    name: 'Abhishek Tyagi',
    Age: 23,
    Address: [ { street: 'Hanuman Gali' }, { Village: 'Chhapar' } ],
    tid: ObjectId('675eb2ebf7a0226d0f1cda58')
  },
  {
    _id: ObjectId('675eb1caf7a0226d0f1cda57'),
    name: 'Lavish Tyagi',
    Age: 23,
    Address: 'Panna',
    tid: ObjectId('675eb2ebf7a0226d0f1cda59')
  }
]
School> db.teachers.find()
[
  {
    _id: ObjectId('675eb2ebf7a0226d0f1cda58'),
    name: 'RadhaMayaa',
    age: 45,
    Salary: 234567,
    Address: [ { Street: 'Golok Gali' }, { Village: 'Golok' } ]
  },
  {
    _id: ObjectId('675eb2ebf7a0226d0f1cda59'),
    name: 'Krishna',
    Age: 47,
    Salary: 123456,
    address: 'Golok'
  }
]
School> show dbs;
Abhishek       72.00 KiB
Book          112.00 KiB
Car            80.00 KiB
CityData      112.00 KiB
Flights       116.00 KiB
School         96.00 KiB
Support        88.00 KiB
admin          40.00 KiB
bookRegistry   80.00 KiB
companyData    96.00 KiB
config         60.00 KiB
hospital       40.00 KiB
local         256.00 KiB
shop           96.00 KiB
School> use blog
switched to db blog
blog> show collections;

blog> db.users.insertOne([
... {
... "name":"Avni Tyagi",
... "age":22,
... "E-mail":"avni@aol.com"
... },
... {
... "name":"Abhinav Tyagi",
... "age":24,
... "E-mail":"abhinav@gmail.com"
... }
... ])
{
  acknowledged: true,
  insertedId: ObjectId('675f099df7a0226d0f1cda5a')
}
blog> show collections
users
blog> db.users.find()
[
  {
    '0': { name: 'Avni Tyagi', age: 22, 'E-mail': 'avni@aol.com' },
    '1': { name: 'Abhinav Tyagi', age: 24, 'E-mail': 'abhinav@gmail.com' },
    _id: ObjectId('675f099df7a0226d0f1cda5a')
  }
]
blog> db.users.drop()
true
blog> show collections;

blog> db.users.insertMany([
... {
... "name":"Avni Goel",
... "age"23,
Uncaught:
SyntaxError: Unexpected token (4:5)

  2 | {
  3 | "name":"Avni Goel",
> 4 | "age"23,
    |      ^
  5 |

blog> db.users.insertMany([
... {
... "name":"Avni Gupta",
... "age":23,
... "E-mail":"avni@gmail.com"
... },
... {
... "name":"Harsh Gupta",
... "age":24,
... "E-mail":"harsh@outlook.com"
... }
... ])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('675f0a6bf7a0226d0f1cda5b'),
    '1': ObjectId('675f0a6bf7a0226d0f1cda5c')
  }
}
blog> show collections;
users
blog> db.users.find()
[
  {
    _id: ObjectId('675f0a6bf7a0226d0f1cda5b'),
    name: 'Avni Gupta',
    age: 23,
    'E-mail': 'avni@gmail.com'
  },
  {
    _id: ObjectId('675f0a6bf7a0226d0f1cda5c'),
    name: 'Harsh Gupta',
    age: 24,
    'E-mail': 'harsh@outlook.com'
  }
]
blog> db.posts.insertOne(
... {
... "title":"My first Post!",
... "text":"This is my first Post,I hope you like it!",
... "tags":["new","tech","RadhaMayya","Krishna"],
... "creator":ObjectId('675f0a6bf7a0226d0f1cda5b'),
... "Comments":[{"text":"I like the post","author":ObjectId('675f0a6bf7a0226d0f1cda5b')},{"text":"I love it!!!","author":ObjectId('675f0a6bf7a0226d0f1cda5c')}]})
{
  acknowledged: true,
  insertedId: ObjectId('675f0bd2f7a0226d0f1cda5d')
}
blog> show collections;
posts
users
blog> db.posts.find()
[
  {
    _id: ObjectId('675f0bd2f7a0226d0f1cda5d'),
    title: 'My first Post!',
    text: 'This is my first Post,I hope you like it!',
    tags: [ 'new', 'tech', 'RadhaMayya', 'Krishna' ],
    creator: ObjectId('675f0a6bf7a0226d0f1cda5b'),
    Comments: [
      {
        text: 'I like the post',
        author: ObjectId('675f0a6bf7a0226d0f1cda5b')
      },
      {
        text: 'I love it!!!',
        author: ObjectId('675f0a6bf7a0226d0f1cda5c')
      }
    ]
  }
]
blog> show collections;
posts
users
blog> db.stats()
{
  db: 'blog',
  collections: Long('2'),
  views: Long('0'),
  objects: Long('3'),
  avgObjSize: 156.66666666666666,
  dataSize: 470,
  storageSize: 40960,
  indexes: Long('2'),
  indexSize: 40960,
  totalSize: 81920,
  scaleFactor: Long('1'),
  fsUsedSize: 212718981120,
  fsTotalSize: 245107195904,
  ok: 1
}
blog> show collections;
posts
users
blog> db.posts.find()
[
  {
    _id: ObjectId('675f0bd2f7a0226d0f1cda5d'),
    title: 'My first Post!',
    text: 'This is my first Post,I hope you like it!',
    tags: [ 'new', 'tech', 'RadhaMayya', 'Krishna' ],
    creator: ObjectId('675f0a6bf7a0226d0f1cda5b'),
    Comments: [
      {
        text: 'I like the post',
        author: ObjectId('675f0a6bf7a0226d0f1cda5b')
      },
      {
        text: 'I love it!!!',
        author: ObjectId('675f0a6bf7a0226d0f1cda5c')
      }
    ]
  }
]
blog> db.users.find()
[
  {
    _id: ObjectId('675f0a6bf7a0226d0f1cda5b'),
    name: 'Avni Gupta',
    age: 23,
    'E-mail': 'avni@gmail.com'
  },
  {
    _id: ObjectId('675f0a6bf7a0226d0f1cda5c'),
    name: 'Harsh Gupta',
    age: 24,
    'E-mail': 'harsh@outlook.com'
  }
]
blog> show collections;
posts
users
blog> db.posts.find()
[
  {
    _id: ObjectId('675f0bd2f7a0226d0f1cda5d'),
    title: 'My first Post!',
    text: 'This is my first Post,I hope you like it!',
    tags: [ 'new', 'tech', 'RadhaMayya', 'Krishna' ],
    creator: ObjectId('675f0a6bf7a0226d0f1cda5b'),
    Comments: [
      {
        text: 'I like the post',
        author: ObjectId('675f0a6bf7a0226d0f1cda5b')
      },
      {
        text: 'I love it!!!',
        author: ObjectId('675f0a6bf7a0226d0f1cda5c')
      }
    ]
  }
]
blog> db.posts.frop()
TypeError: db.posts.frop is not a function
blog> db.posts.drop()
true
blog> show collections;
users
blog> db.createCollection('posts',
... {validator:{$jsonSchema:
... {
... bsonType:'object',
... required:["title","text","creator","Comments"],
... properties:{
... title:{
... bsonType:"string",
... description:"must be a string and is required"
... },
... text:{
... bsonType:"string",
... description:"must be a string and is required"
... },
... creator:{
... bsonType:"objectId",
... description:"must be an object and is required"
... },
... Comments:{
... bsonType:"array",
... description:"must be an array and is required"
... items:{
Uncaught:
SyntaxError: Unexpected token, expected "," (22:0)

  20 | bsonType:"array",
  21 | description:"must be an array and is required"
> 22 | items:{
     | ^
  23 |

blog> db.createCollection('posts', {validator:{$jsonSchema: { bsonType:'object', required:["title","text","creator","Comments"], properties:{ title:{ bsonType:"string", description:"must be a string and is required" }, text:{ bsonType:"string", description:"must be a string and is required" }, creator:{ bsonType:"objectId", description:"must be an object and is required" }, Comments:{ bsonType:"array", description:"must be an array and is required", items:{
... bsonType:"object",
... required:["text","author"],
... properties:{
... text:{
... bsonType:"string",
... description:"must be a string and is required"
... },
... author:{
... bsonType:"objectId",
... description:"must be an object and is required"
... }
... }
... }
... }
... }
... }
... }
... })
{ ok: 1 }
blog> show collections;
posts
users
blog> db.posts.find()

blog>  db.stats()
{
  db: 'blog',
  collections: Long('2'),
  views: Long('0'),
  objects: Long('2'),
  avgObjSize: 81,
  dataSize: 162,
  storageSize: 24576,
  indexes: Long('2'),
  indexSize: 24576,
  totalSize: 49152,
  scaleFactor: Long('1'),
  fsUsedSize: 212752420864,
  fsTotalSize: 245107195904,
  ok: 1
}
blog> show collections;
posts
users
blog> db.users.find()
[
  {
    _id: ObjectId('675f0a6bf7a0226d0f1cda5b'),
    name: 'Avni Gupta',
    age: 23,
    'E-mail': 'avni@gmail.com'
  },
  {
    _id: ObjectId('675f0a6bf7a0226d0f1cda5c'),
    name: 'Harsh Gupta',
    age: 24,
    'E-mail': 'harsh@outlook.com'
  }
]
blog> db.posts.find()

blog> db.posts.insertOne({
... "title":"My first post!",
... "text":"This is my first post,I hope you like it!!!",
... "tags":["new","tech","Unique beauty"],
... "creator":"This is my Object",
... "comments":{"text":"I love it!!!","author":ObjectId('675f0a6bf7a0226d0f1cda5c')}
... })
Uncaught:
MongoServerError: Document failed validation
Additional information: {
  failingDocumentId: ObjectId('6760494ff7a0226d0f1cda5e'),
  details: {
    operatorName: '$jsonSchema',
    schemaRulesNotSatisfied: [
      {
        operatorName: 'properties',
        propertiesNotSatisfied: [
          {
            propertyName: 'creator',
            description: 'must be an object and is required',
            details: [
              {
                operatorName: 'bsonType',
                specifiedAs: { bsonType: 'objectId' },
                reason: 'type did not match',
                consideredValue: 'This is my Object',
                consideredType: 'string'
              }
            ]
          }
        ]
      },
      {
        operatorName: 'required',
        specifiedAs: { required: [ 'title', 'text', 'creator', 'Comments' ] },
        missingProperties: [ 'Comments' ]
      }
    ]
  }
}
blog> db.posts.insertOne({ "title": "My first post!", "text": "This is my first post,I hope you like it!!!", "tags": ["new", "tech", "Unique beauty"], "creator": " ObjectId('675f0a6bf7a0226d0f1cda5b')", "Comments": { "text": "I love it!!!", "author": ObjectId('675f0a6bf7a0226d0f1cda5c') } })
Uncaught:
MongoServerError: Document failed validation
Additional information: {
  failingDocumentId: ObjectId('676049c2f7a0226d0f1cda5f'),
  details: {
    operatorName: '$jsonSchema',
    schemaRulesNotSatisfied: [
      {
        operatorName: 'properties',
        propertiesNotSatisfied: [
          {
            propertyName: 'creator',
            description: 'must be an object and is required',
            details: [
              {
                operatorName: 'bsonType',
                specifiedAs: { bsonType: 'objectId' },
                reason: 'type did not match',
                consideredValue: " ObjectId('675f0a6bf7a0226d0f1cda5b')",
                consideredType: 'string'
              }
            ]
          },
          {
            propertyName: 'Comments',
            description: 'must be an array and is required',
            details: [
              {
                operatorName: 'bsonType',
                specifiedAs: { bsonType: 'array' },
                reason: 'type did not match',
                consideredValue: {
                  text: 'I love it!!!',
                  author: ObjectId('675f0a6bf7a0226d0f1cda5c')
                },
                consideredType: 'object'
              }
            ]
          }
        ]
      }
    ]
  }
}
blog> db.posts.insertOne({ "title": "My first post!", "text": "This is my first post,I hope you like it!!!", "tags": ["new", "tech", "Unique beauty"],"creator":ObjectId('675f0a6bf7a0226d0f1cda5b'),"Comments":{"text":"I love it!!!","author": ObjectId('675f0a6bf7a0226d0f1cda5c') } })
Uncaught:
MongoServerError: Document failed validation
Additional information: {
  failingDocumentId: ObjectId('67604a01f7a0226d0f1cda60'),
  details: {
    operatorName: '$jsonSchema',
    schemaRulesNotSatisfied: [
      {
        operatorName: 'properties',
        propertiesNotSatisfied: [
          {
            propertyName: 'Comments',
            description: 'must be an array and is required',
            details: [
              {
                operatorName: 'bsonType',
                specifiedAs: { bsonType: 'array' },
                reason: 'type did not match',
                consideredValue: {
                  text: 'I love it!!!',
                  author: ObjectId('675f0a6bf7a0226d0f1cda5c')
                },
                consideredType: 'object'
              }
            ]
          }
        ]
      }
    ]
  }
}
blog> db.posts.insertOne({ "title": "My first post!", "text": "This is my first post,I hope you like it!!!", "tags": ["new", "tech", "Unique beauty"],"creator":ObjectId('675f0a6bf7a0226d0f1cda5b'),"Comments":[{"text":"I love it!!!","author": ObjectId('675f0a6bf7a0226d0f1cda5c')}]})
{
  acknowledged: true,
  insertedId: ObjectId('67604a2ef7a0226d0f1cda61')
}
blog> show collections;
posts
users
blog> db.users.find(0
... 
blog> db.users.find()
[
  {
    _id: ObjectId('675f0a6bf7a0226d0f1cda5b'),
    name: 'Avni Gupta',
    age: 23,
    'E-mail': 'avni@gmail.com'
  },
  {
    _id: ObjectId('675f0a6bf7a0226d0f1cda5c'),
    name: 'Harsh Gupta',
    age: 24,
    'E-mail': 'harsh@outlook.com'
  }
]
blog> db.posts.find()
[
  {
    _id: ObjectId('67604a2ef7a0226d0f1cda61'),
    title: 'My first post!',
    text: 'This is my first post,I hope you like it!!!',
    tags: [ 'new', 'tech', 'Unique beauty' ],
    creator: ObjectId('675f0a6bf7a0226d0f1cda5b'),
    Comments: [
      {
        text: 'I love it!!!',
        author: ObjectId('675f0a6bf7a0226d0f1cda5c')
      }
    ]
  }
]
blog> show collections
posts
users
blog> show dbs;
Abhishek       72.00 KiB
Book          112.00 KiB
Car            80.00 KiB
CityData      112.00 KiB
Flights       116.00 KiB
School         96.00 KiB
Support        88.00 KiB
admin          40.00 KiB
blog           80.00 KiB
bookRegistry   80.00 KiB
companyData    96.00 KiB
config         96.00 KiB
hospital       40.00 KiB
local         256.00 KiB
shop           96.00 KiB
blog> help

  Shell Help:

    use                                        Set current database
    show                                       'show databases'/'show dbs': Print a list of all available databases.
                                               'show collections'/'show tables': Print a list of all collections for current database.
                                               'show profile': Prints system.profile information.
                                               'show users': Print a list of all users for current database.
                                               'show roles': Print a list of all roles for current database.
                                               'show log <type>': log for current connection, if type is not set uses 'global'
                                               'show logs': Print all logs.

    exit                                       Quit the MongoDB shell with exit/exit()/.exit
    quit                                       Quit the MongoDB shell with quit/quit()
    Mongo                                      Create a new connection and return the Mongo object. Usage: new Mongo(URI, options [optional])
    connect                                    Create a new connection and return the Database object. Usage: connect(URI, username [optional], password [optional])
    it                                         result of the last line evaluated; use to further iterate
    version                                    Shell version
    load                                       Loads and runs a JavaScript file into the current shell environment
    enableTelemetry                            Enables collection of anonymous usage data to improve the mongosh CLI
    disableTelemetry                           Disables collection of anonymous usage data to improve the mongosh CLI
    passwordPrompt                             Prompts the user for a password
    sleep                                      Sleep for the specified number of milliseconds
    print                                      Prints the contents of an object to the output
    printjson                                  Alias for print()
    convertShardKeyToHashed                    Returns the hashed value for the input using the same hashing function as a hashed index.
    cls                                        Clears the screen like console.clear()
    isInteractive                              Returns whether the shell will enter or has entered interactive mode

  For more information on usage: https://docs.mongodb.com/manual/reference/method
blog> shell version
Uncaught:
SyntaxError: Missing semicolon. (1:5)

> 1 | shell version
    |      ^
  2 |

blog> shell --version
Uncaught:
SyntaxError: Missing semicolon. (1:8)

> 1 | shell --version
    |         ^
  2 |

blog> /* My collections name is users*/

blog> /* My another collections is posts*/

blog> 
